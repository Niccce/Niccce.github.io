<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>ES6知识点归纳</title>
      <link href="/2019/09/04/Knowledge-Points-of-ES6/"/>
      <url>/2019/09/04/Knowledge-Points-of-ES6/</url>
      <content type="html"><![CDATA[<p>参考书籍：<a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">http://es6.ruanyifeng.com/</a><br>参考视频：<a href="https://www.bilibili.com/video/av47304735" target="_blank" rel="noopener">https://www.bilibili.com/video/av47304735</a></p><h1 id="var、let、const"><a href="#var、let、const" class="headerlink" title="var、let、const"></a>var、let、const</h1><h2 id="var"><a href="#var" class="headerlink" title="var"></a><code>var</code></h2><ol><li>可以重复声明、可以重新赋值</li><li>在函数中声明变量，则只能在函数中使用（var声明的变量的作用域属于Function Scope）</li><li><p>用var在if语句的代码块中声明，因为没有函数，所以在if语句的代码块外也能访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="string">'hi'</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(i);     <span class="comment">//hi</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i);         <span class="comment">//hi</span></span><br><span class="line">&#125;</span><br><span class="line">hi();</span><br><span class="line"><span class="built_in">console</span>.log(i);<span class="comment">//delete.html:26 Uncaught ReferenceError: i is not defined</span></span><br></pre></td></tr></table></figure></li><li><p>存在变量提升，声明的语句会被提升到作用域最上方，赋值语句不被提升，留在原地</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;<span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于</span></span><br><span class="line"><span class="comment">//var i;</span></span><br><span class="line"><span class="comment">//console.log(i);</span></span><br><span class="line"><span class="comment">//i=1;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>注意：</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);<span class="comment">//0 1 2 3 4,这行语句在for循环执行的时候立即执行</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);<span class="comment">//5 5 5 5 5 ,for循环结束后执行</span></span><br><span class="line">    &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>解决方法就是改用let</li></ul><h2 id="let"><a href="#let" class="headerlink" title="let"></a><code>let</code></h2><ol><li>不可以重复声明、可以重新赋值</li><li><p>用let声明变量，只在代码块内可访问（let声明的变量的作用域属于block scope）</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> discount = <span class="number">0.9</span>;</span><br><span class="line"><span class="keyword">const</span> key = <span class="string">'abc'</span>;</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> discount = <span class="number">0.5</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(discount);  <span class="comment">//0.5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(discount);      <span class="comment">//0.9</span></span><br></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Identifier 'count' has already been declared</span></span><br></pre></td></tr></table></figure></li><li><p>存在变量提升，但因为存在作用域死区（Temporal dead zone），但是若想在当前块级作用域中，这个变量声明之前引用这个变量，就会报错。</p><ul><li>即<strong>在这个作用域开始直到这个变量声明之前，这个变量都处在临时性死区当中，这时引用它会报ReferenceError</strong></li></ul></li></ol><h2 id="const"><a href="#const" class="headerlink" title="const"></a><code>const</code></h2><ol><li>不可以重复声明、不可以重新赋值</li><li>用const声明时必须立刻赋值</li><li><p>用const声明变量，只在代码块内可访问（属于block scope）</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> key = <span class="string">'123'</span>;</span><br><span class="line">key = <span class="string">'456'</span>;<span class="comment">//delete.html:19 Uncaught TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> key;<span class="comment">//Uncaught SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = <span class="string">'123'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(key);<span class="comment">//123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(key);<span class="comment">//delete.html:22 Uncaught ReferenceError: key is not defined</span></span><br></pre></td></tr></table></figure></li></ol><p>注意：这样也是不可以的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> i = <span class="number">1</span>;<span class="comment">//Uncaught SyntaxError: Identifier 'i' has already been declared</span></span><br></pre></td></tr></table></figure></p><ol start="3"><li><p>若用const声明时，给它的是一个对象，那么，对象的属性仍能改变，因为const指向的是对象的引用，这个引用不能变</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">'Alred'</span>,</span><br><span class="line">    age: <span class="number">30</span></span><br><span class="line">&#125;;</span><br><span class="line">person = &#123;</span><br><span class="line">    name: <span class="string">'Alfred'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//delete.html:22 Uncaught TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">        name: <span class="string">'Alred'</span>,</span><br><span class="line">        age: <span class="number">30</span></span><br><span class="line">    &#125;;</span><br><span class="line">person.age = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person);<span class="comment">//正常输出且不报错，其中age为20</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><p>也可以这样赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> abc = &#123;</span><br><span class="line">    name: <span class="string">'Raymond'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person2 = abc;</span><br></pre></td></tr></table></figure></li><li><p>若希望对象的属性值也不修改的话，可以使用Object.freeze()方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">'Alred'</span>,</span><br><span class="line">    age: <span class="number">30</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.freeze(person);  <span class="comment">//不允许改变对象的属性值</span></span><br><span class="line">person.age = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.age); <span class="comment">//30</span></span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>存在变量提升，也存在作用域死区（和let一样）</li></ol><h2 id="三者如何选择"><a href="#三者如何选择" class="headerlink" title="三者如何选择"></a>三者如何选择</h2><ul><li>默认使用 const</li><li>当变量需要重新绑定或更新的时候使用 let</li><li>在ES6中尽量不适用 var</li></ul><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><h2 id="语法简明"><a href="#语法简明" class="headerlink" title="语法简明"></a>语法简明</h2><ul><li><p>没有参数</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    () =&gt; &#123; ... &#125; <span class="comment">// 没有参数</span></span><br><span class="line">    x =&gt; &#123; ... &#125; <span class="comment">// 一个参数，括号可加可不加(x)=&gt;&#123;...&#125;</span></span><br><span class="line">(x, y) =&gt; &#123; ... &#125; <span class="comment">// 多个参数</span></span><br></pre></td></tr></table></figure>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> double = numbers.map(<span class="function"><span class="keyword">function</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> number * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> double2 = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> number * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(double); <span class="comment">// [2, 4, 6, 8, 10]</span></span><br><span class="line"><span class="built_in">console</span>.log(double2); <span class="comment">// [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="可以隐式返回"><a href="#可以隐式返回" class="headerlink" title="可以隐式返回"></a>可以隐式返回</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x =&gt; &#123; <span class="keyword">return</span> x * x &#125;  <span class="comment">// 语句块</span></span><br><span class="line">x =&gt; x * x  <span class="comment">// 表达式，和上一行作用相同</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> double = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> number * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> double2 = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span> number * <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(double); <span class="comment">// [2, 4, 6, 8, 10]</span></span><br><span class="line"><span class="built_in">console</span>.log(double2); <span class="comment">// [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><ol><li>箭头函数没有自己的this值，它的this是继承它的父作用域的（即上层作用域）</li><li>箭头函数在指定的时候this已经确定，一般情况下不会因为调用而改变，不过会随上层作用域的this的变化而变化</li></ol><ul><li>先看一个例子<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Alfred = &#123;</span><br><span class="line">    name: <span class="string">'Alfred'</span>,</span><br><span class="line">    hobbies: [<span class="string">'singing'</span>, <span class="string">'dancing'</span>, <span class="string">'composeing'</span>],</span><br><span class="line">    printHobbies: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.hobbies.map(<span class="function"><span class="keyword">function</span>(<span class="params">hobby</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//window</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> loves <span class="subst">$&#123;hobby&#125;</span>`</span>); <span class="comment">//输出内容都缺了Alfred</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Alfred.printHobbies();</span><br></pre></td></tr></table></figure></li></ul><p>调用Alfred中的printHobbies()，第一个this指向Alfred，然后printHobbies里的那个函数，是map方法的一个回调函数，这个方法是独立运行的，因此这个方法指向的是window</p><ul><li>解决方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Alfred = &#123;</span><br><span class="line">    name: <span class="string">'Alfred'</span>,</span><br><span class="line">    hobbies: [<span class="string">'singing'</span>, <span class="string">'dancing'</span>, <span class="string">'composeing'</span>],</span><br><span class="line">    printHobbies: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">this</span>.hobbies.map(<span class="function"><span class="keyword">function</span>(<span class="params">hobby</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>); </span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;_this.name&#125;</span> loves <span class="subst">$&#123;hobby&#125;</span>`</span>); </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Alfred.printHobbies();</span><br></pre></td></tr></table></figure></li></ul><p>或者，使用箭头函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Alfred = &#123;</span><br><span class="line">    name: <span class="string">'Alfred'</span>,</span><br><span class="line">    hobbies: [<span class="string">'singing'</span>, <span class="string">'dancing'</span>, <span class="string">'composeing'</span>],</span><br><span class="line">    printHobbies: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobbies.map(<span class="function"><span class="params">hobby</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> loves <span class="subst">$&#123;hobby&#125;</span>`</span>); </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Alfred.printHobbies();</span><br></pre></td></tr></table></figure></p><ul><li>另外：由于箭头函数是匿名函数，所以一般会把函数赋值给一个变量<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> greet = <span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;;</span><br><span class="line">greet(<span class="string">'Alfred'</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="箭头函数的不适用场景"><a href="#箭头函数的不适用场景" class="headerlink" title="箭头函数的不适用场景"></a>箭头函数的不适用场景</h2><ol><li><p>不能作为构造函数，不能用于定义对象方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const person = (name, points) =&gt; &#123;       //Uncaught TypeError: person is not a constructor</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="function"><span class="keyword">function</span>(<span class="params">name, points</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.points = points;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Alfred = <span class="keyword">new</span> person(<span class="string">'Alfred'</span>, <span class="number">30</span>);</span><br><span class="line"><span class="comment">// person.prototype.updatePoints = () =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(this);//Window，因为箭头函数不会绑定this，但是方法又需要绑定到对象上，因此不能用</span></span><br><span class="line"><span class="comment">//     this.points--;</span></span><br><span class="line"><span class="comment">//     console.log(this.points);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// Alfred.updatePoints(); //NaN</span></span><br><span class="line">person.prototype.updatePoints = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//person</span></span><br><span class="line">    <span class="keyword">this</span>.points--;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.points);</span><br><span class="line">&#125;</span><br><span class="line">Alfred.updatePoints(); <span class="comment">//29</span></span><br></pre></td></tr></table></figure></li><li><p>真的需要用到this的时候不能使用箭头函数</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">style</span>=<span class="string">"width: 50px ; height: 50px; background-color: #000000;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>);</span><br><span class="line"><span class="comment">// app.addEventListener('click', () =&gt; &#123;</span></span><br><span class="line">app.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//此处的方法需要绑定到app上，但是用箭头函数是不会进行绑定的</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//Window</span></span><br><span class="line">    <span class="keyword">this</span>.style.height = <span class="string">'100px'</span>;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">//此处希望this仍然指向app，使用箭头函数可以使this与外层保持一致</span></span><br><span class="line">        <span class="keyword">this</span>.style.height = <span class="string">'50px'</span>;</span><br><span class="line">    &#125;, <span class="number">500</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>需要使用arguments对象</strong>时不能使用箭头函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sum函数返回所有参数的和</span></span><br><span class="line"><span class="comment">// const sum = () =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     return Array.from(arguments).reduce((preSum, value) =&gt; preSum + value, 0)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// sum(1, 2, 3); //delete.html:19 Uncaught ReferenceError: arguments is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>).reduce(<span class="function">(<span class="params">preSum, value</span>) =&gt;</span> preSum + value, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">//6</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    a = a || <span class="number">5</span>;</span><br><span class="line">    b = b || <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a * b);</span><br><span class="line">&#125;</span><br><span class="line">multiply(); <span class="comment">//15，均使用了默认值</span></span><br><span class="line">multiply(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">//6，使用了参数的值</span></span><br><span class="line">multiply(<span class="number">1</span>); <span class="comment">//3，b使用了默认值</span></span><br><span class="line">multiply(<span class="literal">undefined</span>, <span class="number">2</span>); <span class="comment">//10，a使用了默认值</span></span><br></pre></td></tr></table></figure><p>用ES6可以简化为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">a = <span class="number">5</span>, b = <span class="number">3</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a * b);</span><br><span class="line">&#125;</span><br><span class="line">multiply(); <span class="comment">//15，均使用了默认值</span></span><br><span class="line">multiply(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">//6，使用了参数的值</span></span><br><span class="line">multiply(<span class="number">1</span>); <span class="comment">//3，b使用了默认值</span></span><br><span class="line">multiply(<span class="literal">undefined</span>, <span class="number">2</span>); <span class="comment">//10，a使用了默认值，不能是multiply(, 2);必须要指明前面的参数</span></span><br><span class="line">multiply(<span class="literal">null</span>, <span class="number">2</span>); <span class="comment">//0，不会使用默认值</span></span><br></pre></td></tr></table></figure></p><ul><li>如果有传参，则使用传进来的值，如果没有传值，函数默认传的是undefined，if(typeof a === undefined),就会使用默认值</li></ul><h1 id="ES6-模版字符串"><a href="#ES6-模版字符串" class="headerlink" title="ES6 模版字符串"></a>ES6 模版字符串</h1><h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><ul><li>用反引号”`”来定义字符串</li><li>用<code>${}</code>来引用变量，也可以放表达式、对象的属性、函数</li><li>直接使用反引号可以保存html代码的层级结构，不需要用\或数组去模拟</li><li>模版字符串可以嵌套使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = <span class="string">'Alfred'</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">const</span> sentence = person + <span class="string">' is '</span> + age + <span class="string">' years old'</span>; <span class="comment">//es5</span></span><br><span class="line"><span class="keyword">const</span> sentence2 = <span class="string">`<span class="subst">$&#123;person&#125;</span> is <span class="subst">$&#123;age * <span class="number">2</span>&#125;</span> years old`</span>; <span class="comment">//es6</span></span><br><span class="line"><span class="keyword">const</span> template = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;Hello&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>.trim();</span><br><span class="line"><span class="built_in">console</span>.log(sentence);</span><br><span class="line"><span class="built_in">console</span>.log(sentence2);</span><br><span class="line"><span class="built_in">console</span>.log(template);</span><br></pre></td></tr></table></figure><p>简单应用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Alfred = &#123;</span><br><span class="line">    name: <span class="string">'Alfred'</span>,</span><br><span class="line">    todos: [&#123;</span><br><span class="line">            thing: <span class="string">'Go to the gym'</span>,</span><br><span class="line">            completed: <span class="literal">false</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            thing: <span class="string">'sing a song'</span>,</span><br><span class="line">            completed: <span class="literal">true</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            thing: <span class="string">'dance'</span>,</span><br><span class="line">            completed: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> template = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;Alfred.todos.map(todos=&gt;<span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">        &lt;li&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">            <span class="subst">$&#123;todos.thing&#125;</span> <span class="subst">$&#123;todos.completed ? <span class="string">'(yes)'</span>:<span class="string">'(no)'</span>&#125;</span></span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">        &lt;/li&gt;`</span>).join(<span class="string">''</span>)&#125;</span></span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(template);</span><br><span class="line"><span class="built_in">document</span>.body.innerHTML=template;</span><br></pre></td></tr></table></figure></p><p>根据以上例子，还可以将读取对象内容的代码封装成函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderTodos</span>(<span class="params">todos</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">    <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;todos.map(todo =&gt; <span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">            &lt;li&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">        <span class="subst">$&#123;todo.thing&#125;</span> <span class="subst">$&#123;todo.completed ? <span class="string">'(yes)'</span> : <span class="string">'(no)'</span>&#125;</span></span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">            &lt;/li&gt;`</span>).join(<span class="string">''</span>)&#125;</span></span></span><br><span class="line"><span class="string">    &lt;/ul&gt;`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> template = <span class="string">`<span class="subst">$&#123;renderTodos(Alfred.todos)&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">document</span>.body.innerHTML = template;</span><br></pre></td></tr></table></figure></p><h2 id="标签模版"><a href="#标签模版" class="headerlink" title="标签模版"></a>标签模版</h2><ul><li>即在模版字符串中添加标签，根据我们自定义的规则，返回我们想要的字符串</li><li>标签对应js里的一个函数名</li><li>使用标签模版字符串时，最后那个字符串返回的内容是由标签（函数）决定的</li><li>这个函数可以接受模版字符串作为参数，第一个参数为模版字符串里的普通字符，其后的参数是模版字符串里的变量</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数可以用逗号分隔一个一个写</span></span><br><span class="line"><span class="comment">//也可以用ES6中的剩余参数，values是一个数组，是又剩余的参数组成</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hightlight</span>(<span class="params">strings, ...values</span>) </span>&#123;</span><br><span class="line"><span class="comment">// debugger;//可以看到strings，values里有什么</span></span><br><span class="line"><span class="keyword">const</span> hightlighted = values.map(</span><br><span class="line">    value =&gt; <span class="string">`&lt;span class='hightlight'&gt;<span class="subst">$&#123;value&#125;</span>&lt;/span&gt;`</span></span><br><span class="line">); <span class="comment">//遍历变量的数组，给变量加一个span标签和hightlight样式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(hightlighted);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将普通字符和处理后的变量拼接在一起</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">""</span>;</span><br><span class="line"><span class="comment">// strings.forEach((string, i) =&gt; &#123;str += `$&#123;string&#125;$&#123;hightlighted[i]&#125;`;&#125;);</span></span><br><span class="line"><span class="comment">//由于strings里最后一个是空字符串，因此要改写，以免拼接后句子中出现underfined</span></span><br><span class="line">strings.forEach(<span class="function">(<span class="params">string, i</span>) =&gt;</span> &#123;</span><br><span class="line">    str += <span class="string">`<span class="subst">$&#123;string&#125;</span><span class="subst">$&#123;hightlighted[i] || <span class="string">""</span>&#125;</span>`</span>;</span><br><span class="line">&#125;);    </span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> user = <span class="string">"Alfred"</span>;</span><br><span class="line"><span class="keyword">const</span> topic = <span class="string">"Learn ES6"</span>;</span><br><span class="line"><span class="keyword">const</span> sentence = hightlight<span class="string">`<span class="subst">$&#123;user&#125;</span> has commented on your topic <span class="subst">$&#123;topic&#125;</span>`</span>;</span><br><span class="line"><span class="comment">//   console.log(sentence);</span></span><br><span class="line"><span class="built_in">document</span>.body.innerHTML = sentence;</span><br></pre></td></tr></table></figure><p>以上代码优化、简化：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hightlight</span>(<span class="params">strings, ...values</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> hightlighted = values.map(</span><br><span class="line">    value =&gt; <span class="string">`&lt;span class='hightlight'&gt;<span class="subst">$&#123;value&#125;</span>&lt;/span&gt;`</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串拼接也可以改为,reduce</span></span><br><span class="line"><span class="keyword">return</span> strings.reduce(</span><br><span class="line">    (prev, curr, i) =&gt; <span class="string">`<span class="subst">$&#123;prev&#125;</span><span class="subst">$&#123;curr&#125;</span><span class="subst">$&#123;hightlighted[i] || <span class="string">''</span>&#125;</span>`</span>,<span class="string">''</span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> user = <span class="string">"Alfred"</span>;</span><br><span class="line"><span class="keyword">const</span> topic = <span class="string">"Learn ES6"</span>;</span><br><span class="line"><span class="keyword">const</span> sentence = hightlight<span class="string">`<span class="subst">$&#123;user&#125;</span> has commented on your topic <span class="subst">$&#123;topic&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">document</span>.body.innerHTML = sentence;</span><br></pre></td></tr></table></figure></p><p>注意：</p><ol><li>如果模版字符串是以变量开头或结尾的话，打印参数strings，会看到里面有空字符串</li></ol><blockquote><p>forEach():<a href="https://www.runoob.com/jsref/jsref-foreach.html" target="_blank" rel="noopener">https://www.runoob.com/jsref/jsref-foreach.html</a><br>reduce():<a href="https://www.runoob.com/jsref/jsref-reduce.html" target="_blank" rel="noopener">https://www.runoob.com/jsref/jsref-reduce.html</a></p></blockquote><h3 id="最佳实践——过滤用户输入（防xss攻击）"><a href="#最佳实践——过滤用户输入（防xss攻击）" class="headerlink" title="最佳实践——过滤用户输入（防xss攻击）"></a>最佳实践——过滤用户输入（防xss攻击）</h3><ul><li>使用<a href="https://github.com/cure53/DOMPurify" target="_blank" rel="noopener">DOMPurify</a><blockquote><p>更多关于标签模版的内容：<a href="https://www.cnblogs.com/sminocence/p/6832331.html" target="_blank" rel="noopener">https://www.cnblogs.com/sminocence/p/6832331.html</a></p></blockquote></li></ul><h1 id="ES6新增的字符串函数"><a href="#ES6新增的字符串函数" class="headerlink" title="ES6新增的字符串函数"></a>ES6新增的字符串函数</h1><h2 id="startsWith"><a href="#startsWith" class="headerlink" title=".startsWith()"></a>.startsWith()</h2><ul><li>是否（从第n位开始）以’xx’字符串开头</li><li>区分大小写<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num=<span class="string">'881208Alfred'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.startsWith(<span class="string">'88'</span>));<span class="comment">//true,是否以'88'开头</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num.startsWith(<span class="string">'1208'</span>,<span class="number">1</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(num.startsWith(<span class="string">'1208'</span>,<span class="number">2</span>));<span class="comment">//true，从第三位开始是不是'1208'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num.startsWith(<span class="string">'A'</span>,<span class="number">6</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(num.startsWith(<span class="string">'a'</span>,<span class="number">6</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="endsWith"><a href="#endsWith" class="headerlink" title=".endsWith()"></a>.endsWith()</h2><ul><li>是否以’xx’字符串结尾</li><li>使用与startsWith相似</li><li>区分大小写<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(num.endsWith(<span class="string">"ed"</span>)); <span class="comment">//true,是否以'es'结尾</span></span><br><span class="line"><span class="built_in">console</span>.log(num.endsWith(<span class="string">"1208"</span>, <span class="number">6</span>)); <span class="comment">//true，注意6是1208中8的下标后一位</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num.endsWith(<span class="string">"A"</span>, <span class="number">7</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(num.endsWith(<span class="string">"a"</span>, <span class="number">7</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="includes"><a href="#includes" class="headerlink" title=".includes()"></a>.includes()</h2><ul><li>‘xx’字符串是否包含在原字符串里<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sentence = <span class="string">"Alfred loves his father"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(sentence.indexOf(<span class="string">'is'</span>)!==<span class="number">-1</span>);<span class="comment">//ES5，is字符串存在在sentence内</span></span><br><span class="line"><span class="built_in">console</span>.log(sentence.includes(<span class="string">'is'</span>));<span class="comment">//ES6，true</span></span><br><span class="line"><span class="built_in">console</span>.log(sentence.includes(<span class="string">'is'</span>,<span class="number">14</span>));<span class="comment">//true，从下标为14位及之后是否存在is</span></span><br><span class="line"><span class="built_in">console</span>.log(sentence.includes(<span class="string">'is'</span>,<span class="number">15</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="repeat"><a href="#repeat" class="headerlink" title=".repeat()"></a>.repeat()</h2><ul><li>让某字符串重复n次<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sentence = <span class="string">"Alfred loves his father"</span>;</span><br><span class="line"><span class="keyword">const</span> sentence2 = <span class="string">"I love programing"</span>;</span><br><span class="line"><span class="keyword">const</span> title = <span class="string">`<span class="subst">$&#123;<span class="string">"哈"</span>.repeat(<span class="number">3</span>)&#125;</span> <span class="subst">$&#123;sentence&#125;</span> <span class="subst">$&#123;<span class="string">"喽"</span>.repeat(<span class="number">3</span>)&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(title);<span class="comment">//哈哈哈 Alfred loves his father 喽喽喽</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串右对齐</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padder</span>(<span class="params">string, length = <span class="number">25</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="string">" "</span>.repeat(<span class="built_in">Math</span>.max(length - string.length, <span class="number">0</span>))&#125;</span><span class="subst">$&#123;string&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(padder(sentence));</span><br><span class="line"><span class="built_in">console</span>.log(padder(sentence2));</span><br></pre></td></tr></table></figure></li></ul><h1 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h1><ol><li><p>简单用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Alfred = &#123;</span><br><span class="line">name: <span class="string">"Alfred"</span>,</span><br><span class="line">age: <span class="number">30</span>,</span><br><span class="line">family: &#123;</span><br><span class="line">    mother: <span class="string">"one"</span>,</span><br><span class="line">    father: <span class="string">"two"</span>,</span><br><span class="line">    brother: <span class="string">"three"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// const name = ""; //下方声明了name和age变量，所以在它不能声明一样的变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; name, age &#125; = Alfred;</span><br><span class="line"><span class="comment">//先声明变量name和age，然后在Tom中找和变量相同的同名属性，然后分别赋值</span></span><br><span class="line"><span class="built_in">console</span>.log(name,age);</span><br></pre></td></tr></table></figure></li><li><p>如果还是想提前声明变量，可以使用大括号，见下方</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Alfred = &#123;</span><br><span class="line">name: <span class="string">"Alfred"</span>,</span><br><span class="line">age: <span class="number">30</span>,</span><br><span class="line">family: &#123;</span><br><span class="line">    mother: <span class="string">"one"</span>,</span><br><span class="line">    father: <span class="string">"two"</span>,</span><br><span class="line">    brother: <span class="string">"three"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> name = <span class="string">""</span>;</span><br><span class="line">(&#123; name, age &#125; = Alfred);</span><br><span class="line"><span class="built_in">console</span>.log(name, age);</span><br></pre></td></tr></table></figure></li><li><p>对象解构可以嵌套</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Alfred = &#123;</span><br><span class="line">name: <span class="string">"Alfred"</span>,</span><br><span class="line">age: <span class="number">30</span>,</span><br><span class="line">family: &#123;</span><br><span class="line">    mother: <span class="string">"one"</span>,</span><br><span class="line">    father: <span class="string">"two"</span>,</span><br><span class="line">    brother: <span class="string">"three"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span>&#123;father,mother,brother&#125;=Alfred.family;</span><br><span class="line"><span class="built_in">console</span>.log(father,mother,brother);</span><br></pre></td></tr></table></figure></li><li><p>如果提前使用了一个同名变量,就要重命名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Alfred = &#123;</span><br><span class="line">name: <span class="string">"Alfred"</span>,</span><br><span class="line">age: <span class="number">30</span>,</span><br><span class="line">family: &#123;</span><br><span class="line">    mother: <span class="string">"one"</span>,</span><br><span class="line">    father: <span class="string">"two"</span>,</span><br><span class="line">    brother: <span class="string">"three"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> father=<span class="string">'Dad'</span>;</span><br><span class="line"><span class="keyword">const</span>&#123;<span class="attr">father</span>:F,mother,<span class="attr">brother</span>:b&#125;=Alfred.family;<span class="comment">//此处声明了的是重命名之后的变量，是先声明了f变量，再Alfred.family中找到属性名是father的值，赋值给f</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(father,F);<span class="comment">//Dad two</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(brother);//如果想要打印brother，会报错,Uncaught ReferenceError: brother is not defined</span></span><br></pre></td></tr></table></figure></li><li><p>如果要在对象中拿一个没有的变量，会返回undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Alfred = &#123;</span><br><span class="line">name: <span class="string">"Alfred"</span>,</span><br><span class="line">age: <span class="number">30</span>,</span><br><span class="line">family: &#123;</span><br><span class="line">    mother: <span class="string">"one"</span>,</span><br><span class="line">    father: <span class="string">"two"</span>,</span><br><span class="line">    brother: <span class="string">"three"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> father=<span class="string">'Dad'</span>;</span><br><span class="line"><span class="keyword">const</span>&#123;<span class="attr">father</span>:F,mother,<span class="attr">brother</span>:b,sister&#125;=Alfred.family;</span><br><span class="line"><span class="built_in">console</span>.log(sister);<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><p>通常，如果没有这个值，可以给定一个默认值，只要对象里没有这个值（即等于undefined），或对象里该值就是undefined时，才使用这个默认值，否则都不会使用（0，false，null也不使用默认值）。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Alfred = &#123;</span><br><span class="line">name: <span class="string">"Alfred"</span>,</span><br><span class="line">age: <span class="number">30</span>,</span><br><span class="line">family: &#123;</span><br><span class="line">    mother: <span class="string">"one"</span>,</span><br><span class="line">    father: <span class="string">"two"</span>,</span><br><span class="line">    brother: <span class="string">"three"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> father=<span class="string">'Dad'</span>;</span><br><span class="line"><span class="keyword">const</span>&#123;<span class="attr">father</span>:F,mother,<span class="attr">brother</span>:b,sister=<span class="string">'have no sister'</span>&#125;=Alfred.family;</span><br><span class="line"><span class="built_in">console</span>.log(sister);<span class="comment">//have no sister</span></span><br></pre></td></tr></table></figure></li><li><p>这种使用默认值的场景在一些第三方库中非常常用</p></li></ul><h1 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h1><ol><li><p>简单用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [a,b]=numbers;<span class="comment">//声明变量，可以获取相应位置的值</span></span><br><span class="line"><span class="built_in">console</span>.log(a,b);<span class="comment">//one two</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [m,,n]=numbers;<span class="comment">//想拿第一和三位置的值，就把中间的空出来</span></span><br><span class="line"><span class="built_in">console</span>.log(m,n);<span class="comment">//one three</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [j,...k]=numbers;<span class="comment">//想获取第一个和剩余的，使用Rest参数</span></span><br><span class="line"><span class="built_in">console</span>.log(j,k);<span class="comment">//one  ["two", "three", "four"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [one,...two,three]=numbers;<span class="comment">//rest参数必须是数组的最后一个</span></span><br><span class="line"><span class="built_in">console</span>.log(two);<span class="comment">//报错</span></span><br></pre></td></tr></table></figure></li><li><p>数组解构指定默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> details=[<span class="string">'Alfred'</span>,<span class="literal">null</span>];</span><br><span class="line"><span class="keyword">const</span> [singerOne,singerTwo=<span class="string">'Jw'</span>,singerThree=<span class="string">'Raymond'</span>]=details;</span><br><span class="line"><span class="built_in">console</span>.log(singerOne,singerTwo,singerThree);<span class="comment">//Alfred null Raymond</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组中对应值为undefined，才使用默认值，为0，false，null不会使用默认值</span></span><br></pre></td></tr></table></figure></li><li><p>常用场景</p></li></ol><ul><li>交换变量的值<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b=<span class="number">20</span>;</span><br><span class="line">[a,b]=[b,a];</span><br><span class="line"><span class="built_in">console</span>.log(a,b);<span class="comment">//20 10</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="for-of"><a href="#for-of" class="headerlink" title="for of"></a>for of</h1><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols</a></p></blockquote><ol><li>for of循环可用于遍历可迭代对象</li><li><strong>可迭代对象</strong>：部署了<code>iterator</code>（迭代器/遍历器）的接口，或定义了<code>Symbol.iterator</code>方法的数据结构</li><li>遍历器可用于定义数据结构的遍历方式，js给很多内置的数据结构提供了内置的遍历器接口</li><li>for of循环不支持遍历对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.sayhi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> fruits = [<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"orange"</span>, <span class="string">"pear"</span>];</span><br><span class="line">fruits.hi=<span class="string">'hi'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for (let i = 0; i &lt; fruits.length; i++) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(fruits[i]);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 繁琐，可读性不高</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fruits.forEach(fruit=&gt;&#123;</span></span><br><span class="line"><span class="comment">//   console.log(fruit);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">//数组提供的forEach()方法，缺点是不能终止或者跳过，在forEach里面用break和continue都会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for (let fruit in fruits) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(fruits[fruit]);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//for in 循环的变量fruit，循环的是属性名</span></span><br><span class="line"><span class="comment">//for in遍历的是对象上所有的的可枚举属性，即使属性加在它的原型上也可以遍历到</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> fruit <span class="keyword">of</span> fruits)&#123;</span><br><span class="line">    <span class="keyword">if</span>(fruit===<span class="string">'banana'</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//continue;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(fruit);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for of循环中的变量fruit循环的是属性值，同时也不会遍历数组上的非数字属性，同时支持循环终止和跳过</span></span><br></pre></td></tr></table></figure><ol start="5"><li>定义一个数组fruits，在控制台输入<code>fruits.entries();</code>，可看到它的遍历器接口<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"orange"</span>, <span class="string">"pear"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> fruit <span class="keyword">of</span> fruits.entries())&#123;</span><br><span class="line"><span class="built_in">console</span>.log(fruit);</span><br><span class="line"><span class="comment">//可同时获取到元素的索引值和元素值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>因此可以改写成<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"orange"</span>, <span class="string">"pear"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, fruit] <span class="keyword">of</span> fruits.entries()) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;fruit&#125;</span> ranks <span class="subst">$&#123;index + <span class="number">1</span>&#125;</span> in my favorite fruits`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="6"><li>用于其他数据结构的一些场景</li></ol><ul><li><p>遍历arguments对象来计算数组的和（注意：arguments对象的原型是Object）</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> <span class="built_in">arguments</span>) &#123;</span><br><span class="line">    total += num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(total);</span><br><span class="line"><span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure></li><li><p>应用于字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"Alfred"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> char <span class="keyword">of</span> name) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(char);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用于获取NodeList，我们经常需要获取一些dom集合，用于操作里面的元素</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>one<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>two<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>three<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>four<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>five<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.completed</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: line-through;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list=<span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>);</span><br><span class="line">    <span class="comment">// console.log(list);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> li <span class="keyword">of</span> list)&#123;</span><br><span class="line">    li.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.classList.toggle(<span class="string">'completed'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="ES6为数组提供的新方法"><a href="#ES6为数组提供的新方法" class="headerlink" title="ES6为数组提供的新方法"></a>ES6为数组提供的新方法</h1><h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h2><ol><li><code>Array.from()</code>用于把一个类数组对象/可遍历对象转换为一个数组<ul><li>类数组对象是拥有length属性的对象</li><li>可遍历对象即可迭代对象(for of处有相关描述)</li></ul></li><li>from()不是数组原型上的方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num=[];</span><br><span class="line">num.from();<span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from(num);<span class="comment">//正确调用</span></span><br></pre></td></tr></table></figure></li></ol><p>简单运用：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>one<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>two<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>three<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todos=<span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line"><span class="keyword">const</span> num=todos.map(<span class="function"><span class="params">todo</span>=&gt;</span>todo.innerHTML);<span class="comment">//todos.map is not a function</span></span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为todo不是数组，只是类数组对象，所以没有map方法</span></span><br></pre></td></tr></table></figure><p>要改成<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todos=<span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line"><span class="keyword">const</span> num=<span class="built_in">Array</span>.from(todos);<span class="comment">//将类数组对象转换为数组</span></span><br><span class="line"><span class="keyword">const</span> nums=num.map(<span class="function"><span class="params">todo</span>=&gt;</span>todo.innerHTML);</span><br><span class="line"><span class="built_in">console</span>.log(nums);</span><br></pre></td></tr></table></figure></p><ol start="3"><li><p>Array.from()可传入第二个参数，是一个函数，相当于数组的map方法，会对转化成数组的每个元素执行相对应的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todos=<span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line"><span class="keyword">const</span> nums=<span class="built_in">Array</span>.from(todos,todo=&gt;todo.innerHTML);</span><br><span class="line"><span class="built_in">console</span>.log(nums);</span><br></pre></td></tr></table></figure></li><li><p>可将函数里的arguments这个类数组对象转换为数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">arguments</span>.reduce(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> prev + curr, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>,<span class="number">2</span>));<span class="comment">//报错</span></span><br></pre></td></tr></table></figure></li></ol><p>改成<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>).reduce(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> prev + curr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>,<span class="number">2</span>));<span class="comment">//3</span></span><br></pre></td></tr></table></figure></p><h2 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h2><ol><li><p><code>Array.of()</code>用于弥补Array这个构造函数的不足</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>));<span class="comment">//length为1的空数组</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">7</span>));<span class="comment">//length为7的空数组</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>));<span class="comment">//[1,2]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.of(<span class="number">2</span>));<span class="comment">//[2]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.of(<span class="number">1</span>,<span class="number">2</span>));<span class="comment">//[1,2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Array.of()解决了Array构造函数因传参个数不同而造成的的不一致</span></span><br></pre></td></tr></table></figure></li><li><p>of()不是数组原型上的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num=[];</span><br><span class="line">num.of();<span class="comment">//报错</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="ES6中数组的新方法"><a href="#ES6中数组的新方法" class="headerlink" title="ES6中数组的新方法"></a>ES6中数组的新方法</h1><h2 id="find"><a href="#find" class="headerlink" title=".find()"></a>.find()</h2><ol><li>用于寻找数组里的某个满足条件的元素</li><li>接受一个函数作为参数<ul><li>函数可接受三个参数，后两个为可选<code>inventory.find(element,index,array)</code></li></ul></li><li>当找到一个符合要求的元素就立刻返回<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inventory = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">"apple"</span>, <span class="attr">quantity</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">"banana"</span>, <span class="attr">quantity</span>: <span class="number">2</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">"pear"</span>, <span class="attr">quantity</span>: <span class="number">3</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bananas=inventory.find(<span class="function"><span class="params">fruit</span>=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(fruit);<span class="comment">//可见，执行到第一个满足条件的元素处就停止执行了</span></span><br><span class="line">    <span class="keyword">if</span>(fruit.name===<span class="string">'banana'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(bananas);</span><br></pre></td></tr></table></figure></li></ol><p>简化为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inventory = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">"apple"</span>, <span class="attr">quantity</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">"banana"</span>, <span class="attr">quantity</span>: <span class="number">2</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">"pear"</span>, <span class="attr">quantity</span>: <span class="number">3</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bananas=inventory.find(<span class="function"><span class="params">fruit</span>=&gt;</span>fruit.name===<span class="string">'banana'</span>);<span class="comment">//&#123;name: "banana", quantity: 2&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(bananas);</span><br></pre></td></tr></table></figure></p><h2 id="findIndex"><a href="#findIndex" class="headerlink" title=".findIndex()"></a>.findIndex()</h2><ol><li>找到数组中某个元素的索引</li><li>接受一个函数作为参数<ul><li>函数可接受三个参数，后两个为可选<code>inventory.findIndex(element,index,array)</code></li></ul></li><li>返回第一个找到的元素的索引<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inventory = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">"apple"</span>, <span class="attr">quantity</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">"banana"</span>, <span class="attr">quantity</span>: <span class="number">2</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">"banana"</span>, <span class="attr">quantity</span>: <span class="number">3</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bananaIndex=inventory.findIndex(<span class="function"><span class="params">fruit</span>=&gt;</span>fruit.name===<span class="string">'banana'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bananaIndex);<span class="comment">//1</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="some"><a href="#some" class="headerlink" title=".some()"></a>.some()</h2><ol><li>接受一个函数作为参数，返回布尔值</li><li>若数组中某个元素满足了测试函数，就返回true并且停止执行<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inventory = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">"apple"</span>, <span class="attr">quantity</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">"banana"</span>, <span class="attr">quantity</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">"pear"</span>, <span class="attr">quantity</span>: <span class="number">3</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isEnough = inventory.some(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.quantity &gt; <span class="number">0</span>);<span class="comment">//水果是否还有库存？</span></span><br><span class="line"><span class="built_in">console</span>.log(isEnough); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="every"><a href="#every" class="headerlink" title=".every()"></a>.every()</h2><ol><li>接受一个函数作为参数，返回布尔值</li><li>只有当所有元素都满足测试函数，才会返回true，否则，遇到第一个条件是false的元素就会立即返回并停止执行<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inventory = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">"apple"</span>, <span class="attr">quantity</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">"banana"</span>, <span class="attr">quantity</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">"pear"</span>, <span class="attr">quantity</span>: <span class="number">3</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isAllEnough = inventory.every(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.quantity &gt; <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(isAllEnough); <span class="comment">//false</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> 学习汇总 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇总 </tag>
            
            <tag> 前端 </tag>
            
            <tag> ES6 </tag>
            
            <tag> ECMAScript 6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webpack4.x快速入门</title>
      <link href="/2019/08/27/quick-to-learn-Webpack4-x/"/>
      <url>/2019/08/27/quick-to-learn-Webpack4-x/</url>
      <content type="html"><![CDATA[<blockquote><p>近期看了webpack4.0的教程，以下是视频学习整理，供大家参考<br>视频地址：<a href="https://www.bilibili.com/video/av41546218" target="_blank" rel="noopener">https://www.bilibili.com/video/av41546218</a><br>视频中的笔记见<a href="https://malun666.github.io/aicoder_vip_doc/#/pages/vip_2webpack" target="_blank" rel="noopener">https://malun666.github.io/aicoder_vip_doc/#/pages/vip_2webpack</a><br>webpack中文文档：<a href="https://www.webpackjs.com/" target="_blank" rel="noopener">https://www.webpackjs.com/</a><br>我根据视频教程的学习，截止到第15个视频，实践的代码及配置详见：<br><a href="https://github.com/Niccce/webpackLearning/blob/master/webpackdemo/webpack4.x%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.md" target="_blank" rel="noopener">https://github.com/Niccce/webpackLearning/blob/master/webpackdemo/webpack4.x%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.md</a><br>csdn博文链接：<a href="https://blog.csdn.net/qq_41445033/article/details/100019830" target="_blank" rel="noopener">https://blog.csdn.net/qq_41445033/article/details/100019830</a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="webpack是什么"><a href="#webpack是什么" class="headerlink" title="webpack是什么"></a>webpack是什么</h2><p>本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。</p><h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><p>loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。</p><h2 id="模块（modules）"><a href="#模块（modules）" class="headerlink" title="模块（modules）"></a>模块（modules）</h2><p>对比 Node.js 模块，webpack 模块能够以各种方式表达它们的依赖关系，几个例子如下：</p><ul><li>ES2015 <code>import</code> 语句</li><li>CommonJS <code>require()</code> 语句</li><li>AMD <code>define</code> 和 <code>require</code> 语句</li><li>css/sass/less 文件中的 <code>@import</code> 语句。</li><li><ul><li>样式(<code>url(...)</code>)或 HTML 文件(<code>&lt;img src=...&gt;</code>)中的图片链接(image url)</li></ul></li></ul><h1 id="1-Webpack快速入门demo"><a href="#1-Webpack快速入门demo" class="headerlink" title="1.Webpack快速入门demo"></a>1.Webpack快速入门demo</h1><blockquote><p>webpack最好安装在项目中，若全局安装，就都是全局安装的版本，但是有一些老项目可能是用老版本的webpack开发的。<br>webpack官方文档写到：不推荐全局安装 webpack。这会将你项目中的 webpack 锁定到指定版本，并且在使用不同的 webpack 版本的项目中，可能会导致构建失败。</p></blockquote><ul><li>4.0之前的版本安装webpack就可以了，但是4.0之后的版本需要再安装webpack-cli<h2 id="创建demo"><a href="#创建demo" class="headerlink" title="创建demo"></a>创建demo</h2></li></ul><ol><li>新建一个空的文件夹wpdemo</li><li>打开终端，输入<code>npm init -y</code>，初始化package.json文件</li><li>在终端输入<code>npm i -D webpack</code>本地安装webpack</li><li>在终端输入<code>npm i -D webpack-cli</code>安装webpack-cli</li><li>新建dist文件夹及其中的index.html；新建src文件夹机器中的index.js</li><li>在终端输入<code>npm i lodash -P</code>安装lodash</li><li><p>编写html.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createDomELement</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dom = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    <span class="comment">//使用了loadsh 的 join() 方法,将 字符串 用 空格进行 拼接   </span></span><br><span class="line">    dom.innerHTML = _.join([<span class="string">'你好'</span>, <span class="string">'webpack'</span>], <span class="string">''</span>);</span><br><span class="line">    <span class="keyword">return</span> dom;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(createDomELement());</span><br></pre></td></tr></table></figure></li><li><p>在根目录下新建文件webpack.config.js</p></li><li><p>编写webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);   <span class="comment">//引用path模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对外导出一个对象</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,    <span class="comment">//入口</span></span><br><span class="line">    mode: <span class="string">'development'</span>,        <span class="comment">//代表我们现在是开发阶段</span></span><br><span class="line">    output: &#123;                   <span class="comment">//输出</span></span><br><span class="line">        filename: <span class="string">'main.js'</span>,    <span class="comment">//最终打包后的文件名</span></span><br><span class="line">        path: path.resolve(__dirname,<span class="string">'dist'</span>)<span class="comment">//最终main.js在哪个文件夹下</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行<code>npx webpack</code>进行打包，dist中出现了main.js文件</p></li><li>编写dist中的index.html<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>注：这个demo也可以看webpack的中文文档实例</li><li><a href="https://www.webpackjs.com/guides/installation/" target="_blank" rel="noopener">https://www.webpackjs.com/guides/installation/</a></li></ul><h1 id="2-webpack处理css模块"><a href="#2-webpack处理css模块" class="headerlink" title="2.webpack处理css模块"></a>2.webpack处理css模块</h1><ul><li>webpack默认处理不了css文件，需要对应的loader去解析</li><li>css-loader可以让webpack解析css模块</li><li>style-loader可以帮我们把依赖的的css文件转换成style标签，加入到html文件中去</li></ul><ol><li><p>在src中新建style文件夹及其中的index.css文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将样式给指定元素，修改index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./style/index.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createDomELement</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dom = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    <span class="comment">//使用了loadsh 的 join() 方法,将 字符串 用 空格进行 拼接   </span></span><br><span class="line">    dom.innerHTML = _.join([<span class="string">'你好'</span>, <span class="string">'webpack'</span>], <span class="string">''</span>);</span><br><span class="line">    <span class="comment">// dom.className = 'box';</span></span><br><span class="line">    dom.classList.add(<span class="string">'box'</span>);</span><br><span class="line">    <span class="keyword">return</span> dom;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(createDomELement());</span><br></pre></td></tr></table></figure></li><li><p>安装：<code>npm i -D style-loader css-loader</code></p></li><li><p>修改webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);   <span class="comment">//引用path模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对外导出一个对象</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,    <span class="comment">//入口</span></span><br><span class="line">    mode: <span class="string">'development'</span>,        <span class="comment">//代表我们现在是开发阶段</span></span><br><span class="line">    output: &#123;                   <span class="comment">//输出</span></span><br><span class="line">        filename: <span class="string">'main.js'</span>,    <span class="comment">//最终打包后的文件名</span></span><br><span class="line">        path: path.resolve(__dirname,<span class="string">'dist'</span>)<span class="comment">//最终main.js在哪个文件夹下</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [                <span class="comment">//模块处理规则</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,<span class="comment">//当引入的模块的后缀满足这个，就使用use的loader处理</span></span><br><span class="line">                use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>] <span class="comment">//处理顺序从右向左</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行<code>npx webpack</code>查看效果</p></li></ol><ul><li>拓展：修改package.json文件，可以用<code>npm run build</code>代替<code>npx webpack</code>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</span><br><span class="line">  "build": "npx webpack"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="3-webpack的模块和sass"><a href="#3-webpack的模块和sass" class="headerlink" title="3.webpack的模块和sass"></a>3.webpack的模块和sass</h1><blockquote><p><a href="https://www.webpackjs.com/configuration/module/#rule-test" target="_blank" rel="noopener">https://www.webpackjs.com/configuration/module/#rule-test</a></p><ul><li>加载sass需要sass-loader</li><li>sass-loader需要node-sass</li></ul></blockquote><ol><li><p>安装<code>npm i -D sass-loader node-sass</code><br>此处可能会有遇到node-sass安装失败的问题,详见：<a href="https://blog.csdn.net/qq_41445033/article/details/100032529" target="_blank" rel="noopener">https://blog.csdn.net/qq_41445033/article/details/100032529</a></p></li><li><p>修改webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);   <span class="comment">//引用path模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对外导出一个对象</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,    <span class="comment">//入口</span></span><br><span class="line">    mode: <span class="string">'development'</span>,        <span class="comment">//代表我们现在是开发阶段</span></span><br><span class="line">    output: &#123;                   <span class="comment">//输出</span></span><br><span class="line">        filename: <span class="string">'main.js'</span>,    <span class="comment">//最终打包后的文件名</span></span><br><span class="line">        path: path.resolve(__dirname,<span class="string">'dist'</span>)<span class="comment">//最终main.js在哪个文件夹下</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [                <span class="comment">//模块处理规则</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(sc|c|sa)ss$/</span>,</span><br><span class="line">                <span class="comment">//当引入的模块的后缀满足这个，就使用use的loader处理</span></span><br><span class="line">                use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>,<span class="string">'sass-loader'</span>]</span><br><span class="line">                <span class="comment">//处理顺序从右向左</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>普通的css文件也可以经过sass-loader处理</li></ul><ol start="3"><li><p>假设在style文件夹中添加一个a.scss文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$bgcolor:red;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: $bgcolor;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在index.js，导入a.scss</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./style/a.scss'</span></span><br></pre></td></tr></table></figure></li><li><p>执行<code>npx webpack</code>查看效果</p></li></ol><h1 id="4-webpack的sass添加c3前缀和sourcemap处理"><a href="#4-webpack的sass添加c3前缀和sourcemap处理" class="headerlink" title="4.webpack的sass添加c3前缀和sourcemap处理"></a>4.webpack的sass添加c3前缀和sourcemap处理</h1><h2 id="Source-Map处理"><a href="#Source-Map处理" class="headerlink" title="Source Map处理"></a>Source Map处理</h2><ul><li>Source Map可以帮助我们在使用浏览器的开发者工具查看元素的样式时，追踪到样式的来源</li><li>如果没有开启source map，查看样式来源的时候只能看到来自<code>&lt;style&gt;&lt;/style&gt;</code></li></ul><p>方法：<br>修改webpack.config.js文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [<span class="comment">//模块处理规则</span></span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.(sc|c|sa)ss$/</span>,</span><br><span class="line">            <span class="comment">//当引入的模块的后缀满足这个，就使用use的loader处理</span></span><br><span class="line">            use: [<span class="comment">//处理顺序从后向前</span></span><br><span class="line">                <span class="string">'style-loader'</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                    loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        sourceMap: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    loader: <span class="string">'sass-loader'</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        sourceMap: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="为样式添加前缀（-webkit-等等）"><a href="#为样式添加前缀（-webkit-等等）" class="headerlink" title="为样式添加前缀（-webkit-等等）"></a>为样式添加前缀（-webkit-等等）</h2><ul><li><p><a href="https://www.postcss.com.cn/" target="_blank" rel="noopener">PostCSS</a>是一个用 JavaScript 工具和插件转换 CSS 代码的工具，是一个css的预处理工具</p><ul><li>可以帮助我们<ul><li>给CSS3的属性添加前缀</li><li>样式格式校验（stylelint）</li><li>实现CSS的模块化，防止CSS样式冲突等</li></ul></li></ul></li><li><p>比较常用的就是使用 PostCSS 进行添加前缀，以此为例：</p><ol><li>安装postcss-loader<br> <code>npm i -D postcss-loader</code></li><li><p>接下来，我们需要引用什么插件，就要把什么插件装上,我们需要添加前缀<br> <code>npm install autoprefixer --save-dev</code></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npm i -D postcss-loader</span><br><span class="line">npm install autoprefixer --save-dev</span><br><span class="line"></span><br><span class="line"># 以下可以不用安装</span><br><span class="line"># cssnext可以让你写CSS4的语言，并能配合autoprefixer进行浏览器兼容的不全，而且还支持嵌套语法</span><br><span class="line">$ npm install postcss-cssnext --save-dev</span><br><span class="line"># 类似scss的语法，实际上如果只是想用嵌套的话有cssnext就够了</span><br><span class="line">$ npm install precss --save-dev</span><br><span class="line"># 在@import css文件的时候让webpack监听并编译</span><br><span class="line">$ npm install postcss-import --save-dev</span><br></pre></td></tr></table></figure></li><li><p>修改webpack.config.js文件</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [                <span class="comment">//模块处理规则</span></span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.(sc|c|sa)ss$/</span>,</span><br><span class="line">            <span class="comment">//当引入的模块的后缀满足这个，就使用use的loader处理</span></span><br><span class="line">            use: [<span class="comment">//处理顺序从后向前</span></span><br><span class="line">                <span class="string">'style-loader'</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                    loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        sourceMap: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        ident: <span class="string">'postcss'</span>,</span><br><span class="line">                        sourceMap: <span class="literal">true</span>,</span><br><span class="line">                        plugins: <span class="function"><span class="params">loader</span> =&gt;</span> [</span><br><span class="line">                            <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)(&#123; <span class="attr">browsers</span>: [<span class="string">'&gt; 0.15% in CN'</span>] &#125;) <span class="comment">// 添加前缀</span></span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    loader: <span class="string">'sass-loader'</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        sourceMap: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改a.sass</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$bgcolor:red;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: $bgcolor;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行查看效果,F12看样式，可以看到</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h1 id="5-webpack的css提取成单独的文件"><a href="#5-webpack的css提取成单独的文件" class="headerlink" title="5.webpack的css提取成单独的文件"></a>5.webpack的css提取成单独的文件</h1><ul><li>抽取了样式，就不能再用 style-loader 注入到 html 中了。</li><li>webpack4 开始使用： mini-css-extract-plugin插件, 1-3 的版本可以用：extract-text-webpack-plugin</li><li>webpack.config.js中的 <code>mode</code> 必须设置为 <code>production</code>，插件才有用；在开发阶段的话就用style-loader就可以了</li></ul><ol><li>安装<code>npm install --save-dev mini-css-extract-plugin</code></li><li><p>在根目录下新建配置文件<code>webpack.product.config.js</code>，即开发阶段和生成最终dist版本用两个不同的配置文件</p><ul><li>将webpack.config.js的内容粘贴进去</li><li>引入mini-css-extract-plugin</li><li>替换style-loader</li><li>更改mode<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,    <span class="comment">//入口</span></span><br><span class="line">    mode: <span class="string">'production'</span>,</span><br><span class="line">    output: &#123;                   <span class="comment">//输出</span></span><br><span class="line">        filename: <span class="string">'main.js'</span>,    <span class="comment">//最终打包后的文件名</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)<span class="comment">//最终main.js在哪个文件夹下</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [                <span class="comment">//模块处理规则</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(sc|c|sa)ss$/</span>,</span><br><span class="line">                <span class="comment">//当引入的模块的后缀满足这个，就使用use的loader处理</span></span><br><span class="line">                use: [<span class="comment">//处理顺序从后向前</span></span><br><span class="line">                    MiniCssExtractPlugin.loader,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            ident: <span class="string">'postcss'</span>,</span><br><span class="line">                            sourceMap: <span class="literal">true</span>,</span><br><span class="line">                            plugins: <span class="function"><span class="params">loader</span> =&gt;</span> [</span><br><span class="line">                                <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)(&#123; <span class="attr">browsers</span>: [<span class="string">'&gt; 0.15% in CN'</span>] &#125;) <span class="comment">// 添加前缀</span></span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'sass-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">            <span class="comment">// filename: devMode ? '[name].css' : '[name].[hash].css', //判断了是什么模式</span></span><br><span class="line">            <span class="comment">// chunkFilename: devMode ? '[id].css' : '[id].[hash].css'</span></span><br><span class="line">            </span><br><span class="line">            filename: <span class="string">'[name].css'</span>, <span class="comment">// 设置最终输出的文件名，与output中filename一样</span></span><br><span class="line">            chunkFilename:<span class="string">'[id].css'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><code>npx webpack -h</code>可以看webpack的帮助，可看到<code>--config</code>webpack默认配置文件</li><li>终端执行<code>npx webpack --config webpack.product.config.js</code>（敲到webpack.p，按Tab可自动补全名称）</li><li><p>考虑到4的指令可能需要执行多次，可在package.json中添加，如果是npm run build，默认使用的配置文件仍然是webpack.config.js，npm run dist时才使用webpack.product.config.js配置文件</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  "scripts": &#123;</span><br><span class="line">    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</span><br><span class="line">    "build": "npx webpack",</span><br><span class="line">    "dist":"npx webpack --config webpack.product.config.js"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>执行4后，可见dist中出现了一个main.css文件</p></li></ol></li></ol><ul><li>如果plugins中，输出文件制定了哈希值，<code>filename: &#39;[name].[hash].css&#39;</code>，生成的main.css会变成mainxxxxxxxxxx.css，xxxxxxxxxx是这次打包的哈希值，是唯一标识符</li><li>想引用新生成的main.css，要在index.html文件中引用一下</li></ul><h1 id="6-webpack的css和js压缩插件使用"><a href="#6-webpack的css和js压缩插件使用" class="headerlink" title="6.webpack的css和js压缩插件使用"></a>6.webpack的css和js压缩插件使用</h1><h2 id="压缩CSS"><a href="#压缩CSS" class="headerlink" title="压缩CSS"></a>压缩CSS</h2><ul><li>webpack4压缩CSS需要安装插件</li></ul><ol><li>安装css插件optimize-css-assets-webpack-plugin<br> <code>npm i -D optimize-css-assets-webpack-plugin</code></li><li><p>修改webpack.product.config.js配置文件</p><ul><li>引入mini-css-extract-plugin</li><li>添加optimization<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,    <span class="comment">//入口</span></span><br><span class="line">    mode: <span class="string">'production'</span>,</span><br><span class="line">    output: &#123;                   <span class="comment">//输出</span></span><br><span class="line">        filename: <span class="string">'main.js'</span>,    <span class="comment">//最终打包后的文件名</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)<span class="comment">//最终main.js在哪个文件夹下</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [                <span class="comment">//模块处理规则</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(sc|c|sa)ss$/</span>,</span><br><span class="line">                <span class="comment">//当引入的模块的后缀满足这个，就使用use的loader处理</span></span><br><span class="line">                use: [<span class="comment">//处理顺序从后向前</span></span><br><span class="line">                    MiniCssExtractPlugin.loader,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            ident: <span class="string">'postcss'</span>,</span><br><span class="line">                            sourceMap: <span class="literal">true</span>,</span><br><span class="line">                            plugins: <span class="function"><span class="params">loader</span> =&gt;</span> [</span><br><span class="line">                                <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)(&#123; <span class="attr">browsers</span>: [<span class="string">'&gt; 0.15% in CN'</span>] &#125;) <span class="comment">// 添加前缀</span></span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'sass-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">            <span class="comment">// filename: devMode ? '[name].css' : '[name].[hash].css', //判断了是什么模式</span></span><br><span class="line">            <span class="comment">// chunkFilename: devMode ? '[id].css' : '[id].[hash].css'</span></span><br><span class="line"></span><br><span class="line">            filename: <span class="string">'[name].css'</span>, <span class="comment">// 设置最终输出的文件名</span></span><br><span class="line">            chunkFilename:<span class="string">'[id].css'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        minimizer: [<span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123;&#125;)]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>npm run dist</code>,查看main.css，css代码都变成了一行，压缩成功</p></li></ol><h2 id="压缩JS"><a href="#压缩JS" class="headerlink" title="压缩JS"></a>压缩JS</h2><ul><li>压缩js需要一个插件：uglifyjs-webpack-plugin, 此插件需要一个前提就是：mode: ‘production’</li></ul><ol><li>安装<code>npm i -D uglifyjs-webpack-plugin</code></li><li><p>修改webpack.product.config.js配置文件</p><ul><li>引入uglifyjs-webpack-plugin</li><li>在optimization的minimizer中引用插件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    optimization: &#123;</span><br><span class="line">    minimizer: [</span><br><span class="line">        <span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123;&#125;),<span class="comment">//压缩CSS</span></span><br><span class="line">        <span class="keyword">new</span> UglifyJsPlugin(&#123;            <span class="comment">//压缩JS</span></span><br><span class="line">        cache: <span class="literal">true</span>,</span><br><span class="line">        parallel: <span class="literal">true</span>,</span><br><span class="line">        sourceMap: <span class="literal">true</span> <span class="comment">// set to true if you want JS source maps</span></span><br><span class="line">    &#125;)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>npm run dist</code>,此处出现错误</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR in main.js from UglifyJs Unexpected token: name «dom», expected: punc «;» [./src/index.js:6,0][main.js:17215,8]</span><br></pre></td></tr></table></figure><ul><li>是因为es6需要转成es5在给webpack打包，快速解决方法是把index.js中的let改成var，再次执行，查看main.js，代码被压缩了</li><li>若想使用es6语法，要先将代码转换为es5，详见<a href="#14.webpack的代理服务器设置和bable转换及优化">14</a></li></ul></li></ol><h1 id="7-解决文件名带哈希值的问题"><a href="#7-解决文件名带哈希值的问题" class="headerlink" title="7.解决文件名带哈希值的问题"></a>7.解决文件名带哈希值的问题</h1><h2 id="为什么要让文件带上哈希值？"><a href="#为什么要让文件带上哈希值？" class="headerlink" title="为什么要让文件带上哈希值？"></a>为什么要让文件带上哈希值？</h2><ul><li>因为有时候在生产的时候会遇到缓存问题。如果是相同的css/js文件，虽然文件内容是更新了，但是由于浏览器的缓存问题，可能会出现问题，所以一般都会给css/js静态文件打上版本</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>修改webpack.product.config.js文件</p><ul><li>js文件输出:<br>  <code>filename: &#39;main.[hash].js&#39;,    //最终打包后的文件名</code></li><li>css文件输出：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filename: &apos;[name][hash].css&apos;, // 设置最终输出的文件名</span><br><span class="line">chunkFilename: &apos;[id][hash].css&apos;</span><br></pre></td></tr></table></figure></li></ul><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><ul><li>由于每次打包生成的文件名都不一样，所以将js/css文件引入html中的文件也不一样</li><li><code>HtmlWebpackPlugin</code>插件，可以把打包后的 CSS 或者 JS 文件引用直接注入到 HTML 模板中，这样就不用每次手动修改文件引用了。</li></ul><ol><li>安装<br> <code>npm install --save-dev html-webpack-plugin</code></li><li><p>修改webpack.product.config.js配置文件中的引入及plugins，从而引用插件</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,    <span class="comment">//入口</span></span><br><span class="line">    mode: <span class="string">'production'</span>,</span><br><span class="line">    output: &#123;                   <span class="comment">//输出</span></span><br><span class="line">        filename: <span class="string">'main.[hash].js'</span>,    <span class="comment">//最终打包后的文件名</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)<span class="comment">//最终main.js在哪个文件夹下</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [                <span class="comment">//模块处理规则</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(sc|c|sa)ss$/</span>,</span><br><span class="line">                <span class="comment">//当引入的模块的后缀满足这个，就使用use的loader处理</span></span><br><span class="line">                use: [<span class="comment">//处理顺序从后向前</span></span><br><span class="line">                    MiniCssExtractPlugin.loader,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            ident: <span class="string">'postcss'</span>,</span><br><span class="line">                            sourceMap: <span class="literal">true</span>,</span><br><span class="line">                            plugins: <span class="function"><span class="params">loader</span> =&gt;</span> [</span><br><span class="line">                                <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)(&#123; <span class="attr">browsers</span>: [<span class="string">'&gt; 0.15% in CN'</span>] &#125;) <span class="comment">// 添加前缀</span></span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'sass-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'[name][hash].css'</span>, <span class="comment">// 设置最终输出的文件名</span></span><br><span class="line">            chunkFilename: <span class="string">'[id][hash].css'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            title: <span class="string">'学习webpack4.0 demo'</span>, <span class="comment">// 默认值：Webpack App</span></span><br><span class="line">            filename: <span class="string">'main.html'</span>, <span class="comment">// 最终生成的dist中的文件的名字，默认值： 'index.html'文件名</span></span><br><span class="line">            template: path.resolve(__dirname, <span class="string">'src/main.html'</span>),<span class="comment">//这里可以给它加模版文件，可以是index.html，也可以指定具体文件</span></span><br><span class="line">            minify: &#123;</span><br><span class="line">                collapseWhitespace: <span class="literal">true</span>,   <span class="comment">//是否去掉空格</span></span><br><span class="line">                removeComments: <span class="literal">true</span>,       <span class="comment">//是否移除注释</span></span><br><span class="line">                removeAttributeQuotes: <span class="literal">true</span> <span class="comment">// 移除属性的引号</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        minimizer: [</span><br><span class="line">            <span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123;&#125;),<span class="comment">//压缩CSS</span></span><br><span class="line">            <span class="keyword">new</span> UglifyJsPlugin(&#123;            <span class="comment">//压缩JS</span></span><br><span class="line">            cache: <span class="literal">true</span>,</span><br><span class="line">            parallel: <span class="literal">true</span>,</span><br><span class="line">            sourceMap: <span class="literal">true</span> <span class="comment">// set to true if you want JS source maps</span></span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置模版文件：<ul><li>假设在src目录下新建一个main.html</li><li>修改main.html内容  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"demo"</span>&gt;我是模版文件自带的内容&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>执行<code>npm run dist</code>，查看效果，可见dist中生成了main.html文件，且引入了css和js文件</p></li></ol><h1 id="8-清理dist目录插件clean-webpack-plugin应用"><a href="#8-清理dist目录插件clean-webpack-plugin应用" class="headerlink" title="8.清理dist目录插件clean-webpack-plugin应用"></a>8.清理dist目录插件clean-webpack-plugin应用</h1><ul><li>每次构建，我们的 /dist 文件夹都会保存生成的文件，然后就会非常杂乱。</li><li>通常，在每次构建前清理 /dist 文件夹，是比较推荐的做法</li><li><code>clean-webpack-plugin</code> 是一个比较普及的管理插件。</li></ul><ol><li>安装<br> <code>npm install clean-webpack-plugin --save-dev</code></li><li><p>修改webpack.config.js/webpack.product.config.js</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">+ <span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    print: <span class="string">'./src/print.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">+ <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>])  <span class="comment">//想清理其他目录也可以修改名字</span></span><br><span class="line">    ],</span><br><span class="line">    output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>执行<code>npm run dist</code>，查看效果。</p><ul><li>此处发现产生报错，因为新版本的CleanWebpackPlugin用法变了，详见<a href="https://blog.csdn.net/qq_36242361/article/details/90709258" target="_blank" rel="noopener">https://blog.csdn.net/qq_36242361/article/details/90709258</a></li></ul></li></ol><h1 id="9-图片处理及优化"><a href="#9-图片处理及优化" class="headerlink" title="9.图片处理及优化"></a>9.图片处理及优化</h1><ul><li>在src文件夹下新建assets文件夹，assets内新建img文件夹，img内放置几张照片</li><li><p>在a.scss中添加background一行</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$bgcolor:red;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: $bgcolor;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'../assets/img/01.jpg'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>打包时解析sass模块的时候，会认为background这里引入的是一个新的模块，这个模块的文件名是jpg，默认处理不了，会报错  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR in ./src/assets/img/01.jpg 1:0</span><br><span class="line">Module parse failed: Unexpected character &apos;�&apos; (1:0)</span><br><span class="line">You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="file-loader处理文件的导入"><a href="#file-loader处理文件的导入" class="headerlink" title="file-loader处理文件的导入"></a>file-loader处理文件的导入</h2><ol><li>安装<br> <code>npm install --save-dev file-loader</code></li><li><p>修改配置文件webpack.product.config.js，注意添加的位置</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">"clean-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,    <span class="comment">//入口</span></span><br><span class="line">    mode: <span class="string">'production'</span>,</span><br><span class="line">    output: &#123;                   <span class="comment">//输出</span></span><br><span class="line">        filename: <span class="string">'main.[hash].js'</span>,    <span class="comment">//最终打包后的文件名</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)<span class="comment">//最终main.js在哪个文件夹下</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [                <span class="comment">//模块处理规则</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|svg|jpg|gif|jpeg|ico)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'file-loader'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(sc|c|sa)ss$/</span>,</span><br><span class="line">                <span class="comment">//当引入的模块的后缀满足这个，就使用use的loader处理</span></span><br><span class="line">                use: [<span class="comment">//处理顺序从后向前</span></span><br><span class="line">                    MiniCssExtractPlugin.loader,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            ident: <span class="string">'postcss'</span>,</span><br><span class="line">                            sourceMap: <span class="literal">true</span>,</span><br><span class="line">                            plugins: <span class="function"><span class="params">loader</span> =&gt;</span> [</span><br><span class="line">                                <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)(&#123; <span class="attr">browsers</span>: [<span class="string">'&gt; 0.15% in CN'</span>] &#125;) <span class="comment">// 添加前缀</span></span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'sass-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'[name][hash].css'</span>, <span class="comment">// 设置最终输出的文件名</span></span><br><span class="line">            chunkFilename: <span class="string">'[id][hash].css'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            title: <span class="string">'学习webpack4.0 demo'</span>, <span class="comment">// 默认值：Webpack App</span></span><br><span class="line">            filename: <span class="string">'main.html'</span>, <span class="comment">// 最终生成的dist中的文件的名字，默认值： 'index.html'文件名</span></span><br><span class="line">            template: path.resolve(__dirname, <span class="string">'src/main.html'</span>),<span class="comment">//这里可以给它加模版文件，可以是index.html，也可以指定具体文件</span></span><br><span class="line">            minify: &#123;</span><br><span class="line">                collapseWhitespace: <span class="literal">true</span>,   <span class="comment">//是否去掉空格</span></span><br><span class="line">                removeComments: <span class="literal">true</span>,       <span class="comment">//是否移除注释</span></span><br><span class="line">                removeAttributeQuotes: <span class="literal">true</span> <span class="comment">// 移除属性的引号</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin()</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        minimizer: [</span><br><span class="line">            <span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123;&#125;),<span class="comment">//压缩CSS</span></span><br><span class="line">            <span class="keyword">new</span> UglifyJsPlugin(&#123;            <span class="comment">//压缩JS</span></span><br><span class="line">                cache: <span class="literal">true</span>,</span><br><span class="line">                parallel: <span class="literal">true</span>,</span><br><span class="line">                sourceMap: <span class="literal">true</span> <span class="comment">// set to true if you want JS source maps</span></span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改一下src下的main.js，添加一个使用.box的div</p></li><li>执行<code>npm run dist</code>，可见dist中生成了一个图片文件</li></ol><h2 id="优化图片，使用image-webpack-loader可以帮助我们对图片进行压缩和优化。"><a href="#优化图片，使用image-webpack-loader可以帮助我们对图片进行压缩和优化。" class="headerlink" title="优化图片，使用image-webpack-loader可以帮助我们对图片进行压缩和优化。"></a>优化图片，使用image-webpack-loader可以帮助我们对图片进行压缩和优化。</h2><ol><li>安装<br> <code>npm install image-webpack-loader --save-dev</code></li><li><p>修改webpack.product.config.js</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">"clean-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,    <span class="comment">//入口</span></span><br><span class="line">    mode: <span class="string">'production'</span>,</span><br><span class="line">    output: &#123;                   <span class="comment">//输出</span></span><br><span class="line">        filename: <span class="string">'main.[hash].js'</span>,    <span class="comment">//最终打包后的文件名</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)<span class="comment">//最终main.js在哪个文件夹下</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [                <span class="comment">//模块处理规则</span></span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(sc|c|sa)ss$/</span>,</span><br><span class="line">                <span class="comment">//当引入的模块的后缀满足这个，就使用use的loader处理</span></span><br><span class="line">                use: [<span class="comment">//处理顺序从后向前</span></span><br><span class="line">                    MiniCssExtractPlugin.loader,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            ident: <span class="string">'postcss'</span>,</span><br><span class="line">                            sourceMap: <span class="literal">true</span>,</span><br><span class="line">                            plugins: <span class="function"><span class="params">loader</span> =&gt;</span> [</span><br><span class="line">                                <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)(&#123; <span class="attr">browsers</span>: [<span class="string">'&gt; 0.15% in CN'</span>] &#125;) <span class="comment">// 添加前缀</span></span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'sass-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|svg|jpg|gif|jpeg|ico)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'file-loader'</span>,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'image-webpack-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            mozjpeg: &#123;</span><br><span class="line">                                progressive: <span class="literal">true</span>,</span><br><span class="line">                                quality: <span class="number">65</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                            optipng: &#123;</span><br><span class="line">                                enabled: <span class="literal">false</span>,</span><br><span class="line">                            &#125;,</span><br><span class="line">                            pngquant: &#123;</span><br><span class="line">                                quality: <span class="string">'65-90'</span>,</span><br><span class="line">                                speed: <span class="number">4</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                            gifsicle: &#123;</span><br><span class="line">                                interlaced: <span class="literal">false</span>,</span><br><span class="line">                            &#125;,</span><br><span class="line">                            webp: &#123;</span><br><span class="line">                                quality: <span class="number">75</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line"></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'[name][hash].css'</span>, <span class="comment">// 设置最终输出的文件名</span></span><br><span class="line">            chunkFilename: <span class="string">'[id][hash].css'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            title: <span class="string">'学习webpack4.0 demo'</span>, <span class="comment">// 默认值：Webpack App</span></span><br><span class="line">            filename: <span class="string">'main.html'</span>, <span class="comment">// 最终生成的dist中的文件的名字，默认值： 'index.html'文件名</span></span><br><span class="line">            template: path.resolve(__dirname, <span class="string">'src/main.html'</span>),<span class="comment">//这里可以给它加模版文件，可以是index.html，也可以指定具体文件</span></span><br><span class="line">            minify: &#123;</span><br><span class="line">                collapseWhitespace: <span class="literal">true</span>,   <span class="comment">//是否去掉空格</span></span><br><span class="line">                removeComments: <span class="literal">true</span>,       <span class="comment">//是否移除注释</span></span><br><span class="line">                removeAttributeQuotes: <span class="literal">true</span> <span class="comment">// 移除属性的引号</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin()</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        minimizer: [</span><br><span class="line">            <span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123;&#125;),<span class="comment">//压缩CSS</span></span><br><span class="line">            <span class="keyword">new</span> UglifyJsPlugin(&#123;            <span class="comment">//压缩JS</span></span><br><span class="line">                cache: <span class="literal">true</span>,</span><br><span class="line">                parallel: <span class="literal">true</span>,</span><br><span class="line">                sourceMap: <span class="literal">true</span> <span class="comment">// set to true if you want JS source maps</span></span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>npm run dist</code></p></li></ol><h1 id="10-图片base64优化和字体处理"><a href="#10-图片base64优化和字体处理" class="headerlink" title="10.图片base64优化和字体处理"></a>10.图片base64优化和字体处理</h1><ul><li><code>url-loader</code>功能类似于 file-loader，可以把 url 地址对应的文件，打包成 base64 的 DataURL，减少图片请求，提高访问的效率。</li><li>处理的图片不能太大</li></ul><ol><li>安装<br> <code>npm install --save-dev url-loader</code></li><li><p>修改配置文件，安装成功后，就不需要用file-loader了，改用url-loader,将use里的<code>&#39;file-loader&#39;</code>用一个对象取代</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">"clean-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,    <span class="comment">//入口</span></span><br><span class="line">    mode: <span class="string">'production'</span>,</span><br><span class="line">    output: &#123;                   <span class="comment">//输出</span></span><br><span class="line">        filename: <span class="string">'main.[hash].js'</span>,    <span class="comment">//最终打包后的文件名</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)<span class="comment">//最终main.js在哪个文件夹下</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [                <span class="comment">//模块处理规则</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|svg|jpg|gif|jpeg|ico)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            limit:<span class="number">90000</span> <span class="comment">//设置大小多少以内的图片，引用是要转化为base64的链接</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(sc|c|sa)ss$/</span>,</span><br><span class="line">                <span class="comment">//当引入的模块的后缀满足这个，就使用use的loader处理</span></span><br><span class="line">                use: [<span class="comment">//处理顺序从后向前</span></span><br><span class="line">                    MiniCssExtractPlugin.loader,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            ident: <span class="string">'postcss'</span>,</span><br><span class="line">                            sourceMap: <span class="literal">true</span>,</span><br><span class="line">                            plugins: <span class="function"><span class="params">loader</span> =&gt;</span> [</span><br><span class="line">                                <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)(&#123; <span class="attr">browsers</span>: [<span class="string">'&gt; 0.15% in CN'</span>] &#125;) <span class="comment">// 添加前缀</span></span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'sass-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'[name][hash].css'</span>, <span class="comment">// 设置最终输出的文件名</span></span><br><span class="line">            chunkFilename: <span class="string">'[id][hash].css'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            title: <span class="string">'学习webpack4.0 demo'</span>, <span class="comment">// 默认值：Webpack App</span></span><br><span class="line">            filename: <span class="string">'main.html'</span>, <span class="comment">// 最终生成的dist中的文件的名字，默认值： 'index.html'文件名</span></span><br><span class="line">            template: path.resolve(__dirname, <span class="string">'src/main.html'</span>),<span class="comment">//这里可以给它加模版文件，可以是index.html，也可以指定具体文件</span></span><br><span class="line">            minify: &#123;</span><br><span class="line">                collapseWhitespace: <span class="literal">true</span>,   <span class="comment">//是否去掉空格</span></span><br><span class="line">                removeComments: <span class="literal">true</span>,       <span class="comment">//是否移除注释</span></span><br><span class="line">                removeAttributeQuotes: <span class="literal">true</span> <span class="comment">// 移除属性的引号</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin()</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        minimizer: [</span><br><span class="line">            <span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123;&#125;),<span class="comment">//压缩CSS</span></span><br><span class="line">            <span class="keyword">new</span> UglifyJsPlugin(&#123;            <span class="comment">//压缩JS</span></span><br><span class="line">                cache: <span class="literal">true</span>,</span><br><span class="line">                parallel: <span class="literal">true</span>,</span><br><span class="line">                sourceMap: <span class="literal">true</span> <span class="comment">// set to true if you want JS source maps</span></span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里本来应该加上<code>&#39;image-webpack-loader&#39;</code>的配置的，但是因为频繁报错，就先删掉了。</li><li>排查过发现可能是<code>&#39;image-webpack-loader&#39;</code>原来的配置和<code>url-loader</code>一起用后有冲突，在学第11的时候基本把问题解决了，详见<a href="#11.webpack的配置合并、提前公共配置">下一节的第六步</a></li></ul></li></ol><h1 id="11-webpack的配置合并、提前公共配置"><a href="#11-webpack的配置合并、提前公共配置" class="headerlink" title="11.webpack的配置合并、提前公共配置"></a>11.webpack的配置合并、提前公共配置</h1><ul><li>开发阶段与生产阶段所需配置不完全相同，如果想把公共配置提到一起，需要工具帮忙。</li><li><code>webpack-merge</code>的工具可以实现两个配置文件的合并，这样我们可以把开发环境和生产环境的公共配置抽取到一个公共的配置文件中。</li></ul><ol><li>安装<br> <code>npm install --save-dev webpack-merge</code></li><li>改造配置文件<ul><li>webpack.dev.js</li><li>webpack.product.js/webpack.prod.js</li><li>webpack.common.js</li></ul></li><li><p>将product的配置文件都拷贝到common里，修改webpack.common.js，留下开发阶段和生产阶段的公共部分</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">"clean-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|svg|jpg|gif|jpeg|ico)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            limit: <span class="number">90000</span> <span class="comment">//设置大小多少以内的图片，引用是要转化为base64的链接</span></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'image-webpack-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            mozjpeg: &#123;</span><br><span class="line">                                progressive: <span class="literal">true</span>,</span><br><span class="line">                                quality: <span class="number">65</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                            optipng: &#123;</span><br><span class="line">                                enabled: <span class="literal">false</span>,</span><br><span class="line">                            &#125;,</span><br><span class="line">                            pngquant: &#123;</span><br><span class="line">                                quality: <span class="string">'65-90'</span>,</span><br><span class="line">                                speed: <span class="number">4</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                            gifsicle: &#123;</span><br><span class="line">                                interlaced: <span class="literal">false</span>,</span><br><span class="line">                            &#125;,</span><br><span class="line">                            webp: &#123;</span><br><span class="line">                                quality: <span class="number">75</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            title: <span class="string">'学习webpack4.0 demo'</span>, <span class="comment">// 默认值：Webpack App</span></span><br><span class="line">            filename: <span class="string">'main.html'</span>, <span class="comment">// 最终生成的dist中的文件的名字，默认值： 'index.html'文件名</span></span><br><span class="line">            template: path.resolve(__dirname, <span class="string">'src/main.html'</span>),<span class="comment">//这里可以给它加模版文件，可以是index.html，也可以指定具体文件</span></span><br><span class="line">            minify: &#123;</span><br><span class="line">                collapseWhitespace: <span class="literal">true</span>,   <span class="comment">//是否去掉空格</span></span><br><span class="line">                removeComments: <span class="literal">true</span>,       <span class="comment">//是否移除注释</span></span><br><span class="line">                removeAttributeQuotes: <span class="literal">true</span> <span class="comment">// 移除属性的引号</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改webpack.dev.js，留下独有部分，适当改写</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);   <span class="comment">//引用path模块</span></span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"><span class="keyword">const</span> common=<span class="built_in">require</span>(<span class="string">'./webpack.common'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对外导出一个对象</span></span><br><span class="line"><span class="keyword">let</span> devConfig = &#123;</span><br><span class="line">    mode: <span class="string">'development'</span>,        <span class="comment">//代表我们现在是开发阶段</span></span><br><span class="line">    output: &#123;                   <span class="comment">//输出</span></span><br><span class="line">        filename: <span class="string">'main.js'</span>,    <span class="comment">//最终打包后的文件名</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)<span class="comment">//最终main.js在哪个文件夹下</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [                <span class="comment">//模块处理规则</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(sc|c|sa)ss$/</span>,</span><br><span class="line">                <span class="comment">//当引入的模块的后缀满足这个，就使用use的loader处理</span></span><br><span class="line">                use: [<span class="comment">//处理顺序从后向前</span></span><br><span class="line">                    <span class="string">'style-loader'</span>,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            ident: <span class="string">'postcss'</span>,</span><br><span class="line">                            sourceMap: <span class="literal">true</span>,</span><br><span class="line">                            plugins: <span class="function"><span class="params">loader</span> =&gt;</span> [</span><br><span class="line">                                <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)(&#123; <span class="attr">browsers</span>: [<span class="string">'&gt; 0.15% in CN'</span>] &#125;) <span class="comment">// 添加前缀</span></span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'sass-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common,devConfig);</span><br></pre></td></tr></table></figure></li><li><p>修改package.json中的script，修改默认执行的配置文件</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  "scripts": &#123;</span><br><span class="line">    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</span><br><span class="line">    "build": "npx webpack --config webpack.dev.js",</span><br><span class="line">    "dist": "npx webpack --config webpack.prod.js"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><code>npm run build</code>，有报错，后来不断尝试发现，是<code>&#39;image-webpack-loader&#39;</code>原来的配置中的webp未能正常把图片进行转换</p><ul><li><p>报错内容</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ERROR in ./src/assets/img/01.jpg</span><br><span class="line">Module build failed (from ./node_modules/image-webpack-loader/index.js):</span><br><span class="line">Error: CoCreateInstance(MAKE_REFGUID(CLSID_WICImagingFactory), NULL, CLSCTX_INPROC_SERVER, MAKE_REFGUID(IID_IWICImagingFactory), (LPVOID*)&amp;factory) failed 80040154</span><br><span class="line">Couldn&apos;t access Windows Imaging Component (are you running Windows XP SP3 or newer?). Most formats not available. Use -s for the available YUV input.</span><br><span class="line">Decoding of input data failed.</span><br><span class="line">Status: 3(BITSTREAM_ERROR)</span><br><span class="line">Error! Could not process file C:\Users\ADMINI~1\AppData\Local\Temp\89c3cc73-dbc6-49f7-8b9d-c0d0b66c8aad</span><br><span class="line">Error! Cannot read input picture file &apos;C:\Users\ADMINI~1\AppData\Local\Temp\89c3cc73-dbc6-49f7-8b9d-c0d0b66c8aad&apos;</span><br></pre></td></tr></table></figure></li><li><p>解决方法：修改webpack.common.js，将<code>&#39;image-webpack-loader&#39;</code>原来的配置中的webp删除 </p></li><li>参考：<a href="https://www.npmjs.com/package/image-webpack-loader" target="_blank" rel="noopener">https://www.npmjs.com/package/image-webpack-loader</a></li><li>若仍想将图片转换成webp格式，可以试试<a href="https://stackoverflow.com/questions/53483962/webpack-encore-convert-images-to-webp-using-image-webpack-loader" target="_blank" rel="noopener">https://stackoverflow.com/questions/53483962/webpack-encore-convert-images-to-webp-using-image-webpack-loader</a></li></ul></li><li><p>修改webpack.prod.js，留下独有部分，适当改写</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">"clean-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">'./webpack.common'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> prodConfig = &#123;</span><br><span class="line">    mode: <span class="string">'production'</span>,</span><br><span class="line">    output: &#123;                   <span class="comment">//输出</span></span><br><span class="line">        filename: <span class="string">'main.[hash].js'</span>,    <span class="comment">//最终打包后的文件名</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)<span class="comment">//最终main.js在哪个文件夹下</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [                <span class="comment">//模块处理规则</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(sc|c|sa)ss$/</span>,</span><br><span class="line">                <span class="comment">//当引入的模块的后缀满足这个，就使用use的loader处理</span></span><br><span class="line">                use: [<span class="comment">//处理顺序从后向前</span></span><br><span class="line">                    MiniCssExtractPlugin.loader,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            ident: <span class="string">'postcss'</span>,</span><br><span class="line">                            sourceMap: <span class="literal">true</span>,</span><br><span class="line">                            plugins: <span class="function"><span class="params">loader</span> =&gt;</span> [</span><br><span class="line">                                <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)(&#123; <span class="attr">browsers</span>: [<span class="string">'&gt; 0.15% in CN'</span>] &#125;) <span class="comment">// 添加前缀</span></span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'sass-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'[name][hash].css'</span>, <span class="comment">// 设置最终输出的文件名</span></span><br><span class="line">            chunkFilename: <span class="string">'[id][hash].css'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        minimizer: [</span><br><span class="line">            <span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123;&#125;),<span class="comment">//压缩CSS</span></span><br><span class="line">            <span class="keyword">new</span> UglifyJsPlugin(&#123;            <span class="comment">//压缩JS</span></span><br><span class="line">                cache: <span class="literal">true</span>,</span><br><span class="line">                parallel: <span class="literal">true</span>,</span><br><span class="line">                sourceMap: <span class="literal">true</span> <span class="comment">// set to true if you want JS source maps</span></span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, prodConfig);</span><br></pre></td></tr></table></figure></li><li><p><code>npm run dist</code></p></li></ol><h1 id="12-webpack的启动监控自动编译和启用js的sourcemap"><a href="#12-webpack的启动监控自动编译和启用js的sourcemap" class="headerlink" title="12.webpack的启动监控自动编译和启用js的sourcemap"></a>12.webpack的启动监控自动编译和启用js的sourcemap</h1><h2 id="启用js的sourcemap"><a href="#启用js的sourcemap" class="headerlink" title="启用js的sourcemap"></a>启用js的sourcemap</h2><ul><li>当 webpack 打包源代码时，可能会很难追踪到错误和警告在源代码中的原始位置。例如，如果将三个源文件（a.js, b.js 和 c.js）打包到一个 bundle（bundle.js）中，而其中一个源文件包含一个错误，那么堆栈跟踪就会简单地指向到 bundle.js。</li><li>webpack4可以直接使用 <code>inline-source-map</code> 选项，这有助于解释说明 js 原始出错的位置。（<strong>不要用于生产环境</strong>）</li></ul><ol><li><p>webpack.dev.js中加上一行</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);   <span class="comment">//引用path模块</span></span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">'./webpack.common'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对外导出一个对象</span></span><br><span class="line"><span class="keyword">let</span> devConfig = &#123;</span><br><span class="line">    mode: <span class="string">'development'</span>,        <span class="comment">//代表我们现在是开发阶段</span></span><br><span class="line">    output: &#123;                   <span class="comment">//输出</span></span><br><span class="line">        filename: <span class="string">'main.js'</span>,    <span class="comment">//最终打包后的文件名</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)<span class="comment">//最终main.js在哪个文件夹下</span></span><br><span class="line">    &#125;,</span><br><span class="line">+   devtool: <span class="string">'inline-source-map'</span>,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [                <span class="comment">//模块处理规则</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(sc|c|sa)ss$/</span>,</span><br><span class="line">                <span class="comment">//当引入的模块的后缀满足这个，就使用use的loader处理</span></span><br><span class="line">                use: [<span class="comment">//处理顺序从后向前</span></span><br><span class="line">                    <span class="string">'style-loader'</span>,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            ident: <span class="string">'postcss'</span>,</span><br><span class="line">                            sourceMap: <span class="literal">true</span>,</span><br><span class="line">                            plugins: <span class="function"><span class="params">loader</span> =&gt;</span> [</span><br><span class="line">                                <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)(&#123; <span class="attr">browsers</span>: [<span class="string">'&gt; 0.15% in CN'</span>] &#125;) <span class="comment">// 添加前缀</span></span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'sass-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common,devConfig);</span><br></pre></td></tr></table></figure></li><li><p>在index.js中随便输出一点东西<code>console.log(123);</code></p></li><li><code>npm run build</code>，查看控制台<ul><li>在未使用inline-source-map时，输出的123指向的是index.js:21(打包后index.js头部增加了一些代码)</li><li>使用inline-source-map后，输出的123指向的是index.js:14</li></ul></li></ol><h2 id="监控文件变化，自动编译，使用观察模式"><a href="#监控文件变化，自动编译，使用观察模式" class="headerlink" title="监控文件变化，自动编译，使用观察模式"></a>监控文件变化，自动编译，使用观察模式</h2><ul><li>每次修改完毕后，都手动编译非常麻烦，最简单解决的办法就是启动watch。<br><code>npx webpack --watch</code></li></ul><ol><li><p>可修改package.json</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">"test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</span><br><span class="line">"build": "npx webpack --config webpack.dev.js",</span><br><span class="line">"watch":"npx webpack --watch --config webpack.dev.js",</span><br><span class="line">"dist": "npx webpack --config webpack.prod.js"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><code>npm run watch</code></p></li><li>ctrl+c可以停止</li></ol><ul><li>但是有个bug，就是每次我们修改 js 或者 css 文件后，要看到修改后的 html 的变化，可能需要我自己重新刷新页面。</li><li>如何能不刷新页面，自动更新变化呢？，详见下一节</li></ul><h1 id="13-webpack的启动热更新和代理配置"><a href="#13-webpack的启动热更新和代理配置" class="headerlink" title="13.webpack的启动热更新和代理配置"></a>13.webpack的启动热更新和代理配置</h1><ul><li><code>webpack-dev-server</code> 为你提供了一个简单的 web 服务器，并且能够实时重新加载(live reloading)。</li><li><code>webpack-dev-server</code>编译速度快，编译到内存里，不写在dist中。</li></ul><ol><li>安装<br> <code>npm install --save-dev webpack-dev-server</code></li><li>修改开发阶段的配置文件,简单配置 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);   <span class="comment">//引用path模块</span></span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">'./webpack.common'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对外导出一个对象</span></span><br><span class="line"><span class="keyword">let</span> devConfig = &#123;</span><br><span class="line">    mode: <span class="string">'development'</span>,        <span class="comment">//代表我们现在是开发阶段</span></span><br><span class="line">    output: &#123;                   <span class="comment">//输出</span></span><br><span class="line">        filename: <span class="string">'main.js'</span>,    <span class="comment">//最终打包后的文件名</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)<span class="comment">//最终main.js在哪个文件夹下</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: <span class="string">'inline-source-map'</span>,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">        hot: <span class="literal">true</span>,</span><br><span class="line">        open: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [                <span class="comment">//模块处理规则</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(sc|c|sa)ss$/</span>,</span><br><span class="line">                <span class="comment">//当引入的模块的后缀满足这个，就使用use的loader处理</span></span><br><span class="line">                use: [<span class="comment">//处理顺序从后向前</span></span><br><span class="line">                    <span class="string">'style-loader'</span>,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            ident: <span class="string">'postcss'</span>,</span><br><span class="line">                            sourceMap: <span class="literal">true</span>,</span><br><span class="line">                            plugins: <span class="function"><span class="params">loader</span> =&gt;</span> [</span><br><span class="line">                                <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)(&#123; <span class="attr">browsers</span>: [<span class="string">'&gt; 0.15% in CN'</span>] &#125;) <span class="comment">// 添加前缀</span></span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'sass-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.NamedModulesPlugin(),  <span class="comment">// 更容易查看(patch)的依赖</span></span><br><span class="line">        <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()  <span class="comment">// 替换插件</span></span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, devConfig);</span><br></pre></td></tr></table></figure></li></ol><ul><li>启动此webserver可用<br>  <code>webpack-dev-server --open</code></li><li>官网其他配置，也可以用这些配置  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    clientLogLevel: <span class="string">'warning'</span>, <span class="comment">// 可能的值有 none, error, warning 或者 info（默认值)</span></span><br><span class="line">    hot: <span class="literal">true</span>,  <span class="comment">// 启用 webpack 的模块热替换特性, 这个需要配合： webpack.HotModuleReplacementPlugin插件</span></span><br><span class="line">    contentBase:  path.join(__dirname, <span class="string">"dist"</span>), <span class="comment">// 告诉服务器从哪里提供内容， 默认情况下，将使用当前工作目录作为提供内容的目录</span></span><br><span class="line">    compress: <span class="literal">true</span>, <span class="comment">// 一切服务都启用gzip 压缩</span></span><br><span class="line">    host: <span class="string">'0.0.0.0'</span>, <span class="comment">// 指定使用一个 host。默认是 localhost。如果你希望服务器外部可访问 0.0.0.0</span></span><br><span class="line">    port: <span class="number">8080</span>, <span class="comment">// 端口</span></span><br><span class="line">    open: <span class="literal">true</span>, <span class="comment">// 是否打开浏览器</span></span><br><span class="line">    overlay: &#123;  <span class="comment">// 出现错误或者警告的时候，是否覆盖页面线上错误消息。</span></span><br><span class="line">        warnings: <span class="literal">true</span>,</span><br><span class="line">        errors: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    publicPath: <span class="string">'/'</span>, <span class="comment">// 此路径下的打包文件可在浏览器中访问。</span></span><br><span class="line">    proxy: &#123;  <span class="comment">// 设置代理</span></span><br><span class="line">        <span class="string">"/api"</span>: &#123;  <span class="comment">// 访问api开头的请求，会跳转到  下面的target配置</span></span><br><span class="line">        target: <span class="string">"http://192.168.0.102:8080"</span>,</span><br><span class="line">        pathRewrite: &#123;<span class="string">"^/api"</span> : <span class="string">"/mockjsdata/5/api"</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    quiet: <span class="literal">true</span>, <span class="comment">// necessary for FriendlyErrorsPlugin. 启用 quiet 后，除了初始启动信息之外的任何内容都不会被打印到控制台。这也意味着来自 webpack 的错误或警告在控制台不可见。</span></span><br><span class="line">    watchOptions: &#123; <span class="comment">// 监视文件相关的控制选项</span></span><br><span class="line">        poll: <span class="literal">true</span>,   <span class="comment">// webpack 使用文件系统(file system)获取文件改动的通知。在某些情况下，不会正常工作。例如，当使用 Network File System (NFS) 时。Vagrant 也有很多问题。在这些情况下，请使用轮询. poll: true。当然 poll也可以设置成毫秒数，比如：  poll: 1000</span></span><br><span class="line">        ignored: <span class="regexp">/node_modules/</span>, <span class="comment">// 忽略监控的文件夹，正则</span></span><br><span class="line">        aggregateTimeout: <span class="number">300</span> <span class="comment">// 默认值，当第一个文件更改，会在重新构建前增加延迟</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>此处，用<code>npx webpack-dev-server --config webpack.dev.js</code>，然后在路由上添加<code>/main.html</code></li><li>然后不管修改js还是其他，都会自动更新，然后会发现dist文件夹里没有文件，所以说明它编译是在内存里面生成的。</li><li><p>将命令加到package.json中</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</span><br><span class="line">    "build": "npx webpack --config webpack.dev.js",</span><br><span class="line">    "watch": "npx webpack --watch --config webpack.dev.js",</span><br><span class="line">    "start": "npx webpack-dev-server --config webpack.dev.js",</span><br><span class="line">    "dist": "npx webpack --config webpack.prod.js"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>使用代理部分此处省略，具体请看第14个视频。会用到axios发起Ajax请求。</p></li></ol><h1 id="14-webpack的代理服务器设置和babel转换及优化"><a href="#14-webpack的代理服务器设置和babel转换及优化" class="headerlink" title="14.webpack的代理服务器设置和babel转换及优化"></a>14.webpack的代理服务器设置和babel转换及优化</h1><h2 id="babel转码"><a href="#babel转码" class="headerlink" title="babel转码"></a>babel转码</h2><ul><li>虽然现代的浏览器已经兼容了96%以上的ES6的语法了，但是为了兼容老式的浏览器（IE8、9）我们需要把最新的ES6的语法转成ES5的，那么babel的loader就出场了。</li></ul><ol><li>安装<br> <code>npm i -D babel-loader babel-core babel-preset-env</code></li><li><p>在webpack的配置文件中，添加js的处理模块。（开发阶段和生成阶段都需要，因此加到common里）</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            exclude: <span class="regexp">/(node_modules)/</span>,  <span class="comment">// 加快编译速度，不包含node_modules文件夹内容</span></span><br><span class="line">            use: &#123;</span><br><span class="line">                loader: <span class="string">'babel-loader'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在项目根目录下，添加babel的配置文件<code>.babelrc</code>，其内容为</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [<span class="string">"env"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将原本的var改成let<a href="#压缩JS">压缩JS</a>，此时打包不会再报错；或者在index.js里添加一些ES6语法的内容</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Temp</span> </span>&#123;</span><br><span class="line">    show() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'this.Age :'</span>, <span class="keyword">this</span>.Age);</span><br><span class="line">    &#125;</span><br><span class="line">    get Age() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._age;</span><br><span class="line">    &#125;</span><br><span class="line">    set Age(val) &#123;</span><br><span class="line">        <span class="keyword">this</span>._age = val + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> t = <span class="keyword">new</span> Temp();</span><br><span class="line">t.Age = <span class="number">19</span>;</span><br><span class="line">t.show();</span><br></pre></td></tr></table></figure></li><li><p><code>npm run build</code></p></li></ol><ul><li>查看生成的main.js，发现原来的let已被替换成var</li><li>此处可能会产生报错，报错原因是找不到@babel/core，解决方法详见<a href="https://www.cnblogs.com/soyxiaobi/p/9554565.html" target="_blank" rel="noopener">https://www.cnblogs.com/soyxiaobi/p/9554565.html</a></li></ul><h2 id="babel优化"><a href="#babel优化" class="headerlink" title="babel优化"></a>babel优化</h2><ul><li>babel-loader可以配置如下几个options：<ul><li>cacheDirectory：默认值为 false。当有设置时，指定的目录将用来缓存 loader 的执行结果。之后的 webpack 构建，将会尝试读取缓存，来避免在每次执行时，可能产生的、高性能消耗的 Babel 重新编译过程(recompilation process)。如果设置了一个空值 (loader: ‘babel-loader?cacheDirectory’) 或者 true (loader: babel-loader?cacheDirectory=true)，loader 将使用默认的缓存目录 node_modules/.cache/babel-loader，如果在任何根目录下都没有找到 node_modules 目录，将会降级回退到操作系统默认的临时文件目录。（<strong>使用跟这个可以提升编译速度</strong>）</li><li>cacheIdentifier：默认是一个由 babel-core 版本号，babel-loader 版本号，.babelrc 文件内容（存在的情况下），环境变量 BABEL_ENV 的值（没有时降级到 NODE_ENV）组成的字符串。可以设置为一个自定义的值，在 identifier 改变后，强制缓存失效。</li><li>forceEnv：默认将解析 BABEL_ENV 然后是 NODE_ENV。允许你在 loader 级别上覆盖 BABEL_ENV/NODE_ENV。对有不同 babel 配置的，客户端和服务端同构应用非常有用。</li></ul></li><li><p>注意：sourceMap 选项是被忽略的。当 webpack 配置了 sourceMap 时（通过 devtool 配置选项），将会自动生成 sourceMap。</p></li><li><p>babel 在每个文件都插入了辅助代码，使代码体积过大.babel 对一些公共方法使用了非常小的辅助代码，比如 _extend。 默认情况下会被添加到每一个需要它的文件中。你可以引入 babel runtime 作为一个独立模块，来避免重复引入。</p><ol><li><p>安装</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-plugin-transform-runtime --save-dev</span><br><span class="line">npm install babel-runtime --save</span><br></pre></td></tr></table></figure></li><li><p>配置</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">rules: [</span><br><span class="line"><span class="comment">// 'transform-runtime' 插件告诉 babel 要引用 runtime 来代替注入。</span></span><br><span class="line">    &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>修改.babelrc</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [<span class="string">"env"</span>],</span><br><span class="line">    <span class="attr">"plugins"</span>: [</span><br><span class="line">        [<span class="string">"transform-runtime"</span>, &#123;</span><br><span class="line">        <span class="attr">"helpers"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"polyfill"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"regenerator"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"moduleName"</span>: <span class="string">"babel-runtime"</span></span><br><span class="line">        &#125;]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>此时，webpack打包的时候，会自动优化重复引入公共方法的问题。</li></ul></li></ol></li></ul><h1 id="15-webpack的eslint校验配置"><a href="#15-webpack的eslint校验配置" class="headerlink" title="15.webpack的eslint校验配置"></a>15.webpack的eslint校验配置</h1><ul><li>ESLint校验代码格式规范</li></ul><ol><li><p>安装</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint --save-dev</span><br><span class="line">npm install eslint-loader --save-dev</span><br><span class="line"> </span><br><span class="line"># 以下是用到的额外的需要安装的eslint的解释器、校验规则等</span><br><span class="line">npm i -D babel-eslint standard</span><br></pre></td></tr></table></figure></li><li><p>在webpack.common.js中配置，把ESLint的配置放到处理js文件的最后</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            exclude: <span class="regexp">/(node_modules)/</span>,  <span class="comment">// 加快编译速度，不包含node_modules文件夹内容</span></span><br><span class="line">            use: [&#123;</span><br><span class="line">                loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    cacheDirectory: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                loader: <span class="string">"eslint-loader"</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    <span class="comment">// eslint options (if necessary)</span></span><br><span class="line">                    fix: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure></li><li><p>eslint配置可以直接放到webpack的配置文件中，也可以直接放到项目根目录的 .eslintrc中(<a href="https://eslint.org/docs/developer-guide/nodejs-api#cliengine" target="_blank" rel="noopener">文档</a>)。</p></li></ol><ul><li>也可以将eslint配置文件创建为<code>.eslintrc.js</code>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.js</span></span><br><span class="line"><span class="comment">// https://eslint.org/docs/user-guide/configuring</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">root: <span class="literal">true</span>,</span><br><span class="line">parserOptions: &#123;</span><br><span class="line">    parser: <span class="string">'babel-eslint'</span></span><br><span class="line">&#125;,</span><br><span class="line">env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">extends: [</span><br><span class="line">    <span class="comment">// https://github.com/standard/standard/blob/master/docs/RULES-en.md</span></span><br><span class="line">    <span class="string">'standard'</span></span><br><span class="line">],</span><br><span class="line">globals: &#123;</span><br><span class="line">    NODE_ENV: <span class="literal">false</span></span><br><span class="line">&#125;,</span><br><span class="line">rules: &#123;</span><br><span class="line">    <span class="comment">// allow async-await</span></span><br><span class="line">    <span class="string">'generator-star-spacing'</span>: <span class="string">'off'</span>,</span><br><span class="line">    <span class="comment">// allow debugger during development</span></span><br><span class="line">    <span class="string">'no-debugger'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'error'</span> : <span class="string">'off'</span>,</span><br><span class="line">    <span class="comment">// 添加，分号必须</span></span><br><span class="line">    semi: [<span class="string">'error'</span>, <span class="string">'always'</span>],</span><br><span class="line">    <span class="string">'no-unexpected-multiline'</span>: <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'space-before-function-paren'</span>: [<span class="string">'error'</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="comment">// 'quotes': ["error", "double", &#123; "avoidEscape": true &#125;]</span></span><br><span class="line">    quotes: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'single'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        avoidEscape: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li><p>最好在根目录下再加一个<code>.eslintignore</code>文件，去忽略一些文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/dist/</span><br><span class="line">/node_modules/</span><br><span class="line">/*.js</span><br></pre></td></tr></table></figure><ul><li>这样vscode的eslint插件就不会报错了</li></ul></li><li>然后在src的index.js文件中多添加一些分号，<code>npm run build</code>之后查看生成的main.js文件，发现自动修复了<hr></li></ol><p>16.webpack的模块解析后缀和别名配置详解</p><pre><code>1. 创建 import 或 require 的别名，来确保模块引入变得更简单。2. 自动解析确定的扩展。</code></pre><p>17.webpack的模块的外部依赖配置</p><pre><code>1. 把一个模块做成外部依赖，最终不会打包到js文件中去 </code></pre><p>18.webpack的打包分析报表插件与优化总结<br>以上三课本文不作详细阐释，有兴趣可查看视频或查看于文末的链接查看相关笔记</p>]]></content>
      
      <categories>
          
          <category> 学习汇总 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇总 </tag>
            
            <tag> 学习 </tag>
            
            <tag> 前端 </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>牛客网——前端JS能力测评（汇总整理）</title>
      <link href="/2019/08/12/some-programming-question-of-nowcoder/"/>
      <url>/2019/08/12/some-programming-question-of-nowcoder/</url>
      <content type="html"><![CDATA[<blockquote><p>牛客网首页 &gt; 在线编程 &gt; JS能力测评经典题<br><a href="https://www.nowcoder.com/ta/js-assessment" target="_blank" rel="noopener">https://www.nowcoder.com/ta/js-assessment</a></p></blockquote><p>本文整理了牛客网前端JS能力测评题的部分答案解析，解析源自于在牛客网中每道题的讨论界面。</p><h1 id="1-查找数组元素位置"><a href="#1-查找数组元素位置" class="headerlink" title="1.查找数组元素位置"></a>1.查找数组元素位置</h1><ul><li>题目描述：<br>找出元素 item 在给定数组 arr 中的位置<br>如果数组中存在 item，则返回元素在数组中的位置，否则返回 -1。 </li><li>示例：<br>输入<code>[ 1, 2, 3, 4 ], 3</code><br>输出 <code>2</code></li></ul><p>我的方法：一是用for循环，二是直接用<code>return arr.indexOf(item);</code>；<br>看了网友们的讨论，发现自己没有检验浏览器是否支持indexOf()</p><ul><li>本题应注意：</li></ul><ol><li><strong>判断当前浏览器环境中Array原型中有没有indexOf方法，若没有则执行自定义方法</strong></li><li>indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。</li></ol><p>解决方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">indexOf</span>(<span class="params">arr, item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.prototype.indexOf)&#123;</span><br><span class="line">      <span class="keyword">return</span> arr.indexOf(item);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">          <span class="keyword">if</span> (arr[i] === item)&#123;</span><br><span class="line">              <span class="keyword">return</span> i;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;     </span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下方法  支持数组arr中的数据类型为对象，数组，等。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">indexOf</span>(<span class="params">arr, item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!arr || !arr.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="comment">// 支持 arr[i] 为对象，数组等</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">JSON</span>.stringify(arr[i]) === <span class="built_in">JSON</span>.stringify(item)) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="2-数组求和"><a href="#2-数组求和" class="headerlink" title="2.数组求和"></a>2.数组求和</h1><ul><li>题目描述：<br>计算给定数组 arr 中所有元素的总和<br>数组中的元素均为 Number 类型</li><li>示例：<br>输入 <code>[ 1, 2, 3, 4 ]</code><br>输出 <code>10</code></li></ul><p>我的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function sum(arr) &#123;</span><br><span class="line">    var sum=0;</span><br><span class="line">    if(arr.length==0)&#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">        sum+=arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解决方法：</p><ol><li><p>不考虑算法复杂度，用递归做</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length;</span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (len == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">0</span>] + sum(arr.slice(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>常规循环</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=arr.length<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">        s += arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 本以为应该需要判断数组长度为0或1时的情况，细看原来是<code>i=arr.length-1; i&gt;=0;</code>，为0循环不执行，结果为0，长度为1循环会计算arr[0]</p></li><li><p>函数式编程 map-reduce<br><strong>Array.prototype.reduce()</strong><br><em>对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。</em><br>语法：<code>arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])</code><br>参数：</p><ul><li><strong>callback</strong>：执行数组中每个值的函数。<br>包含四个参数：<ul><li>accumulator：累计器累计回调的返回值; 它是上一次调用回调时返回的累积值，或initialValue（见于下方）。</li><li>currentValue：数组中正在处理的元素。</li><li>currentIndex：可选，数组中正在处理的当前元素的索引。 如果提供了initialValue，则起始索引号为0，否则为1。</li><li>array：可选，调用reduce()的数组</li></ul></li><li>initialValue：可选，作为第一次调用 callback函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。<blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, curr, idx, arr</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prev + curr;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul></li><li><p>forEach遍历<br><strong>Array.prototype.forEach()</strong><br><em>对数组的每个元素执行一次提供的函数。</em><br>语法：<code>arr.forEach(callback[, thisArg]);</code><br>参数：</p><ul><li><strong>callback</strong>：为数组中每个元素执行的函数。<br>  该函数接收三个参数：<ul><li>currentValue：数组中正在处理的当前元素。</li><li>index：可选，数组中正在处理的当前元素的索引。</li><li>array：可选，forEach() 方法正在操作的数组。</li></ul></li><li>thisArg：可选，当执行回调函数时用作 this 的值(参考对象)。</li><li>返回值：undefined<blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="number">0</span>;</span><br><span class="line">    arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">val, idx, arr</span>) </span>&#123;</span><br><span class="line">        s += val;</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote></li></ul></li><li><p>eval</p></li></ol><ul><li><p><strong>eval()函数</strong>：<strong>会将传入的字符串当做 JavaScript 代码进行执行。</strong><br><em>语法</em>：<code>eval(string)</code><br><em>参数</em>：<code>string</code>一个表示 JavaScript 表达式、语句或一系列语句的字符串。表达式可以包含变量与已存在对象的属性。<br><em>返回值</em>：返回字符串中代码的返回值。如果返回值为空，则返回 undefined。</p></li><li><p><strong>Array.prototype.join()方法：</strong><br>将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符。<br><em>语法</em>：<code>arr.join([separator])</code><br><em>参数</em>：<code>separator</code>指定一个字符串来分隔数组的每个元素。如果需要，将分隔符转换为字符串。如果省略()，数组元素用逗号分隔。默认为 “,”。如果separator是空字符串(“”)，则所有元素之间都没有任何字符。<br><em>返回值</em>：一个所有数组元素连接的字符串。如果 arr.length 为0，则返回空字符串。</p><blockquote><p><strong>join()</strong> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join</a><br><strong>eval()</strong> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval</a></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(arr.join(<span class="string">"+"</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote></li></ul><h1 id="3-移除数组中的元素（不修改原数组）"><a href="#3-移除数组中的元素（不修改原数组）" class="headerlink" title="3.移除数组中的元素（不修改原数组）"></a>3.移除数组中的元素（不修改原数组）</h1><ul><li>题目描述：<br>移除数组 arr 中的所有值与 item 相等的元素。不要直接修改数组 arr，结果返回新的数组</li><li>示例：<br>输入 <code>[1, 2, 3, 4, 2], 2</code><br>输出 <code>[1, 3, 4]</code></li></ul><p>我的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function remove(arr, item) &#123;</span><br><span class="line">    var array=[];</span><br><span class="line">    for(var i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">        if(arr[i]!=item)&#123;</span><br><span class="line">           array.push(arr[i]); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解决方法：</p><ol><li><p>splice()。<br><strong>Array.prototype.splice()</strong>：通过<em>删除</em>或<em>替换</em>现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法<strong>会改变原数组</strong>。</p><blockquote><p><strong>splice()</strong>：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice</a></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">arr,item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newarr = arr.slice(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;newarr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(newarr[i] == item)&#123;</span><br><span class="line">            newarr.splice(i,<span class="number">1</span>);</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newarr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p> 注意区分：<strong>slice()</strong> </p><blockquote><p><strong>slice()</strong>：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice</a></p></blockquote></li><li>push()（就是我使用的方法）</li><li>filter()<br><strong>Array.prototype.filter()</strong>：创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。<blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter</a></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">arr,item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">ele</span>)</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> ele != item;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ol><h1 id="4-移除数组中的元素"><a href="#4-移除数组中的元素" class="headerlink" title="4.移除数组中的元素"></a>4.移除数组中的元素</h1><ul><li>题目描述：<br>移除数组 arr 中的所有值与 item 相等的元素，直接在给定的 arr 数组上进行操作，并将结果返回</li><li>示例：<br>输入 <code>[1, 2, 2, 3, 4, 2, 2], 2</code><br>输出 <code>[1, 3, 4]</code></li></ul><p>我的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function removeWithoutCopy(arr, item) &#123;</span><br><span class="line">    for(var i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">        if(arr[i]==item)&#123;</span><br><span class="line">            arr.splice(i,1);//在arr的第i个位置，删除1个元素</span><br><span class="line">            i--;//元素删除后，length少1，记得写这一句</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解决方法：</p><ol><li>splice()：我使用的方法（上一题有详解）</li><li>shift()，push()<br><strong>Array.prototype.shift()</strong>：从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。<blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/shift" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/shift</a></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeWithoutCopy</span>(<span class="params">arr, item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n=arr.length;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">         <span class="keyword">if</span>(arr[<span class="number">0</span>]!==item)   </span><br><span class="line">             arr.push(arr[<span class="number">0</span>]);</span><br><span class="line">         arr.shift();      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ol><h1 id="5-添加元素（数组末尾，返回新的数组）"><a href="#5-添加元素（数组末尾，返回新的数组）" class="headerlink" title="5.添加元素（数组末尾，返回新的数组）"></a>5.添加元素（数组末尾，返回新的数组）</h1><ul><li>题目描述：<br>在数组 arr 末尾添加元素 item。不要直接修改数组 arr，结果返回新的数组</li><li>示例：<br>输入 <code>[1, 2, 3, 4],  10</code><br>输出 <code>[1, 2, 3, 4, 10]</code></li></ul><p>我的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function append(arr, item) &#123;</span><br><span class="line">    var array=arr.slice(0);</span><br><span class="line">    //本来这里用了var array=arr;不能这样的原因是直接赋值双方引用相等，会改变原数组</span><br><span class="line">    array.push(item);</span><br><span class="line">    return array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解决方法：</p><ol><li><p>我使用的方法<br><strong>slice()</strong> ：返回一个新的数组对象，这一对象是一个由 begin 和 end 决定的原数组的浅拷贝（包括 begin，不包括end）。<strong>原始数组不会被改变</strong></p><blockquote><p><strong>slice()</strong>：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice</a></p></blockquote></li><li><p>普通的迭代拷贝</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> append = <span class="function"><span class="keyword">function</span>(<span class="params">arr, item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> length = arr.length,</span><br><span class="line">        newArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        newArr.push(arr[i]);</span><br><span class="line">    &#125; </span><br><span class="line">    newArr.push(item); </span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>concat()<br>concat()：方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</p><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat</a></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> append = <span class="function"><span class="keyword">function</span>(<span class="params">arr, item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.concat(item);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote></li></ol><h1 id="6-删除数组第一个元素-（返回新的数组）"><a href="#6-删除数组第一个元素-（返回新的数组）" class="headerlink" title="6.删除数组第一个元素 （返回新的数组）"></a>6.删除数组第一个元素 （返回新的数组）</h1><ul><li>题目描述：<br>删除数组 arr 最后一个元素。不要直接修改数组 arr，结果返回新的数组</li><li>示例：<br>输入 <code>[1, 2, 3, 4]</code><br>输出 <code>[1, 2, 3]</code></li></ul><p>我的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function truncate(arr) &#123;</span><br><span class="line">    var newArr=arr.slice(0);</span><br><span class="line">    newArr.pop();</span><br><span class="line">    return newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解决方法：</p><ol><li>slice()+pop()<br>我的方法：若使用var a = arr，这样赋值双方引用相等，若进行修改，实际仍然修改了原数组。因此需要将原数组复制给一个新的数组，可以通过var a = arr.slice(0);实现。使用pop方法可以删除数组的最后一个元素。</li><li><p>slice()（方法1的改进）<br>拷贝数组：从第0个元素开始到第倒数第一个元素（不包含）为止。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">truncate</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.slice(<span class="number">0</span>,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>filter()</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">truncate</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">v,i,ar</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i!==ar.length<span class="number">-1</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>push.apply+pop<br><strong>apply()</strong> 调用一个具有给定this值的函数，以及作为一个数组（或类似数组对象）提供的参数。</p><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply</a></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">truncate</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr=[];</span><br><span class="line">    [].push.apply(newArr, arr);</span><br><span class="line">    newArr.pop();</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>join+split+pop</p><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split</a></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*注意：数据类型会变成字符型</span></span><br><span class="line"><span class="comment">arr.join() 返回 1，2，3</span></span><br><span class="line"><span class="comment">arr.join('/') 返回 1/2/3 </span></span><br><span class="line"><span class="comment">split（元素）指定分隔符，返回新数组*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">truncate</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = arr.join().split(<span class="string">','</span>);</span><br><span class="line">    newArr.pop();</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>concat+pop</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">truncate</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = arr.concat();</span><br><span class="line">    newArr.pop();</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>普通的迭代拷贝</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">truncate</span>(<span class="params">arr, item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        newArr.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="7-添加元素（数组开头，返回新的数组）"><a href="#7-添加元素（数组开头，返回新的数组）" class="headerlink" title="7.添加元素（数组开头，返回新的数组）"></a>7.添加元素（数组开头，返回新的数组）</h1><ul><li>题目描述：<br>在数组 arr 开头添加元素 item。不要直接修改数组 arr，结果返回新的数组</li><li>示例：<br>输入 <code>[1, 2, 3, 4], 10</code><br>输出 <code>[10, 1, 2, 3, 4]</code></li></ul><p>我的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function prepend(arr, item) &#123;</span><br><span class="line">    var newArr=arr.slice(0);</span><br><span class="line">    newArr.unshift(item);</span><br><span class="line">    return newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解决方法：</p><ol><li><p>concat()</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepend</span>(<span class="params">arr, item</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> [item].concat(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>push.apply</p><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply</a></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//apply(thisObj，[argArray]):应用某一对象的一个方法，用另一个对象替换当前对象。实际上是改变函数体内 this 的值 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepend</span>(<span class="params">arr, item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr=[item];</span><br><span class="line">    [].push.apply(newArr, arr);</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>slice+unshift/splice（我使用的方法）</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepend</span>(<span class="params">arr, item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr=arr.slice(<span class="number">0</span>);</span><br><span class="line">    newArr.unshift(item);<span class="comment">//newArr.splice(0,0,item);</span></span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>unshift():</strong> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift</a></p></blockquote></li><li><p>join+split+unshift/splice</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*注意：数据类型会变成字符型</span></span><br><span class="line"><span class="comment">arr.join() 返回 1，2，3</span></span><br><span class="line"><span class="comment">arr.join('/') 返回 1/2/3 </span></span><br><span class="line"><span class="comment">split（元素）指定分隔符，返回新数组*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepend</span>(<span class="params">arr, item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr=arr.join().split(<span class="string">','</span>);</span><br><span class="line">    newArr.unshift(item);<span class="comment">//newArr.splice(0,0,item);</span></span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>普通的迭代拷贝</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepend</span>(<span class="params">arr, item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        newArr.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    newArr.unshift(item);</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="8-删除数组第一个元素（返回新的数组）"><a href="#8-删除数组第一个元素（返回新的数组）" class="headerlink" title="8.删除数组第一个元素（返回新的数组）"></a>8.删除数组第一个元素（返回新的数组）</h1><ul><li>题目描述：<br>删除数组 arr 第一个元素。不要直接修改数组 arr，结果返回新的数组</li><li>示例：<br>输入 <code>[1, 2, 3, 4]</code><br>输出 <code>[2, 3, 4]</code></li></ul><p>我的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function curtail(arr) &#123;</span><br><span class="line">    var newArr=arr.slice(0);</span><br><span class="line">    newArr.shift();</span><br><span class="line">    return newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解决方法：</p><ol><li><p>slice()</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curtail</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.slice(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>filter()</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curtail</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">v,i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i!==<span class="number">0</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>join+split+shift</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意：数据类型会变成字符型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curtail</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = arr.join().split(<span class="string">','</span>);</span><br><span class="line">    newArr.shift();</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>push.apply+shift</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curtail</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr=[];</span><br><span class="line">    [].push.apply(newArr, arr);</span><br><span class="line">    newArr.shift();</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>concat+shift</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curtail</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = arr.concat();</span><br><span class="line">    newArr.shift();</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>普通的迭代拷贝</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curtail</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        newArr.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h1>]]></content>
      
      <categories>
          
          <category> 汇总整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇总 </tag>
            
            <tag> 学习 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《JavaScript-DOM编程艺术（第2版）》读书笔记</title>
      <link href="/2019/06/30/JavaScript_DOM_Programming_Art(2nd_Edition)/"/>
      <url>/2019/06/30/JavaScript_DOM_Programming_Art(2nd_Edition)/</url>
      <content type="html"><![CDATA[<p><strong>前言</strong><br>&emsp;&emsp;在深入学习前端以及了解这个行业的过程中，我渐渐意识到基础知识对个人发展、日后求职的重要性。由此，我在近期入手了网上推荐的一些前端书籍，希望借此巩固基础并加深学习。<br>&emsp;&emsp;这里记一些需要了解/强调的基本要点或细节。部分内容具体可以翻翻书。</p><h1 id="第1章-JavaScript简史"><a href="#第1章-JavaScript简史" class="headerlink" title="第1章 JavaScript简史"></a>第1章 JavaScript简史</h1><h2 id="JavaScript的起源"><a href="#JavaScript的起源" class="headerlink" title="JavaScript的起源"></a>JavaScript的起源</h2><ul><li>JavaScript是Netscape公司与Sun公司合作开发的。在JavaScript出现之前，Web浏览器不过是一种能够显示超文本文档的简单的软件。而在JavaScript出现之后，网页的内容不再局限于枯燥的文本，它们的可交互性得到了显著的改善。</li><li>JavaScript是使网页具备交互能力的程序设计语言。</li><li>人们现在谈论的JavaScript 实际上就是ECMAScript。</li><li>JavaScript是一种脚本语言，通常只能通过Web浏览器去完成一些操作而不能像普通意义上的程序那样独立运行。</li><li>JavaScript与java无关，蹭了当时java的热度。</li></ul><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><ul><li>简单地说，DOM是一套对文档的内容进行抽象和概念化的方法。</li></ul><h2 id="浏览器战争"><a href="#浏览器战争" class="headerlink" title="浏览器战争"></a>浏览器战争</h2><h3 id="DHTML"><a href="#DHTML" class="headerlink" title="DHTML"></a>DHTML</h3><ul><li>DHTML是“Dynamic HTML”（动态HTML）的简称。DHTML并不是一项新技术，而是描述HTML、CSS和JavaScript技术组合的术语。</li><li>DHTML背后的含义是：<ul><li>利用HTML把网页标记为各种元素；</li><li>利用CSS设置元素样式和它们的显示位置；</li><li>利用JavaScript实时地操控页面和改变样式。</li></ul></li></ul><h3 id="浏览器之间的冲突"><a href="#浏览器之间的冲突" class="headerlink" title="浏览器之间的冲突"></a>浏览器之间的冲突</h3><blockquote><ul><li>Netscape公司的DOM使用了专有元素，这些元素称为层（layer）。层有唯一的ID，JavaScript代码需要像下面这样引用它们：<code>document.layers[&#39;myelement&#39;]</code></li><li>而在微软公司的DOM中这个元素必须像下面这样引用：<code>document.a11[&#39;myelement&#39;]</code></li></ul></blockquote><blockquote><p>若想找出myelement元素的1eft位置并把它赋值给变量xpos：</p><ul><li>Netscape Navigator 4浏览器：<code>var xpos=document.layers[&#39;myelement&#39;].left;</code></li><li>IE4浏览器：<code>var xpos = document.al1[&#39;myelement&#39;].leftpos;</code></li></ul></blockquote><h2 id="制定标准"><a href="#制定标准" class="headerlink" title="制定标准"></a>制定标准</h2><p>&emsp;&emsp;就在浏览器制造商以DOM为武器展开营销大战的同时，W3C不事声张地结合大家的优点推出了一个标准化的DOM。令人欣慰的是，Netscape、微软和其他一些浏览器制造商们还能抛开彼此的敌意而与W3C携手制定新的标准，并于1998年10月完成了“第1级DOM”（DOM Level1）。</p><blockquote><p>我们已经用<code>&lt;div&gt;</code>标签定义了一个ID为myelement的页面元素，现在需要找出它的1eft位置并把这个值保存到变量Xpos中。下面是使用新的标准化DOM时需要用到的语法：<br><code>var xpos =document.getElementById(&quot;myelenent&quot;).style.left;</code></p></blockquote><p>&emsp;&emsp;浏览器制造商们感兴趣的只不过是通过JavaScript操控网页的具体办法，但W3C推出的标准化DOM却可以让任何一种程序设计语言对使用任何一种标记语言编写出来的任何一份文档进行操控。</p><h3 id="浏览器以外的考虑"><a href="#浏览器以外的考虑" class="headerlink" title="浏览器以外的考虑"></a>浏览器以外的考虑</h3><ul><li>DOM是一种API（应用程序接口）。</li><li>简单地说，API就是一组已经得到有关各方共同认可的基本约定。在现实世界中，相当于API的例子包括（但不限于）摩尔斯码、国际时区、化学元素周期表。以上这些都是不同学科领域中的标准，它们使得人们能够更方便地交流与合作。</li><li>W3C对DOM的定义是：<strong> <em>“一个与系统平台和编程语言无关的接口，程序和脚本可以通过这个接口动态地访问和修改文档的内容、结构和样式。”</em> </strong></li><li>W3C推出的标准化DOM，在独立性和适用范围等诸多方面，都远远超出了各自为战的浏览器制造商们推出的各种专有DOM。</li></ul><h3 id="浏览器战争的结局"><a href="#浏览器战争的结局" class="headerlink" title="浏览器战争的结局"></a>浏览器战争的结局</h3><p>&emsp;&emsp;受浏览器战争影响最重的人群是那些网站设计人员。跨浏览器开发曾经是他们的噩梦。除了刚才提到的那些在JavaScript实现方面的差异之外，Netscape Navigator和IE这两种浏览器在对CSS的支持方面也有许多非常不同的地方。而编写那些可以同时支持这两种浏览器的样式表和脚本的工作也成了一种黑色艺术。</p><h3 id="崭新的起点"><a href="#崭新的起点" class="headerlink" title="崭新的起点"></a>崭新的起点</h3><ul><li>今天，几乎所有的浏览器都内置了对DOM的支持。20世纪90年代后期的浏览器大战的硝烟已经散尽。现在的浏览器厂商无一不在争先恐后地实现最新规范。</li><li>HTML5极大地改进了标记的语义，让我们通过<code>&lt;audio&gt;</code>和<code>&lt;video&gt;</code>得以控制各种媒体，<code>&lt;canvas&gt;</code>元素具备了完善的绘图能力，浏览器本地存储超越了cookie限制，更有内置的拖放支持，等等。</li></ul><h1 id="第2章-JavaScript语法"><a href="#第2章-JavaScript语法" class="headerlink" title="第2章 JavaScript语法"></a>第2章 JavaScript语法</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li><p>引用js最好的做法是把<code>&lt;script&gt;</code>标签放到HTML文档的最后，<code>&lt;/body&gt;</code>标签之前，这样能使浏览器更加快地加载页面（第五章有详解）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Example&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">Mark-up goes here...</span><br><span class="line">&lt;script src=&quot;demo.js&quot;&gt;&lt;/script&gt; </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">//&lt;script&gt;标签里没有包含传统的`type=&quot;text/java script&quot;`属性。</span><br><span class="line">//因为脚本默认是JavaScript，所以没必要指定这个属性。</span><br></pre></td></tr></table></figure></li><li><p>JavaScript是解释型语言。</p></li><li>程序设计语言分为<strong> <em>解释型</em> </strong> 和 <strong> <em>编译型</em> </strong>两大类。<ol><li>Java或C++等语言需要一个编译器（compiler）。编译器是一种程序，能够把用Java等高级语言编写出来的源代码翻译为直接在计算机上执行的文件。<ul><li>用编译型语言编写的代码有错误，这些错误在代码编译阶段就能被发现。</li></ul></li><li>解释型程序设计语言不需要编译器——它们仅需要解释器。对于Javascript语言，在互联网环境下，Web浏览器负责完成有关的解释和执行工作。浏览器中的JavaScript解释器将直接读入源代码并执行。浏览器中如果没有解释器，JavaScript代码就无法执行。<ul><li>解释型语言代码中的错误只能等到解释器执行到有关代码时才能被发现。</li></ul></li></ol></li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li>语句<ul><li>建议在每条语句后加<code>;</code>，让代码更加易读。</li></ul></li><li><p>注释</p><ul><li><code>//单行注释</code></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/*  多行注释</span><br><span class="line">    多行注释  */</span><br></pre></td></tr></table></figure></li><li><p>HTML中的注释：<code>&lt;!-- 注释 --&gt;</code></p></li></ul></li><li><p>变量</p><ul><li>JavaScript 允许程序员直接对变量赋值而无需事先声明。这在许多程序设计语言中是不允许的。</li><li>在JavaScript脚本中，如果程序员在对某个变量赋值之前未声明，赋值操作将自动声明该变量。虽然JavaScrip没有强制要求程序员必须提前声明变量，但提前声明变量是一种良好的编程习惯。</li><li>JavaScript中，变量与其他语法元素的名字都<em>区分大小写</em>；</li><li>不允许变量名中包含空格或标点符号（美元符号“$”例外）；</li><li>允许变量名包含字母、数字、美元符号和下划线（但第一个字符不允许是数字）。</li><li>推荐使用驼峰式命名法：不使用下划线，第一个单词的字母小写，随后每个新单词首字母大写。<ul><li>例：myMood</li></ul></li></ul></li><li>数据类型<ul><li>JavaScript为<em>弱类型</em>语言。<ul><li>必须明确类型声明的语言称为强类型（strongly typed）语言。</li></ul></li></ul><ol><li>字符串<ul><li>你可以随意选用引号，但最好是根据字符串所包含的字符来选择。如果字符串包含双引号，就把整个字符串放在单引号里；如果字符串包含单引号，就把整个字符串放在双引号里。</li><li>想让单双引号变成一个普通字符，用转义：<code>var mood = &#39;don\&#39;t ask&#39;;</code></li><li>作为一个好的编程习惯，不管选择用双引号还是单引号，请在整个脚本中保持一致。</li></ul></li><li>数值</li><li>布尔值</li></ol></li><li><p>数组<br><code>array[index] = element;</code></p><ul><li><p>数组元素可以是变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var beatles = new Array();</span><br><span class="line">var name = &quot;John&quot;;</span><br><span class="line">beatles[0] = name;</span><br></pre></td></tr></table></figure></li><li><p>数组元素还可以包含其他的数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var lennon = [&apos;John&apos;,1940,false];</span><br><span class="line">var beatles = [];</span><br><span class="line">beatles[0] = lennon;</span><br></pre></td></tr></table></figure></li></ul><p><strong>关联数组</strong></p><ul><li>beatles数组是传统数组的典型例子：每个元素的下标是一个数字，每增加一个元素，这个数字就依次增加1。</li><li>如果在填充数组时只给出了元素的值，这个数组就将是一个传统数组，它的各个元素的下标将被自动创建和刷新。</li><li><p>可以通过在填充数组时为每个新元素明确地给出下标来改变这种默认的行为。在为新元素给出下标时，不必局限于使用整数数字。你可以用字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var lennon = Array();</span><br><span class="line">lennon[&quot;name&quot;] = &quot;John&quot;;</span><br><span class="line">lennon[&quot;year&quot;] = 1940;</span><br><span class="line">lennon[&quot;iiving&quot;] = faise;</span><br></pre></td></tr></table></figure></li><li><p>这是<em>关联数组</em>。由于可以使用字符串来代替数字值，因而代码更具有可读性。但是，<strong>不推荐</strong>大家使用。本质上，在创建关联数组时，你创建的是Array对象的属性。在JavaScript中，所有的变量实际上都是某种类型的对象。比如，一个布尔值就是一个Boolean类型的对象，一个数组就是一个Array类型的对象。在上面这个例子中，你实际上是给lenmon数组添加了name、year和living三个属性。理想情况下，你不应该修改Array对象的属性，而应该使用通用的对象（Object）。</p></li></ul></li><li>对象</li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="算术操作符"><a href="#算术操作符" class="headerlink" title="算术操作符"></a>算术操作符</h3><ul><li>加号（+）是一个比较特殊的操作符，它既可以用于数值，也可以用于字符串。把两个字符毒合二为一是一种很直观易懂的操作：<code>var message = &quot;I am feeling&quot; + &quot;happy&quot;;</code></li><li><ol><li>如果把字符串和数值拼接在一起，其结果将是一个更长的字符串（数值会被自动转换为字符串）;</li><li>用同样的操作符来“拼接”两个数值，其结果将是那两个数值的算术和。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(&quot;10&quot;+20);  //1020</span><br><span class="line">alert(10 + 20);  //30</span><br><span class="line">alert(10 +&quot;20&quot;); //1020</span><br></pre></td></tr></table></figure></li></ol></li><li><p>符号（+=），它可以一次完成“加法和赋值”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var year = 2019;</span><br><span class="line">var message = &quot;This year is&quot;;</span><br><span class="line">message += year;              //This year is 2019</span><br></pre></td></tr></table></figure></li></ul><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(condition)&#123;</span><br><span class="line">  statements;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h3><ul><li>==和===区别：全等操作符（===）不仅比较值，还会比较变量的类型。!=和!==一样的道理。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a = false;</span><br><span class="line">var b = &quot;&quot;;</span><br><span class="line">if(a===b)&#123;              //false</span><br><span class="line">  alert(&quot;a equals b&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h3><p>&amp;&amp;  ||  !</p><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><ul><li><p>while循环</p><ul><li><p>while</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while(condition)&#123;</span><br><span class="line">  statements;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>do…while</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">do&#123;</span><br><span class="line">  statements;</span><br><span class="line">&#125;while(condition);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>for循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(initial condition;test condition;alter condition)&#123;</span><br><span class="line">  statements;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for循环最常见的用途之一是对某个<strong>数组</strong>里的全体元素进行遍历处理。</p></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>作为一种良好的编程习惯，应该先对函数做出定义再调用它们。<h4 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h4></li><li>如果在某个函数中使用了var，那个变量就将被视为一个局部变量，它只存在于这个函数的上下文中；反之，如果没有使用var，那个变量就将被视为一个全局变量，如果脚本里已经存在一个与之同名的全局变量，这个函数就会改变那个全局变量的值。</li></ul><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>实例是对象的具体个体。</p><ul><li>内建对象<br>如：Array对象，Date对象等</li><li>宿主对象<br>由浏览器提供的预定义对象被称为宿主对象（host object）;</li></ul><h1 id="第3章-DOM"><a href="#第3章-DOM" class="headerlink" title="第3章 DOM"></a>第3章 DOM</h1><p>Document Object Model</p><ul><li>DOM代表着加载到浏览器窗口的当前网页。浏览器提供了网页的地图（或者说模型），而我们可以通过JavaScript去读取这张地图。</li><li>DOM把一份文档表示为一棵树。（文档：“节点树”）</li></ul><h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><ul><li>元素结点<ul><li>标签的名字就是元素的名字：如<code>&lt;p&gt;</code>、<code>&lt;ul&gt;</code>、<code>&lt;li&gt;</code></li></ul></li><li>文本节点<ul><li>在XHTML文档里，文本节点总是被包含在元素节点的内部。<br>如：<code>&lt;p&gt;Hello world&lt;/p&gt;</code>中的<code>Hello world</code></li></ul></li><li>属性节点<ul><li>属性节点总是被包含在元素节点中。<br>如：<code>&lt;p title=&quot;nihao&quot;&gt;Hello world&lt;/p&gt;</code>中的<code>title=&quot;nihao&quot;</code></li></ul></li></ul><h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><blockquote><p>typeof操作符可以告诉我们它的操作数是一个字符串、数值、函数、布尔值还是对象。<br>文档中的每一个元素都是一个对象。</p></blockquote><ul><li>document.getElementById(id)：返回一个与那个有着给定id属性值的元素节点对应的对象。</li><li>document.getElementsByTagName(tag)：返回一个对象数组<ul><li><code>alert(document.getElementsByTagName(&quot;*&quot;).1ength);</code></li><li>上述例子能获取到文档里的所有元素节点</li><li>通配符（星号字符“*”）必须放在引号里，这是为了让通配符与乘法操作符有所区别。</li></ul></li><li>document.getElementsByClassName(class)<ul><li>使用这个方法还可以查找那些带有多个类名的元素。要指定多个类名，只要在字符串参数中用空格分隔类名即可。</li><li>不仅类名的实际顺序不重要，就算元素还带有更多类名也没有关系。</li></ul></li></ul><h2 id="获取和设置属性"><a href="#获取和设置属性" class="headerlink" title="获取和设置属性"></a>获取和设置属性</h2><ul><li><code>object.getAttribute(attribute)</code><br>getAttribute方法不属于document对象，所以不能通过document对象调用。</li><li><code>object.setAttribute(attribute,value)</code><br>setAttribute做出的修改不会反映在文档本身的源代码里。</li></ul><h1 id="第4章-案例研究：JavaScript图片库"><a href="#第4章-案例研究：JavaScript图片库" class="headerlink" title="第4章 案例研究：JavaScript图片库"></a>第4章 案例研究：JavaScript图片库</h1><p><strong>事件处理函数</strong></p><ul><li>在onclick事件处理函数所触发的JavaScript代码里增加一条return false语句，就可以阻止默认行为。<br><code>&lt;a href=&quot;https://niccce.github.io/&quot; onclick=&quot;return false;&quot;&gt;Click me&lt;/a&gt;</code></li><li>也可以调用某函数后再阻止默认行为。</li></ul><p><strong>拓展</strong></p><ul><li>childNodes属性：可用来获取任何一个元素的所有子元素<ul><li>它是一个包含这个元素全部子元素的<strong>数组</strong></li><li>element.childNodes</li><li>由childNodes属性返回的数组包含所有类型的节点，而不仅仅是元素节点。事实上，文档里几乎每一样东西都是一个节点，甚至连空格和换行符都会被解释为节点，而它们也全都包含在childNodes属性所返回的数组当中。</li></ul></li><li>nodeType属性<ul><li>node.nodeType</li><li>每个节点都有nodeType属性，nodeType属性总共有12种可取值，但其中仅有3种具有实用价值：<ol><li>元素节点的nodeType属性值是1</li><li>属性节点的nodeType属性值是2</li><li>文本节点的nodeType属性值是3</li></ol></li></ul></li><li>nodeValue属性：用来获取一个节点的值</li><li>firstChild、lastChild属性<ul><li>无论何时何地，只要需要访问childNodes数组的第一个元素，都可以把它写成firstchild；lastChild则是最后一个元素</li><li><code>node.firstChild</code>相当于<code>node.childNodes[0]</code></li><li><code>node.lastChild</code> 相当于<code>node.childNodes[node.childNodes.length-1]</code></li></ul></li></ul><h1 id="第5章-最佳实践"><a href="#第5章-最佳实践" class="headerlink" title="第5章 最佳实践"></a>第5章 最佳实践</h1><h2 id="平稳退化"><a href="#平稳退化" class="headerlink" title="平稳退化"></a>平稳退化</h2><blockquote><ul><li>网站的访问者完全有可能使用的是不支持JavaScript的浏览器，还有一种可能是虽然测览器支持 JavaScript，但用户已经禁用它了（比如，因为讨厌看到弹出广告）。</li><li>如果正确地使用了JavaScript脚本，就可以让访问者在他们的浏览器不支持JavaScript的情况下仍能顺利地浏览你的网站。这就是所谓的平稳退化（graceful degradation），就是说，虽然某些功能无法使用，但最基本的操作仍能顺利完成。</li></ul></blockquote><ul><li>“JavaScript:”伪协议，不建议使用</li><li>内嵌的事件处理函数，不建议使用</li></ul><h2 id="向CSS学习"><a href="#向CSS学习" class="headerlink" title="向CSS学习"></a>向CSS学习</h2><ul><li>结构与样式分离<blockquote><p>CSS技术的最大优点是，它能够帮助你将Web文档的内容结构（标记）和版面设计（样式）分离开来。</p></blockquote></li><li><p>渐进增强</p><blockquote><p>所谓“渐进增强”就是用一些额外的信息层去包裹原始数据。按照“渐进增强”原则创建出来的网页几乎（如果不是“全部”的话）都符合“平稳退化”原则。</p></blockquote><p>更值得推荐的办法是，先把样式信息存入一个外部文件，再在文档的head部分用<code>&lt;link&gt;</code>标签来调用这个文件</p></li></ul><h2 id="分离JavaScript"><a href="#分离JavaScript" class="headerlink" title="分离JavaScript"></a>分离JavaScript</h2><ol><li>若Js语句直接放到js文件里，没有用任何函数封装，这条语句将在JavaScript文件被加载时立刻执行。</li><li>如果JavaScript文件是从HTML文档的<code>&lt;head&gt;</code>部分用<code>&lt;script&gt;</code>标签调用的，它将在HTML文档之前加载到浏览器里。</li><li>同样，如果<code>&lt;script&gt;</code>标签位于文档底部<code>&lt;/body&gt;</code>之前，就不能保证哪个文件最先结束加载（浏览器可能一次加载多个）。园为脚本加载时文档可能不完整，所以模型也不完整。没有完整的DOM，getElementsByTaglame等方法就不能正常工作。</li><li>必须让这些代码在HTML文档全部加载到浏览器之后马上开始执行，可用<code>window.onload</code></li><li><p>文档将被加载到一个浏览器窗口里，document对象又是window对象的一个属性。当window对象触发onload事件时，document对象已经存在。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = sayHi;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">"Hello World"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  sayHi();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">"Hello World"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="向后兼容"><a href="#向后兼容" class="headerlink" title="向后兼容"></a>向后兼容</h2><h3 id="对象检测"><a href="#对象检测" class="headerlink" title="对象检测"></a>对象检测</h3><blockquote><p>大多数现代的浏览器对DOM的支持都非常不错。但比较古老的浏览器却很可能无法理解DOM提供的方法和属性。因此，即使某位用户在访问你的网站时使用的是支持JavaScript的浏览器，某些脚本也不一定能正常工作。</p></blockquote><blockquote><p>针对这一问题的最简单的解决方案是，<strong>检测浏览器对JavaScript的支持程度</strong>。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">document</span>.getElementById)&#123;</span><br><span class="line">    statements using getElementById</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="built_in">document</span>.getElementById)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浏览器嗅探技术"><a href="#浏览器嗅探技术" class="headerlink" title="浏览器嗅探技术"></a>浏览器嗅探技术</h3><blockquote><p>在JavaScript脚本代码里，在使用某个特定的方法或属性之前，先测试它是否真实存在是确保向后兼容性最安全和最可信的办法，但它并不是唯一的办法。</p></blockquote><blockquote><p>在浏览器市场群雄逐鹿的那个年代，一种称为浏览器嗅探（browser sniffing）的技术曾经非常流行。</p></blockquote><blockquote><p>“浏览器嗅探”指通过提取浏览器供应商提供的信息来解决向后兼容问题。从理论上讲，可以通过JavaScript代码检索关于浏览器品牌和版本的信息，这些信息可以用来改善JavaScript脚本代码的向后兼容性，但这是一种风险非常大的技术。</p></blockquote><h2 id="性能考虑"><a href="#性能考虑" class="headerlink" title="性能考虑"></a>性能考虑</h2><ul><li>尽量少访问DOM和尽量减少标记</li><li>合并和放置脚本<ul><li>脚本在标记中的位置对页面的初次加载时间也有很大影响。传统上，我们都把脚本放在文档的<code>&lt;head&gt;</code>区域，这种放置方法有一个问题。位于<code>&lt;head&gt;</code>块中的脚本会导致浏览器无法并行加载其他文件（如图像或其他脚本）。一般来说，根据HTTP规范，浏览器每次从同一个域名中最多只能同时下载两个文件。而在下载脚本期间，浏览器不会下载其他任何文件，即使是来自不同域名的文件也不会下载，所有其他资源都要等脚本加载完毕后才能下载。</li><li>把所有<code>&lt;script&gt;</code>标签都放到文档的末尾，<code>&lt;/body&gt;</code>标记之前，就可以让页面变得更快。</li></ul></li><li>压缩脚本<br>所谓压缩脚本，指的是把脚本文件中不必要的字节，如空格和注释，统统删除，从而达到“压缩”文件的目的。</li></ul><h1 id="第6章-案例研究：图片库改进版"><a href="#第6章-案例研究：图片库改进版" class="headerlink" title="第6章 案例研究：图片库改进版"></a>第6章 案例研究：图片库改进版</h1><blockquote><p>如果想用JavaScript给某个网页添加一些行为，就不应该让JavaScript代码对这个网页的结构有任何依赖。</p></blockquote><h2 id="共享onload事件"><a href="#共享onload事件" class="headerlink" title="共享onload事件"></a>共享onload事件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onlaod = firstFunction;</span><br><span class="line"><span class="built_in">window</span>.onload = secondFunction;</span><br><span class="line"><span class="comment">//这样只有后面那个才会被实际执行</span></span><br></pre></td></tr></table></figure><p>可换成如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onlaod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  firstFunction();</span><br><span class="line">  secondFunction();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>可以使用一个函数，这个函数的名字是addloadEvent，它是由Simon Willison编写的。它只有一个参数：<strong>打算在页面加载完毕时执行的函数的名字</strong></li><li><p>下面是addLoadEvent函数将要完成的操作：</p><ol><li>把现有的window.onload事件处理函数的值存入变量oldonload。</li><li>如果在这个处理函数上还没有绑定任何函数，就像平时那样把新函数添加给它。</li><li>如果在这个处理函数上已经绑定了一些函数，就把新函数追加到现有指令的末尾。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addLoadEvent</span>(<span class="params">func</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> oldonload = <span class="built_in">window</span>.onload;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">window</span>.onload != <span class="string">'function'</span>)&#123;</span><br><span class="line">    <span class="built_in">window</span>.onload = func;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      o1donload();</span><br><span class="line">      func();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>学习用 参考链接：<br><a href="https://www.cnblogs.com/yangtoude/p/4753306.html" target="_blank" rel="noopener">https://www.cnblogs.com/yangtoude/p/4753306.html</a><br><a href="https://www.imooc.com/wenda/detail/336004" target="_blank" rel="noopener">https://www.imooc.com/wenda/detail/336004</a></p></blockquote><h2 id="小心onkeypress"><a href="#小心onkeypress" class="headerlink" title="小心onkeypress"></a>小心onkeypress</h2><blockquote><p>onclick事件处理函数比我们想象得更聪明。虽然它的名字“onclick”给人一种它只与鼠标点击动作相关联的印象，但事实却并非如此：在几乎所有的浏览器里，用Tab键移动到某个链接然后按下回车键的动作也会触发onclick事件。</p></blockquote><h2 id="DOM-Core和HTML-DOM"><a href="#DOM-Core和HTML-DOM" class="headerlink" title="DOM Core和HTML-DOM"></a>DOM Core和HTML-DOM</h2><ul><li>getElementById、getElementByTagName、getAttribute等这些方法都是<strong>DOM Core</strong>的组成部分。它们并不专属于JavaScript，支持DOM的任何一种程序设计语言都可以使用它们。它们的用途也并非仅限于处理网页，它们可以用来处理用任何一种标记语言（比如XML）编写出来的文档。</li><li>像onclick这样的属性，属于<strong>HTML-DOM</strong></li></ul><p>比如说，HTML-DOM为图片提供了一个src对象。这个对象可以把下面这样的语句：<code>element.getAttribute(&quot;src&quot;)</code>简化为：<code>element.src</code></p><h1 id="第7章-动态创建标记"><a href="#第7章-动态创建标记" class="headerlink" title="第7章 动态创建标记"></a>第7章 动态创建标记</h1><h2 id="一些传统的方法"><a href="#一些传统的方法" class="headerlink" title="一些传统的方法"></a>一些传统的方法</h2><ul><li><strong>document.write</strong>：document对象的write()方法可以方便快捷地把<strong>字符串</strong>插入到<strong>文档</strong>里。（尽量避免使用该方法）<br>事实上，那个<code>&lt;p&gt;</code>和<code>&lt;/p&gt;</code>只不过是一个将被插入文档的字符串的组成部分而已。</li><li><strong>innerHTML属性</strong>：innerHTML属性可以用来读、写某给定元素里的HTML内容。<ul><li>innerHTML属性不会返回任何对刚插入的内容的引用。</li><li>类似于document.write方法，innerHIML属性也是HTML专有属性，不能用于任何其他标记语言文档。浏览器在呈现正宗的XHTML文档（即MIME类型是application/xhtml+xml的XHTML文档）时会直接忽略掉innerHTML属性。</li></ul></li></ul><h2 id="DOM方法"><a href="#DOM方法" class="headerlink" title="DOM方法"></a>DOM方法</h2><ul><li><p>setAttribute方法并未改变文档的物理内容，因为浏览器实际显示的是那棵DOM节点树。在浏览器看来，DOM节点才是文档。</p></li><li><p><strong>createElement</strong>：用于创建<strong>元素</strong>节点。<br><code>document.createElement(&quot;p&quot;)</code><br>不论何时何地，只要你使用了createElement方法，就应该把新创建出来的元素赋给一个变量，那个变量会包含一个指向刚创建的那个元素的引用。</p></li><li><strong>appendChild</strong>：将新创建的节点插入某个文档的节点树。（会追加到某个元素节点内）<br><code>parent.appendChild(child)</code></li><li><strong>createTextNode</strong>：用于创建文本节点。<br><code>document.createTextNode(&quot;Hello world&quot;)</code></li><li><strong>insertBefore()方法</strong>：把一个新元素插入到一个现有元素的前面。<ul><li>新元素：你插入的元素（newElement）；</li><li>目标元素：你想把这个新元素插入到哪个元素（targetElement）之前；</li><li>父元素：目标元素的父元素（parentElement）。<br><code>parentElement.insertBefore(newElement,targetElement)</code><br>可用<code>targetElement.parentNode</code>得到父元素</li><li>在DOM里，元素节点的父元素必须是另一个元素节点（属性节点和文本节点的子元素不允许是元素节点）。</li></ul></li><li>DOM没有直接提供在已有元素后插入一个新元素的方法。可编写insertAfter函数：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertAfter</span>(<span class="params">newElement,targetElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> parent = targetElement.parentNode;</span><br><span class="line">  <span class="keyword">if</span> (parent.lastChild == targetElement) &#123;</span><br><span class="line">    parent.appendChild(newElement);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    parent.insertBefore(newElement,targetElement.nextSibling);</span><br><span class="line">    <span class="comment">//targetElement.nextSibling为目标元素的下一个兄弟元素</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><blockquote><p>学习参考链接：<br><a href="https://blog.csdn.net/weixin_37580235/article/details/81459282" target="_blank" rel="noopener">总结 - Ajax工作原理和实现步骤</a></p></blockquote><h3 id="Ajax简介"><a href="#Ajax简介" class="headerlink" title="Ajax简介"></a>Ajax简介</h3><ul><li>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</li><li>AJAX 不是新的编程语言，而是一种使用现有标准的新方法。</li><li>Ajax与服务器交换数据并<strong>更新网页中的一小部分</strong>的艺术，在不重新加载整个页面的情况下。</li><li>Ajax的主要优势就是对页面的请求以异步方式发送到服务器。而服务器不会用整个页面来响应请求，它会在后台处理请求，与此同时用户还能继续浏览页面并与页面交互。你的脚本则可以按需加载和创建页面内容，而不会打断用户的浏览体验。</li><li>渐进增强地使用Ajax：Hijax</li></ul><h3 id="Ajax所包含的技术"><a href="#Ajax所包含的技术" class="headerlink" title="Ajax所包含的技术"></a>Ajax所包含的技术</h3><p>大家都知道Ajax并非一种新的技术，而是几种原有技术的结合体。它由下列技术组合而成。</p><blockquote><ol><li>使用CSS和XHTML来表示。</li><li>使用DOM模型来交互和动态显示。</li><li>使用XMLHttpRequest来和服务器进行异步通信。</li><li>使用JavaScript来绑定和调用。</li></ol></blockquote><ul><li><strong>Ajax技术的核心是XMLHttpRequest对象</strong>，这个对象充当着浏览器中的脚本（客户端）与服务器之间的中间人的角色。以往的请求都由浏览器发出，而JavaScript通过这个对象可以自己发送请求，同时也自己处理响应。</li><li>不同的浏览器创建XMLHttpRequest对象的方法是有差异的。</li><li><em>IE 浏览器使用 ActiveXObject，而其他的浏览器使用名为 XMLHttpRequest 的 JavaScript 内建对象。</em></li></ul><h3 id="Ajax的工作原理"><a href="#Ajax的工作原理" class="headerlink" title="Ajax的工作原理"></a>Ajax的工作原理</h3><ol><li>浏览器捕获用户的操作，并进行相应的处理，然后把用户的操作反馈到服务器。</li><li>服务器接收浏览器端传来的用户操作，然后再把用户操作分发到其他浏览器端。</li><li>浏览器接收由服务器端分发下来的用户动作，并进行相应的处理。</li></ol><h3 id="XMLHttpRequest对象"><a href="#XMLHttpRequest对象" class="headerlink" title="XMLHttpRequest对象"></a>XMLHttpRequest对象</h3><ul><li>XMLHttpRequest对象的三个常用<strong>属性</strong><ol><li>onreadystatechange属性：该属性存有处理服务器响应的函数。</li><li>readyState属性：该属性存有服务器响应的状态信息。每当readyState改变时，onreadystatchange函数就会被执行。<br>readyState属性可能的值有5个：</li></ol></li></ul><table><thead><tr><th>状态</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>未初始化。请求未初始化（在调用 open() 之前）</td></tr><tr><td>1</td><td>正在加载。请求已提出（调用 send() 之前）</td></tr><tr><td>2</td><td>加载完毕。请求已发送（这里通常可以从响应得到内容头部）</td></tr><tr><td>3</td><td>正在交互。请求处理中（响应中通常有部分数据可用，但是服务器还没有完成响应）</td></tr><tr><td>4</td><td>完成。请求已完成（可以访问服务器响应并使用它）</td></tr></tbody></table><p>我们要向这个 onreadystatechange 函数添加一条 If 语句，来测试我们的响应是否已完成(意味着可获得数据)p117</p><ol start="3"><li><p>responseText属性：该属性用来取回由服务器返回的数据。</p></li><li><p>其他属性。</p></li></ol><h3 id="XMLHttpRequest对象的方法"><a href="#XMLHttpRequest对象的方法" class="headerlink" title="XMLHttpRequest对象的方法"></a>XMLHttpRequest对象的方法</h3><ol><li>open()方法：open() 有三个参数。第一个参数定义发送请求所使用的方法，第二个参数规定服务器端脚本的URL，第三个参数规定应当对请求进行异步地处理。<ul><li>它用来指定服务器上将要访问的文件，指定请求类型：GET、POST或SEND。这个方法的第三个参数用于指定请求是否以异步方式发送和处理。<br><code>xmlHttp.open(&quot;GET&quot;,&quot;test.php&quot;,true);</code></li></ul></li><li>send()方法：send() 方法将请求送往服务器。如果我们假设 HTML 文件和 PHP 文件位于相同的目录，那么代码是这样的：<code>xmlHttp.send(null);</code></li><li>其他方法。</li></ol><h3 id="Ajax编程步骤"><a href="#Ajax编程步骤" class="headerlink" title="Ajax编程步骤"></a>Ajax编程步骤</h3><ol><li><p><strong>创建XMLHttpRequest对象</strong></p><ul><li>创建XMLHttp对象语法：<code>var xmlHttp=new XMLHttpRequest();</code></li><li>如果是IE5或者IE6浏览器，则使用ActiveX对象，创建方法：<br><code>var xmlHttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</code></li><li>一般我们手写Ajax的时候，首先要判断该浏览器是否支持XMLHttpRequest对象，如果支持则创建该对象，如果不支持则创建ActiveX对象。JS代码如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一步：创建XMLHttpRequest对象</span></span><br><span class="line"><span class="keyword">var</span> xmlHttp;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;            <span class="comment">//非IE</span></span><br><span class="line">    xmlHttp = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123;       <span class="comment">//IE</span></span><br><span class="line">    xmlHttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p><strong>设置请求方式</strong></p><ul><li><p>在web开发中，请求有get和post两种，区别如下。这是W3C的解释。<br><img src="/img/posts/20190630_01.png" alt="get和post"><br>注意：GET主要用于查询，PUT、POST、DELETE用于修改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二步：设置和服务器端交互的相应参数，向路径http://localhost:8080/JsLearning3/getAjax准备发送数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">"http://localhost:8080/JsLearning3/getAjax"</span>;</span><br><span class="line">xmlHttp.open(<span class="string">"POST"</span>, url, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li><li><p>GET 还是 POST？<br>与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。然而，在以下情况中，请使用 POST 请求：</p><ol><li>无法使用缓存文件（更新服务器上的文件或数据库）</li><li>向服务器发送大量数据（POST 没有数据量限制）</li><li>发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</li></ol></li><li><p>异步 - True 或 False？</p><ul><li>AJAX 指的是异步 JavaScript 和 XML（Asynchronous JavaScript and XML）。XMLHttpRequest 对象如果要用于 AJAX 的话，其 open() 方法的 async 参数必须设置为 true：对于 web 开发人员来说，发送异步请求是一个巨大的进步。很多在服务器执行的任务都相当费时。AJAX 出现之前，这可能会引起应用程序挂起或停止。</li><li>通过 AJAX，JavaScript 无需等待服务器的响应，而是：在等待服务器响应时执行其他脚本，当响应就绪后对响应进行处理</li></ul></li></ul></li><li><p><strong>调用回调函数</strong><br>回调函数就是上述属性onreadystatechange属性，并用此创建一个匿名方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第三步：注册回调函数</span></span><br><span class="line">xmlHttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xmlHttp.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xmlHttp.status == <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> obj = <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">            obj.innerHTML = xmlHttp.responseText;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(<span class="string">"AJAX服务器返回错误！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xmlHttp.status是服务器返回的结果，其中200代表正确。404代表未找到页面，所以这里我们判断只有当xmlHttp.status等于200的时候才可以继续执行。</p><blockquote><p>AJAX状态码说明:<br>1–：请求收到，继续处理<br>2–：操作成功收到，分析、接受<br>3–：完成此请求必须进一步处理<br>4–：请求包含一个错误语法或不能完成<br>5–：服务器执行一个完全有效请求失败</p></blockquote></li><li><p><strong>发送请求</strong><br>如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定您希望发送的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第四步：设置发送请求的内容和发送报送。然后发送请求</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> params = <span class="string">"userName="</span> + <span class="built_in">document</span>.getElementsByName(<span class="string">"userName"</span>)[<span class="number">0</span>].value + <span class="string">"&amp;userPass="</span> + <span class="built_in">document</span>.getElementsByName(<span class="string">"userPass"</span>)[<span class="number">0</span>].value + <span class="string">"&amp;time="</span> + <span class="built_in">Math</span>.random();<span class="comment">// 增加time随机参数，防止读取缓存 </span></span><br><span class="line">xmlHttp.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded;charset=UTF-8"</span>); <span class="comment">// 向请求添加 HTTP 头，POST如果有数据一定加加！！！！</span></span><br><span class="line">xmlHttp.send(params);</span><br></pre></td></tr></table></figure></li></ol><h1 id="第8章-充实文档的内容"><a href="#第8章-充实文档的内容" class="headerlink" title="第8章 充实文档的内容"></a>第8章 充实文档的内容</h1><ul><li>把“不可见”变成“可见”<ul><li>如果把某个元素的display属性设置为none，这个元素仍是DOM节点树的组成部分，只是浏览器不显示它们而已。</li><li>alt属性的用途：在图片不可用（无法显示）时用一段描述文字来解释这个位置的图片。</li><li>如何把这不可见变为可见？<ol><li>得到隐藏在属性里的信息</li><li>创建标记封装这些信息</li><li>把这些标记插入到文档  </li></ol></li></ul></li><li>HTML在某些情况下会允许省略结束标签（建议不要省略）</li><li><p>在XHTML的世界里，所有的标签都必须闭合——对诸如<code>&lt;img&gt;</code>和<code>&lt;br&gt;</code>之类的孤立元素也不例外：在书写时它们必须有一个反斜线字符表示标签结束：即<code>&lt;img/&gt;</code>和<code>&lt;br/&gt;</code>这样。<br><strong>注意：为了与早期的浏览器保持兼容，应该在反斜杠字符的前面保留一个空格。</strong></p></li><li><p>书中例子：</p><ol><li>显示“缩略语列表”：<br>缩略语（<code>&lt;abbr&gt;</code>标签）<br>“定义列表”元素（<code>&lt;dl&gt;</code>元素）<br>“定义标题”（<code>&lt;dt&gt;</code>元素）<br>“定义描述”（<code>&lt;dd&gt;</code>）</li><li>显示“文献来源链接表”：<br><code>&lt;blockquote cite=&quot;https://niccce.github.io/&quot;&gt;</code>获取其中的cite属性。</li><li>显示“快捷键清单”：<br>属性accesskey，不同值对应不同的快捷键。如：<code>&lt;a href=&quot;index.html&quot; accesskey=&quot;1&quot;&gt;Home&lt;/a&gt;</code></li><li>检索和添加信息</li></ol><p>思路：</p><ol><li>获取元素集合；</li><li>遍历集合，获取元素特定属性或子元素；</li><li>将各类数据存储在数组里；</li><li>遍历数组，创建标记，为标记增添所需内容；</li><li>将标记添加到文档。</li></ol></li><li><p>for/in循环</p><ul><li>遍历关联数据时可以采用for/in循环该方式，这是由于数组的下标不再是数字，而是人为的命名。其语法如下：<code>for (variable in arry)</code></li><li>在进入第一次循环是，变量variable将被赋值为数组array的第一个元素的下标值；在进入第二次循环时，变量variable将被赋值为数组array的第二个元素的下标值；依此类推，直到遍历完数组array里面的所有元素为止。</li></ul></li></ul><h1 id="第9章-CSS-DOM"><a href="#第9章-CSS-DOM" class="headerlink" title="第9章 CSS-DOM"></a>第9章 CSS-DOM</h1><h2 id="三位一体的网页"><a href="#三位一体的网页" class="headerlink" title="三位一体的网页"></a>三位一体的网页</h2><ol><li><p><strong>结构层</strong><br>网页的结构层（structural layer）由<code>HTML</code>或XHTML之类的标记语言负责创建。</p></li><li><p><strong>表示层</strong><br>表示层（presentation layer）由<code>CSS</code>负责完成。CSS描述页面内容应该如何呈现。</p></li><li><p><strong>行为层</strong><br>行为层（behavior layer）负责内容应该如何响应事件这一问题。这是<code>JavaScript</code>语言和<code>DOM</code>主宰的领域。</p><blockquote><p>网页的表示层和行为层总是存在的，即使未明确地给出任何具体的指令也是如此。</p></blockquote></li></ol><h2 id="style属性"><a href="#style属性" class="headerlink" title="style属性"></a>style属性</h2><blockquote><ul><li><strong>文档中的每个元素都是一个对象，每个对象又有着各种各样的属性。</strong></li><li>有一些属性告诉我们元素在节点树上的位置信息。比如说，<code>parentNode</code>、<code>nextSibling</code>、<code>previousSibling</code>、<code>childNodes</code>、<code>firstChild</code>和<code>1astChild</code>这些属性，就告诉了我们文档中各节点之间关系信息。</li></ul></blockquote><ul><li>nodeName属性是一个字符串</li><li>style属性是一个对象</li><li>style对象本身是文档中的每个<strong>元素节点</strong>都具备的属性。</li></ul><blockquote><p>不仅文档里的每个元素都是一个对象，每个元素都有一个style属性，它们也是一个对象。</p></blockquote><h3 id="获取样式"><a href="#获取样式" class="headerlink" title="获取样式"></a>获取样式</h3><p><code>element.style.color</code></p><ul><li>font-family属性的获取方式与color属性略有不同<ul><li>因为“font”和“family”之间的连字符与JavaScript语言中的减法操作符相同，JavaScript会把它解释为减号。</li><li>减号和加号之类的操作符是保留字符，不允许用在函数或变量的名字里。这同时意味着它们也不能用在方法或属性的名字里（别忘了，方法和属性其实是关联在某个对象上的函数和变量）。<br><code>element.style.fontFamily</code></li><li>DOM属性fontFamily的值与CSS属性font-family的值是一样的。</li></ul></li></ul><blockquote><ul><li>不管CSS样式属性的名字里有多少个连字符，DOM一律采用驼峰命名法来表示它们。</li><li>绝大部分样式属性的返回值与它们的设置值都采用同样的计量单位。</li></ul></blockquote><h4 id="内嵌样式"><a href="#内嵌样式" class="headerlink" title="内嵌样式"></a>内嵌样式</h4><ul><li>通过style属性获取样式有很大的局限性，style属性只能返回内嵌样式（即把css style属性插入到标记里）</li><li>最好的办法是用一个外部样式表去设置样式，在开头用link元素引入。</li><li>DOM style属性不能用来检索在外部CSS文件里声明的样式，即使把样式添加在html文件的<code>&lt;head&gt;</code>中也如此。</li></ul><blockquote><p>在外部样式表里声明的样式不会进入style对象，在文档的<code>&lt;head&gt;</code>部分里声明的样式也是如此。</p></blockquote><h3 id="设置样式"><a href="#设置样式" class="headerlink" title="设置样式"></a>设置样式</h3><ul><li>许多DOM属性是只读的———我们只能用它们来获取信息，但不能用它们来设置或更新信息，但style对象的各个属性都是可读写的。<br><code>element.style.property = value</code></li><li>style对象的属性值（value）必须放在引号里，单双引号均可，若缺了引号，JavaScript会把等号右边的值解释为一个<em>变量</em>。</li></ul><h2 id="何时该用DOM脚本设置样式"><a href="#何时该用DOM脚本设置样式" class="headerlink" title="何时该用DOM脚本设置样式"></a>何时该用DOM脚本设置样式</h2><blockquote><p>就像你不应该利用DOM去创建重要的内容那样，你也不应该利用DOM为文档设置重要的样式。<br>不过，在使用CSS不方便的场合，还是可以利用DOM对文档的样式做一些小的增强。</p></blockquote><h3 id="根据元素在节点树里的位置来设置样式"><a href="#根据元素在节点树里的位置来设置样式" class="headerlink" title="根据元素在节点树里的位置来设置样式"></a>根据元素在节点树里的位置来设置样式</h3><ul><li><p>通过CSS声明样式的具体做法主要有三种</p><ol><li>为标签元素统一地声明样式</li><li>为特定class属性的所有元素统一声明样式</li><li>为独一无二的id属性的元素单独声明样式</li></ol></li><li><p>也可以为有类似属性的多个元素声明样式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input[type*=<span class="string">"test"</span>]&#123;</span><br><span class="line">  font-size:<span class="number">1.2</span>em;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在现代浏览器中，甚至可以根据元素的位置声明样式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p:first-<span class="keyword">of</span>-type&#123;</span><br><span class="line">  font-size:<span class="number">2</span>em;</span><br><span class="line">  font-weight:bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>文档中的下一个节点可以用nextSibling属性查找出来</p></li></ul><h3 id="根据某种条件反复设置某种样式"><a href="#根据某种条件反复设置某种样式" class="headerlink" title="根据某种条件反复设置某种样式"></a>根据某种条件反复设置某种样式</h3><blockquote><p>在用CSS安排你的内容时，千万不要人云亦云地认为表格都是不好的。虽然利用表格来做页面布局不是好主意，但利用表格来显示表格数据却是理所应当的。</p></blockquote><ul><li>让表格里的行更可读的常用技巧是交替改变它们的背景色，从而形成斑马线效果，使相邻的两行泾渭分明。通过分别设置奇数行和偶数行样式的办法可实现这种效果。如果浏览器支持CSS3，那就很简单，只需要如下两行样式：<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tr:nth-child(odd)   &#123; background-color:#ffc; &#125;</span><br><span class="line">tr:nth-child(even)  &#123; background-color:#fff; &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="响应事件"><a href="#响应事件" class="headerlink" title="响应事件"></a>响应事件</h3><blockquote><p>CSS提供的:hover等伪class属性允许我们根据HTML元素的状态来改变样式。DOM也可以通过omouseover等事件对HTML元素的状态变化做出响应。</p></blockquote><ul><li>需要决定是采用纯粹的CSS来解决，还是利用DOM来设置样式。你需要考虑以下因素：<ol><li>这个问题最简单的解决方案是什么；</li><li>哪种解决方案会得到更多浏览器的支持。</li></ol></li></ul><h2 id="className属性"><a href="#className属性" class="headerlink" title="className属性"></a>className属性</h2><ul><li><p>在本章前面的例子里，我们一直在使用DOM直接设置或修改样式。这种做法让“行为层”<br>干“表示层”的活，并不是理想的工作方式。如果可以在样式表里进行那些修改，那就好多了。</p></li><li><p>设置class属性：<br><code>elem.setAttribute(&quot;class&quot;,&quot;intro&quot;);</code><br><code>element.className = value</code><br>这个技巧只有一个不足：通过className属性设置某个元素的class属性时将替换（而不是<br>追加）该元素原有的class设置</p></li><li><p>可以利用字符串拼接操作，把新的class设置值追加到className属性上去<br><code>elem.className += &quot; intro&quot;;</code><br>注意，intro前一个字符是空格</p></li></ul><h3 id="对函数进行抽象"><a href="#对函数进行抽象" class="headerlink" title="对函数进行抽象"></a>对函数进行抽象</h3><blockquote><p>把一个非常具体的东西改进为一个较为通用的东西的过程叫做抽象（abstraction）。</p></blockquote><h1 id="第10章-用JavaScript实现动画效果"><a href="#第10章-用JavaScript实现动画效果" class="headerlink" title="第10章 用JavaScript实现动画效果"></a>第10章 用JavaScript实现动画效果</h1><h2 id="动画基础知识"><a href="#动画基础知识" class="headerlink" title="动画基础知识"></a>动画基础知识</h2><ul><li>position属性的合法值有static、fixed、relative和absolute四种。static是position属性的默认值，意思是有关元素将按照它们在标记里出现的先后顺序出现在浏览器窗口里。</li><li><p>JavaScript函数<code>setTimeout</code>能够让某个函数在经过一段预定的时间之后才开始执行。</p><ul><li>这个函数带有<strong>两个参数</strong>：第一个参数通常是一个<strong>字符串</strong>，其内容是将要执行的那个函数的名字；第二个参数是一个<strong>数值</strong>，它以<em>毫秒</em>为单位设定了需要经过多长时间后才开始执行第一个参数所给出的函数<br><code>setTimeout(&quot;function&quot;,interval)</code><br>在绝大多数时候，最好把这个函数调用赋值给一个变量：<br><code>variable =setTimeout(&quot;function&quot;,interval)</code></li></ul><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">movement = setTimeout(<span class="string">"moveMessage()"</span>,<span class="number">5000</span>);</span><br><span class="line"><span class="comment">//此处movement没有var，是全局变量</span></span><br></pre></td></tr></table></figure></li><li><p><code>clearTimeout</code>函数可以取消“等待执行”队列里的某个函数。</p><ul><li>这个函数需要一个参数：保存着某个setTimeout函数调用返回值的变量<br><code>clearTimeout(variable)</code></li></ul></li><li><p><code>parselnt</code>可以把字符串里的数值信息提取出来。</p><ul><li>如果把一个以数字开头的字符串传递给这个函数，它将返回一个数值：<br><code>parseInt(string)</code><br>例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parstInt(<span class="string">"39 steps"</span>);<span class="comment">//39</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>parseFloat</code>函数可以提取的是带小数点的数值（浮点数）<br><code>parseFloat(string)</code></p></li></ul><h2 id="实用的动画"><a href="#实用的动画" class="headerlink" title="实用的动画"></a>实用的动画</h2><ul><li><blockquote><p>CSS的<strong>overflow属性</strong>用来处理一个元素的尺寸超出其容器尺寸的情况。</p></blockquote><p>当一个元素包含的内容超出自身的大小时，就会发生内容溢出，这种情况，你可以对内容进行“裁剪”，只让一部分内容可见。你还可以通过overflow属性告诉浏览器是否需要显示滚动条，以便让用户能够看到内容的其余部分。<br>overflow属性的可取值有4种：visible、hidden、scro11和auto。</p><ol><li>visible：不裁剪溢出的内容。<br>浏览器将把溢出的内容呈现在其容器元素的显示区域以外，全部内容都可见。</li><li>hidden：隐藏溢出的内容。<br>内容只显示在其容器元素的显示区域里，这意味着只有一部分内容可见。</li><li>scroll：类似于hidien，浏览器将对溢出的内容进行隐藏，但<strong>显示一个滚动条</strong>以便让用户能够滚动看到内容的其他部分。</li><li>auto：类似于scrol1，但浏览器只在确实发生溢出时才显示滚动条。如果内容没有溢出，就不显示滚动条。</li></ol></li><li>把position设置为relative可以让<em>子元素</em>使用绝对位置。通过使用值relative，子元素的（0，0）坐标将固定在设置了relative的父元素的左上角。</li><li>JavaScript允许我们为元素创建属性<br><code>element.property = value</code></li></ul><ul><li>ceil方法：返回不小于某数值的一个整数。<code>Math.ceil(number)</code></li><li>floor方法：返回不大于某数值的一个整数。<code>Math.floor(number)</code></li><li>round方法：将任意浮点数舍入为与之最接近的整数<code>Math.round(number)</code></li></ul><h1 id="第11章-HTML5"><a href="#第11章-HTML5" class="headerlink" title="第11章 HTML5"></a>第11章 HTML5</h1><h2 id="HTML5简介"><a href="#HTML5简介" class="headerlink" title="HTML5简介"></a>HTML5简介</h2><blockquote><p>HTML5是HTML语言当前及未来的新标准。</p></blockquote><ol><li>在结构层中，HTML5添加了新的标记元素，如<code>&lt;section&gt;</code>、<code>&lt;article&gt;</code>、<code>&lt;header&gt;</code>和<code>&lt;footer&gt;</code>。想知道所有新标记可查看<a href="http://www.w3.org/TR/html5/" target="_blank" rel="noopener">规范</a><ul><li>HTML5还提供了更多交互及媒体元素，例如<code>&lt;canvas&gt;</code>、<code>&lt;audio&gt;</code>和<code>&lt;video&gt;</code>。</li><li>表单得到了加强，新增了颜色拾取器、数据选择器、滑动条和进度条。其中很多新元素都还带有自己的JavaScript和DOM API。</li></ul></li><li>在行为层中，HTML5规定了DOM中每个新元素的交互方式，以及新的API。</li><li>在表现层中，CSS3的多个模块囊括了高级选择器、渐变、变换，还有动画。</li></ol><blockquote><p><a href="http://www.modemizr.com/" target="_blank" rel="noopener">Modernizr</a>是一个开源的JavaScript库，利用它的富特性检测功能，可以对HTML5文档进行更好的控制。Modernizr不会给你添加浏览器不支持的特性，比如，在IE6中无法使用本地存储.</p></blockquote><ul><li>Modernizr能做的是为你提供一些不同的CSS类名以及特性检测（feature-detection）属性。</li><li>Modernizr脚本要放在文档开头的<code>&lt;head&gt;</code>里，因为这样才可以在加载其他标记之前先加载它，以便它在文档呈现之前能够创建好新的HTML5元素。</li></ul><h3 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h3><ul><li><p>HTML5的<code>&lt;canvas&gt;</code>元素可以动态创建和操作图形图像。<br>在网页中支起一块“画布”：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=<span class="string">"draw-in-me"</span> width=<span class="string">"120"</span> height=<span class="string">"40"</span>&gt;</span><br><span class="line">  &lt;p&gt;Powerd By HTML5 canvas&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>canvas&gt;</span><br></pre></td></tr></table></figure></li><li><p>所谓绘图空间，在这里就是一个平面二维的绘图表面，其原点（0，0）位于<code>&lt;canvas&gt;</code>的左上角。在这个绘图表面的坐标系里，越往<strong>右</strong>x的值越大，右往<strong>下</strong>y的值越大。</p></li><li>书中例子：用<code>&lt;canvas&gt;</code>对象在浏览器中把一幅彩色图片变成灰度图片<ul><li>为什么使用<code>&lt;canvas&gt;</code>而不是队长图片呢？<br><strong>只有在基于用户操作实现交互时，使用<code>canvas</code>的优势才会显现出来</strong></li></ul></li></ul><h3 id="音频和视频"><a href="#音频和视频" class="headerlink" title="音频和视频"></a>音频和视频</h3><ul><li>插件是在一个封闭的环境中运行的，通过脚本无法修改或者操作视频内容。如果插件没有提供API，插件运行环境无异于文档中的一个独立王国。</li></ul><blockquote><p>HTML5的<code>&lt;video&gt;</code>元素为在文档中嵌入影片以及与影片交互定义了一种标准方式</p></blockquote>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;video src=<span class="string">"movie.mp4"</span>&gt;</span><br><span class="line">  &lt;--不支持原生视频时的替代内容-）</span><br><span class="line">&lt;a href=<span class="string">"movie.mp4"</span>&gt;Download movie.mp4&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>video&gt;</span><br></pre></td></tr></table></figure><p>  这里嵌入了一段mp4视频，并给出了浏览器不支持video时的替代下载链接。</p><blockquote><p><code>&lt;audio&gt;</code>和<code>&lt;video&gt;</code>这两个标签都很简单，也都有相应的属性用于显示播放控件或更改播放设置，但是它并未说明支持哪些视频格式。</p></blockquote><ul><li>像movie.mp4这样的视频，其实是一个包含很多东西的容器。扩展名mp4表示视频是使用基于苹果QuickTime技术的MPEG4打包而成的。这个容器规定了不同的音频和视频轨道在文件中的位置，以及其他与回放相关的特性。</li><li>在每个影片容器中，音频和视频轨道都使用不同的编解码器来编码。编解码器决定了浏览器在播放时应该如何解码音频和视频。编解码器的核心就是一个算法，用于压缩和存储视频，以减少原始文件的大小，同时可能会也可能不会损失品质。</li><li>眼下看来，为了保证每个人都能看到视频，必须制作多种格式的视频并在<code>&lt;canvas&gt;</code>元素中包含多个来源。</li><li>为了确保HTML5的最大兼容性，至少要包含下列三个版本：<ul><li>基于H.264和ACC的MP4</li><li>WebM（VP8+Vorbis）</li><li>基于Theora视频和Vorbis音频的Ogg文件</li></ul></li></ul><blockquote><p>浏览器在显示<code>&lt;video&gt;</code>元素时，会为其添加一些与浏览器样式统一的标准播放控件。</p></blockquote><ul><li><p>要想自定义这些控件的外观，或者添加新的控件，可以通过一些DOM属性来实现，主要包括：</p><ol><li>currentTime，返回当前播放的位置，以秒表示；</li><li>duration，返回媒体的总时长，以秒表示，对于流媒体返回无穷大；</li><li>paused，表示媒体是否处于暂停状态。</li></ol></li><li><p>还有一些与特定媒体相关的事件，可以用来触发你的脚本。主要事件有：</p><ol><li>play，在媒体播放开始时发生；</li><li>pause，在媒体暂停时发生；</li><li>loadeddata，在媒体可以从当前播放位置开始播放时发生；</li><li>ended，在媒体已播放完成而停止时发生。</li></ol></li><li>不管创建什么控件，都别忘了在<code>&lt;video&gt;</code>元素中添加contro1属性<br><code>&lt;video src=&quot;movie.ogv&quot; controls&gt;</code><br>这行代码会呈现出一个类似Chrome浏览器中所示的常见的播放控制界面，但其中的控件可以通过脚本来移走。</li></ul><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><blockquote><p>HTML5给我们带来了很多新表单元素、新输入控件类型和新的属性。</p></blockquote><ul><li>新的输入控件类型（type）：<ol><li>email，用于输入电子邮件地址；</li><li>url，用于输入URL；</li><li>date，用于输入日期和时间；</li><li>number，用于输入数值；</li><li>range，用于生成滑动条；</li><li>search，用于搜索框；</li><li>tel，用于输入电话号码；</li><li>color，用于选择颜色。</li></ol></li><li><p>新的属性：</p><ol><li>autocomplete，用于为文本（text）输入框添加一组建议的输入项；</li><li>autofocus，用于让表单元素自动获得焦点；</li><li>form，用于对<code>&lt;form&gt;</code>标签外部的表单元素分组；</li><li>min、max和step，用在范围（range）和数值（number）输入框中；</li><li>pattern，用于定义一个正则表达式，以便验证输入的值；</li><li>placeholder，用于在文本输入框中显示临时性的提示信息；</li><li>required，表示必填。</li></ol></li><li><p>旧浏览器会将新类型默认为text，并呈现出标准的文本输入框。</p></li><li><p>用Modernizr库，可以进行兼容性检测。</p><ol><li><p>比如，要检查浏览器是否支持某个输入类型的控件，可以使用inputtypes.type属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!Modernizr.inputtypes.data)&#123;</span><br><span class="line">  <span class="comment">//生成日期选择器的脚本</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>要检查某个属性，则可以使用input.attribute属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!Modernizr.input.placeholder)&#123;</span><br><span class="line">  <span class="comment">//生成占位符提示信息的脚本</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="HTML5还有其他特性吗？"><a href="#HTML5还有其他特性吗？" class="headerlink" title="HTML5还有其他特性吗？"></a>HTML5还有其他特性吗？</h3><ol><li>使用localStorage和sessionStorage在客户端存储大型和复杂数据集的更有效<a href="http://dev.w3.org/html5/webstorage" target="_blank" rel="noopener">方案</a></li><li>使用<a href="http:/dev.w3.ong/html5/websockets/" target="_blank" rel="noopener">WebSocket</a>与服务器端脚本进行开放的双向通信</li><li>使用<a href="http://www.whatwg.org/specs/web-workers/current-work/" target="_blank" rel="noopener">Web Worker</a>在后台执行JavaScript</li><li>标准化的<a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/dnd.html#dnd" target="_blank" rel="noopener">拖放实现</a></li><li>在浏览器中实现<a href="http://www.w3.org/TR/geolocation-API/" target="_blank" rel="noopener">地理位置服务</a></li></ol><h1 id="第12章-综合示例"><a href="#第12章-综合示例" class="headerlink" title="第12章 综合示例"></a>第12章 综合示例</h1><p><a href="https://niccce.github.io/JavaScript-Learning/blog_example/20190630_chapter12/index.html">示例</a></p><h1 id="附录-JavaScript库"><a href="#附录-JavaScript库" class="headerlink" title="附录 JavaScript库"></a>附录 JavaScript库</h1>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇总 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>头脑风暴小程序-开发总结</title>
      <link href="/2019/06/01/Brainstorming_miniprogram-Development_Summary/"/>
      <url>/2019/06/01/Brainstorming_miniprogram-Development_Summary/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="2019高校微信小程序应用开发赛"><a href="#2019高校微信小程序应用开发赛" class="headerlink" title="2019高校微信小程序应用开发赛"></a>2019高校微信小程序应用开发赛</h3><p>&emsp;&emsp;今年3月5号，2019高校微信小程序应用开发赛正式启动了，当时已步入大三下学期的我们，都开始感受到了不止一点的就业压力，感觉开发经验不足为大多数在校学生找实习路上的一个坎，于是身边的同学都纷纷加入到了各种专业学术竞赛的参赛大军，这不仅能增加个人实践经历，还能为自己的简历增添一笔，当然我也不例外。</p><h3 id="拖延"><a href="#拖延" class="headerlink" title="拖延"></a>拖延</h3><p>&emsp;&emsp;这个比赛明明三月已经开始，但是前期因为没能找齐一个完整的制作团队，队伍里只有我和一位和我一样走前端的舍友，而自己觉得不错的走后端的同学又已经和别人组了队……由于缺乏负责后台的队员，我们两个也没有想好题，专业的课程又比较多，就一直没开始，这个状况一直持续到了3月下旬。<br>&emsp;&emsp;3月23号，一位工业设计专业的15级师兄得知了这个比赛，找到了我舍友，问她还缺不缺成员，师兄说他不懂开发，但是他可以在产品定位等方面给我们一些相关建议，舍友询问了我的意见。遇见这么热心的师兄，在大四这个赶毕设的节点还这么有热情去参与这些，我当然是十分欢迎的啦！<br>&emsp;&emsp;后来，我们有时间就去学校的咖啡吧一起讨论定题的事情，后面会大概提到。但是很不幸的，4月中我因为个人原因住院了，学校那边请了两个星期的假……住院期间我也有和舍友在讨论这个比赛的选题的事情，这段时间她有和师兄讨论过几个题，也询问了我的建议。舍友当时对小程序的了解程度也未及我，开发缺了主力，小程序的开发便一直被拖延了，一直等到了5月多才正式步入开发阶段。</p><h3 id="写这篇博客原因"><a href="#写这篇博客原因" class="headerlink" title="写这篇博客原因"></a>写这篇博客原因</h3><p>&emsp;&emsp;五月用了大概三个星期的时间，开发了一个头脑风暴微信小程序，小程序的整体基本框架的搭建和大部分工作，基本都由我一个人撑起来的，也不是说辛苦，但是就是有点感到可惜。因为在五月下旬，好多课程的课设与作业都扎堆的要汇报或者提交，赶作业都来不及，舍友去撑我们的组队作业，而我撑着我们这个用来投比赛的小程序，因为前期拖延与后面开发只有我一个，十分缓慢，这个作品最终提交上去的，并不是一个很完善的版本，昨天算是一个节点吧，5.31晚上九点小程序截止提交了，也算是为这个小程序画了一个小分号。<br>&emsp;&emsp;这次开发在有些方面感受比较深刻，便希望记下来，作为一个总结，也敦促自己不断学习！</p><hr><h2 id="定题"><a href="#定题" class="headerlink" title="定题"></a>定题</h2><p>&emsp;&emsp;三月份时，我和舍友都没有想好比较好的选题，后来我们想到了我们上学期交互设计课程的大作业。于是我们打算将之前做过的一个“及时帮助人平台”的交互设计作品中的一个小部分“街边商店作为失物招领点”的相关设计用小程序实现。<br>&emsp;&emsp;后来师兄加入了之后，我们告诉了他我们的想法，但是他觉得这个不太好。这位师兄校招去了金山的产品经理岗位实习，他对产品的各种都比我们熟悉，这方面的经验也比我们丰富，那我们当然就还是会比较重视他的意见和建议。我们一起讨论过好几个题，最后终于在4.23定下了这个在线协作的头脑风暴。</p><hr><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>&emsp;&emsp;五月真的是黑色五月，作业都扎堆得把人压得怪累的。等到师兄出了初步的设计稿后，五月初正式进入了开发阶段。<br>&emsp;&emsp;这次小程序开发，因为缺少后端成员，我们也对数据库不太了解，因此我们选用了微信提供的云开发服务。</p><blockquote><p>&emsp;&emsp;开发者可以使用云开发开发微信小程序、小游戏，无需搭建服务器，即可使用云端能力。<br>&emsp;&emsp;云开发为开发者提供完整的原生云端支持和微信服务支持，弱化后端和运维概念，无需搭建服务器，使用平台提供的 API 进行核心业务开发，即可实现快速上线和迭代，同时这一能力，同开发者已经使用的云服务相互兼容，并不互斥。</p></blockquote><h3 id="界面设计"><a href="#界面设计" class="headerlink" title="界面设计"></a>界面设计</h3><p><img src="/img/posts/20190601_01.png" alt="首页的第一版设计效果"><br>我们觉得颜色太亮眼了，后来就改了<br><img src="/img/posts/20190601_02.png" alt="首页的第二版设计效果"><br><img src="/img/posts/20190601_03.png" alt="UI设计"></p><hr><h3 id="技术方案"><a href="#技术方案" class="headerlink" title="技术方案"></a>技术方案</h3><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><p>&emsp;&emsp;使用微信小程序开发，应用小程序提供的原生组件，以及自定义组件。</p><h4 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h4><p>&emsp;&emsp;使用云开发为我们提供的原生云端支持和微信服务支持。<br>&emsp;&emsp;云开发服务弱化后端和运维概念，无需搭建服务器，为我们快速开发迭代上线提供了可能。同时，我们使用平台提供的小程序端及服务端 API 进行小程序与数据库的数据交互，以实现核心功能。 </p><hr><h3 id="功能方案"><a href="#功能方案" class="headerlink" title="功能方案"></a>功能方案</h3><p>&emsp;&emsp;在云开发提供的JSON数据库中，我们建立多个集合来管理相应数据。</p><h4 id="新建主题"><a href="#新建主题" class="headerlink" title="新建主题"></a>新建主题</h4><p>&emsp;&emsp;在相应的主题表中新建记录，同时将该记录的“_id”添加到用户与主题的关系表（themeAndPerson）中，首页通过查询用户与主题的关系表（themeAndPerson）与主题表，在首页渲染出该用户参与的所有讨论主题。</p><h4 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h4><p>&emsp;&emsp;于主题详情页点击邀请好友的按钮，调用onShareAppMessage方法将本主题讨论页分享给好友，好友点击邀请链接后，将该讨论主题的“_id”添加进用户与主题的关系表（themeAndPerson）中相应位置，记录该用户被邀请进了本主题。</p><h4 id="添加灵感"><a href="#添加灵感" class="headerlink" title="添加灵感"></a>添加灵感</h4><p>&emsp;&emsp;在主题的详情页中进行头脑风暴，用户点击添加灵感，灵感将更新至主题表中的该条主题记录的ideas字段中。</p><h4 id="高效筛选"><a href="#高效筛选" class="headerlink" title="高效筛选"></a>高效筛选</h4><p>&emsp;&emsp;每条灵感都记录有相应的支持数，小程序端从数据库获取到所有灵感的支持数后进行灵感排序，支持数高的灵感将排在上方，最后视图层使用列表渲染将灵感显示到页面。</p><h4 id="生成思维导图"><a href="#生成思维导图" class="headerlink" title="生成思维导图"></a>生成思维导图</h4><p>&emsp;&emsp;从数据库获取主题与灵感的层级关系的相关数据，用canvas绘制思维导图。<br>&emsp;&emsp;此功能因时间关系尚未完成，后序将会持续完善。</p><hr><h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><p>&emsp;&emsp;开发中也遇到了很多问题，不过主要都是因为这是第一次开发小程序，对小程序的一些API和组件不太熟悉，但这类问题都基本能通过查询资料得到解决。</p><p>&emsp;&emsp;更多的问题，都是出现在数据储存那方面的，这是我第一次前后端都自己做，当然了，云开发功能已经为我们减轻了很多的工作，但是因为没有后台开发的经验，这个学期也才刚接触数据库，我和我舍友对后台用于储存的表的设计都不太了解，因此也产生了很多问题。</p><ul><li>这里记录一些开发时的一些卡得比较久的需求吧：<ul><li>显示主题详情</li></ul><ul><li>显示灵感详情<br>将每条灵感储存在该主题或次级主题那条记录的字段内。</li><li>显示主题内二级主题的层级关系<br>在新建主题、二级主题、三级主题时就查询好相关参数，一级一级地保存在主题字段内，页面渲染时直接读取相关记录的相应字段进行显示。</li><li>邀请好友加入主题<br>调用onShareAppMessage方法将本主题讨论页分享给好友，传递主题的id号给好友，好友点击链接后把好友的openid存进本主题的参与人员的字段内。</li><li>对灵感点赞进行筛选（这个还有bug没解决）<br>这个在灵感列表页可以正常筛选，但是到了灵感详情页就出问题了，因为所用方法可能不太合理，不过其实只要做到“用户表态了一次之后把按钮键禁用”，这个问题就能解决了。<br>但是因为还不知道在数据库那边该如何记录每个用户跟每条灵感之间的关系，所以这个也没找到合适的解决方法。</li><li>表的设计<br>这是一个很大的问题，关乎到功能的实现，开发到最后一个星期，舍友放下了作业加入到开发中，一些我还没解决的问题，都牵涉到了数据的储存，部分需求如何实现，没有相关的实践经验，我们都是去问走后端的同学，然后讨论了好几次表的创建，还有记录和字段的设计，讨论出了我听着觉得可行的方案，就继续开发了。</li></ul></li></ul><p>&emsp;&emsp;整个开发过程真的十分不容易，数据存储是问题的主要部分。</p><hr><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>&emsp;&emsp;不知不觉，就到了5.31，即使功能还没开发完，为了不浪费大半个月的汗水，在提交截止的最后一天，整理好了文档，剪辑好了演示视频，最后也便交上去了。<br>&emsp;&emsp;5.31晚上支部开了欢送师兄师姐的组织生活会，提交的事情都交给舍友了。<br>&emsp;&emsp;作品提交后不久，得知有一组同学因为成员都不知道5.31晚上九点截止提交，最后超时了一分钟，没能提交成功。他们的作品主题是“梦”，我看过觉得也十分不错，没能交上去可惜了。<br>&emsp;&emsp;后来也看到了我们班的一组，作品跟我们的想法极为相似，他们的界面超级好看的！但是我们没有UI设计师，也就只能这样了。他们的演示视频还拍摄了一个小剧场，将产品的应用场景拍进去了，顿时感觉我们这个要凉了。。。。。</p><h2 id="完善"><a href="#完善" class="headerlink" title="完善"></a>完善</h2><p>&emsp;&emsp;完善过后继续补充</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;那位做产品的师兄看到我们提交版的作品后，觉得很开心，因为我们一起将一个小程序一步一步地做了出来。但是我自己对这次这个作品的开发其实有很多不满意的地方。<br>&emsp;&emsp;首先需求没有全部实现就已经很让我难受了。其次没能找到合适的后台队员也是十分可惜的一件事，至今我都还没有与后端一起开发的经验呢，让人难受。<br>&emsp;&emsp;还是要说说这次这个项目总体情况的一个总结。</p><ul><li>数据库设计方面<ul><li>在开发过程中，数据存储的表的设计真的是一个严重影响到我们需求实现的一个点。数据存储和读取在这个小程序中起到了至关重要的作用，而我们都对那个不太熟，我还没有仔细地去了解那方面的内容就着急着手开发了，这也对后面开发到一半后的进度产生了影响。如果因为我前期数据库的设计不合理，分分钟要重构代码。。。幸好后面和舍友讨论某些需求的解决方案后，我本来设计好的表不怎么需要改，只是要增添表，还有增添一些帮助查询的联系表。</li><li>感觉以后在开发前，一点要先讨论好需求的解决方案，将所有需求的解决方案都有大致的了解和把握之后再着手开发，这样应该会更好，而不要像这次，着急开发，开发到一半，发现自己这样存数据的话就不知道怎么实现接下来要做的功能了。</li></ul></li><li>开发进度方面<ul><li>这次小程序制作过程中，我们专业的作业也多，但我们开发时也没有一个主要把握进度的人，这也是一个造成我们开发缓慢的一个原因。可能因为我们几人都比较佛？？</li></ul></li><li><p>个人原因</p><ul><li>因为4月多那次住院，我最近几月都要频繁去不同科室复诊，那次住院也改变了我很多，让我真正意识到熬夜对身体造成的影响，现在于我来说，没有什么比身体更重要了，遇到什么不顺心的事情，情绪波动也没有以前大了，乐观面对，都会变好的啦。舍友也很体谅我了，因为台式电脑的问题，回家了的我就没法继续开发小程序了，这让时间变得更少，但是这没办法，身体重要。</li></ul><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>&emsp;&emsp;加油呀，希望下一次的项目开发能做得更好！</p></li></ul>]]></content>
      
      <categories>
          
          <category> 汇总整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇总 </tag>
            
            <tag> 学习 </tag>
            
            <tag> 学习体会 </tag>
            
            <tag> 自我思考 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记录一些以后可能会查看的链接</title>
      <link href="/2018/09/05/mark_some_links/"/>
      <url>/2018/09/05/mark_some_links/</url>
      <content type="html"><![CDATA[<h2 id="前端学习资源"><a href="#前端学习资源" class="headerlink" title="前端学习资源"></a>前端学习资源</h2><ul><li><a href="https://github.com/helloqingfeng/Awsome-Front-End-learning-resource" target="_blank" rel="noopener">Awsome Front End learning resource</a></li><li><a href="https://wangdoc.com/javascript/" target="_blank" rel="noopener">《javascript标准参考教程》 - 阮一峰</a></li><li><a href="https://github.com/FrankFang/best-chinese-front-end-blogs" target="_blank" rel="noopener">优质的中文前端博客</a></li></ul><h2 id="科普"><a href="#科普" class="headerlink" title="科普"></a>科普</h2><ul><li><a href="https://blog.csdn.net/qq_37696120/article/details/80507178" target="_blank" rel="noopener">npm 是干什么的</a><br>看过这个觉得比较通俗易懂</li></ul><h2 id="语法-命令查询"><a href="#语法-命令查询" class="headerlink" title="语法/命令查询"></a>语法/命令查询</h2><ul><li><a href="../../../08/31/Hello-my-blog/index.html#关于Markdown">Markdown</a></li><li><a href="http://www.cnblogs.com/chenwolong/p/GIT.html" target="_blank" rel="noopener">GIT 常用命令</a></li></ul><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h4 id="排序筛选…"><a href="#排序筛选…" class="headerlink" title="排序筛选…"></a>排序筛选…</h4><ul><li><a href="https://github.com/patrickkunka/mixitup" target="_blank" rel="noopener">mixitup</a></li><li><a href="https://github.com/metafizzy/isotope" target="_blank" rel="noopener">isotope</a></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="Hexo主题"><a href="#Hexo主题" class="headerlink" title="Hexo主题"></a>Hexo主题</h3><ul><li><a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="noopener">material</a></li><li><a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="noopener">indigo</a></li><li><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a></li></ul><h3 id="两个学习CSS小游戏"><a href="#两个学习CSS小游戏" class="headerlink" title="两个学习CSS小游戏"></a>两个学习CSS小游戏</h3><ul><li><a href="https://github.com/thomaspark/flexboxfroggy" target="_blank" rel="noopener">flexboxfroggy</a></li><li><a href="https://github.com/thomaspark/gridgarden" target="_blank" rel="noopener">gridgarden</a></li></ul><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul><li><a href="https://blog.csdn.net/chueia/article/details/70159592" target="_blank" rel="noopener">利用nodeJs anywhere搭建本地服务器环境</a></li></ul>]]></content>
      
      <categories>
          
          <category> 汇总整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mark </tag>
            
            <tag> 汇总 </tag>
            
            <tag> links </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello my blog</title>
      <link href="/2018/08/31/Hello-my-blog/"/>
      <url>/2018/08/31/Hello-my-blog/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;知道Hexo很久了，半个月前更换<a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="noopener">Material</a>主题生成静态文件时总是遇到问题没有成功，就一直拖到了今天，换了个旧版本总算是成功了，自己并不是经常写博客的人，希望搭个博客之后能经常更新吧哈哈哈哈哈哈。<br><br><br>&emsp;&emsp;我深知自己很多技术都只是入门级别，希望自己能在学习路上永不停歇，搭个blog就偶尔写写学习总结，希望自己在技术的路上不断提升，写写生活体会，感受不同时间段里自己的变化，然后顺便安利安利林先生吧2333333333<br><br><br>&emsp;&emsp;加油！生命不息，学习不止！</p><hr><h3 id="关于Markdown"><a href="#关于Markdown" class="headerlink" title="关于Markdown"></a>关于Markdown</h3><ul><li><a href="https://github.com/guodongxiaren/README" target="_blank" rel="noopener">README文件语法解读</a></li><li><a href="https://www.cnblogs.com/liugang-vip/p/6337580.html" target="_blank" rel="noopener">markdown文件的基本常用编写语法（图文并茂）</a></li><li><a href="http://note.youdao.com/iyoudao/?p=2411" target="_blank" rel="noopener">【简明版】有道云笔记Markdown指南</a></li><li><a href="http://note.youdao.com/iyoudao/?p=2445" target="_blank" rel="noopener">【进阶版】有道云笔记Markdown指南</a></li><li><a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown 语法说明 (简体中文版) </a></li></ul><hr><h3 id="一些遇到的问题"><a href="#一些遇到的问题" class="headerlink" title="一些遇到的问题"></a>一些遇到的问题</h3><h4 id="localhost-4000无法访问"><a href="#localhost-4000无法访问" class="headerlink" title="localhost:4000无法访问"></a>localhost:4000无法访问</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>执行后提示成功，但是打开<code>http://localhost:4000/</code>却发现无法访问，后来通过上网搜索，刚好碰到一个与我的情况一样的朋友，遇到这个情况是因为电脑上正在运行着“福昕阅读器”。</p><ul><li>解决方法：在任务管理器中找到 FoxitProtect.exe ，将进程关闭。</li></ul><p>如果不是上面这个原因，但出现端口被占用的情况，可以尝试以下方法（我还没试过）：</p><ul><li>在_config.yml内加上如下代码更改hexo-server运行时的端口号</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 4001</span><br><span class="line">  compress: true</span><br><span class="line">  header: true</span><br></pre></td></tr></table></figure><hr><h3 id="关于博客搭建"><a href="#关于博客搭建" class="headerlink" title="关于博客搭建"></a>关于博客搭建</h3><h4 id="可优化项"><a href="#可优化项" class="headerlink" title="可优化项"></a>可优化项</h4><ul><li style="list-style: none"><input type="checkbox" checked> 开启本地搜索功能</li><li style="list-style: none"><input type="checkbox" checked> 添加标签云、关于我、友情链接等页面<ul><li style="list-style: none"><input type="checkbox" checked> 在侧边栏添加自定义页面</li></ul></li><li style="list-style: none"><input type="checkbox" checked> 给每篇博文生成二维码<ul><li style="list-style: none"><input type="checkbox" checked> 二维码未能正常识别，原因待查</li></ul></li><li style="list-style: none"><input type="checkbox"> 添加评论系统</li><li style="list-style: none"><input type="checkbox" checked> 隐藏网页底部powered By Hexo<ul><li style="list-style: none"><input type="checkbox" checked> 开发不易，改成功后又改回来了</li></ul></li><li style="list-style: none"><input type="checkbox"> 添加微信支付宝打赏功能</li><li style="list-style: none"><input type="checkbox" checked> 在文章底部增加版权信息</li><li style="list-style: none"><input type="checkbox" checked> 添加更新时间、修改时间显示样式</li><li style="list-style: none"><input type="checkbox"> 添加动态背景</li><li style="list-style: none"><input type="checkbox"> 实现点击出现桃心效果</li><li style="list-style: none"><input type="checkbox"> 点击爆炸效果</li><li style="list-style: none"><input type="checkbox"> 博文压缩</li><li style="list-style: none"><input type="checkbox"> 在右上角或者左上角实现fork me on github</li><li style="list-style: none"><input type="checkbox" checked> 修改<code>代码块自定义样式</code></li><li style="list-style: none"><input type="checkbox"> 侧边栏社交小图标设置</li><li style="list-style: none"><input type="checkbox"> 给网站加访客量/给文章加上访问量</li><li style="list-style: none"><input type="checkbox"> 添加热度</li><li style="list-style: none"><input type="checkbox"> 网站底部字数统计</li><li style="list-style: none"><input type="checkbox"> 设置网站的图标Favicon</li><li style="list-style: none"><input type="checkbox"> 实现统计功能</li><li style="list-style: none"><input type="checkbox"> 自定义鼠标样式</li><li style="list-style: none"><input type="checkbox"> 为博客加上萌萌的宠物</li><li style="list-style: none"><input type="checkbox"> DaoVoice 在线联系</li></ul><h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5><ul><li><del><a href="https://crowncj.com/20170616.html" target="_blank" rel="noopener">Hexo Material 主题博客搭建以及优化心得</a></del><br>最近发现<a href="https://github.com/crown3" target="_blank" rel="noopener">作者</a>的博客迁移了，此处为<a href="https://blog.crown.im/posts/hexo-material-blog/" target="_blank" rel="noopener">新链接</a>(更新于2019.03.09)<br>搭建的时候很多地方都参考了这位大神的这篇博文</li><li><a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">GitHub+Hexo 搭建个人网站详细教程</a><br>这篇主要讲的是next主题，但是有些部分的介绍也可以参考</li><li><a href="https://cn.snatix.com/2017/01/14/008-customize-hexo/" target="_blank" rel="noopener">重启Hexo(2)-Material深度探索</a></li><li><a href="https://cn.snatix.com/2017/02/13/011-hexo-blog-donate-plugin/" target="_blank" rel="noopener">重启Hexo(3)-添加打赏功能</a></li></ul><hr><h4 id="下面列一些添加个性化配置时的操作"><a href="#下面列一些添加个性化配置时的操作" class="headerlink" title="下面列一些添加个性化配置时的操作"></a>下面列一些添加个性化配置时的操作</h4><p>因为第一次接触Hexo，很多东西都不懂，也是第一次接触ejs，所以刚开始加个性化配置经常遇到问题，就想记录一下成功的操作。</p><ol><li><h5 id="添加标签云、关于我、友情链接等页面"><a href="#添加标签云、关于我、友情链接等页面" class="headerlink" title="添加标签云、关于我、友情链接等页面"></a>添加标签云、关于我、友情链接等页面</h5></li></ol><p>一开始，我先按照别人的分享一步一步去新增标签云、关于我、友情链接等页面，到后面，我想自己再加一个作品集的页面，就试着研究了一下，最后也成功了，后面会说到。</p><ul><li><p>在主题的配置文件<code>_config.yml</code>中找到<code>Pages</code>，加入或修改相关内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">标签:</span><br><span class="line">    link: &quot;/tags&quot;</span><br><span class="line">    icon: local_offer</span><br><span class="line">    divider: false</span><br><span class="line">Timeline:</span><br><span class="line">    link: &quot;/timeline&quot;</span><br><span class="line">    icon: send</span><br><span class="line">    divider: false</span><br><span class="line">友情链接:</span><br><span class="line">    link: &quot;/links&quot;</span><br><span class="line">    icon: person_add</span><br><span class="line">    divider: false</span><br><span class="line">About Me:</span><br><span class="line">    link: &quot;/aboutMe&quot;</span><br><span class="line">    icon: account_box</span><br><span class="line">    divider: false</span><br></pre></td></tr></table></figure></li><li><p>创建标签云/Timeline/友情链接/关于我 页面</p><ul><li>在hexo目录（目录内有_posts、_data等文件夹）下的<code>source</code>文件夹内创建名为<code>tags</code>、<code>timeline</code>、<code>links</code>、<code>aboutMe</code>的文件夹</li><li>在<code>tags</code>、<code>timeline</code>、<code>links</code>、<code>aboutMe</code>的文件夹内均建一个名为<code>index.md</code>的Markdown文件</li><li>分别修改每个Markdown文件的内容为</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 本站标签</span><br><span class="line">date:</span><br><span class="line">layout: tags</span><br><span class="line">---</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: timeline</span><br><span class="line">date:</span><br><span class="line">layout: timeline</span><br><span class="line">---</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 友情链接</span><br><span class="line">date:</span><br><span class="line">layout: links</span><br><span class="line">---</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: About me</span><br><span class="line">date: 2018-09-01</span><br><span class="line">layout: about</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>这里要注意的是<code>title</code>(对应的链接名称) 可修改，标签云/Timeline/友情链接的markdown文件中的<code>layout</code>不可修改，因为material主题已经在主题文件夹内的<code>layout</code>中的<code>post.ejs</code>中定义好了，对应的layout调用对应的页面ejs文件去生成相关页面。<br>layout为about没有相关定义的页面，所以会生成一篇普通文章，但是如果想作修改，就可以按照后方第2点说到的来做啦。</p><ul><li>创建<code>友情链接</code>页面还需要继续进行下面操作<br>在hexo目录下的<code>source</code>文件夹内创建一个名为<code>_data</code>（不可以改名）的文件夹<br>然后在文件内创建一个名为<code>links.yml</code>的文件,在其中添加相关数据即可，格式如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#Name: #将 Name 改为友情链接的名字，例如 Viosey。</span><br><span class="line">#    link: http://example.com #友情链接的地址</span><br><span class="line">#    avatar: http://example.com/avatar.png #为友情链接的头像</span><br><span class="line">#    descr: &quot;这里填写对友情链接的描述&quot;</span><br><span class="line"># 例如</span><br><span class="line">Viosey:</span><br><span class="line">    link: http://example.com</span><br><span class="line">    avatar: ../img/picture.jpg #路径是主题文件夹里的source的img</span><br><span class="line">    descr: &quot;这是描述文字&quot;</span><br></pre></td></tr></table></figure></li></ul><p>添加多个友情链接，我们只需要根据上面的格式重复填写即可。</p><ol start="2"><li><h5 id="在侧边栏添加自定义页面"><a href="#在侧边栏添加自定义页面" class="headerlink" title="在侧边栏添加自定义页面"></a>在侧边栏添加自定义页面</h5>这里以<code>我的作品集</code>为例</li></ol><ul><li><p>在主题的配置文件<code>_config.yml</code>中找到<code>Pages</code>，加入或修改相关内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">我的作品集:</span><br><span class="line">    # 如果不需要在站内自定义页面，可以直接贴地址跳转，直接贴地址的话，后面的步骤都不需要做了</span><br><span class="line">    # link: &quot;https://niccce.github.io/MyWorks/&quot;</span><br><span class="line">    #图标选择网站是https://material.io/icons/,只需要像下面一样把icon对应的配置项换掉就可以切换图标</span><br><span class="line">    link: &quot;/myWorks&quot;</span><br><span class="line">    icon: book</span><br><span class="line">    divider: false</span><br></pre></td></tr></table></figure></li><li><p>创建我的作品集页面</p><ul><li>在hexo目录（目录内有_posts、_data等文件夹）下的<code>source</code>文件夹内创建名为<code>myWorks</code>的文件夹</li><li>在<code>myWorks</code>的文件夹内建一个名为<code>index.md</code>的Markdown文件</li><li>修改Markdown文件的内容为<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 我的作品集</span><br><span class="line">date:</span><br><span class="line">layout: myWorks</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在hexo目录中找到<code>themes</code>文件夹，进入<code>material</code>主题文件夹，打开<code>layout</code>文件夹中的<code>post.ejs</code>文件，在<code>&lt;!-- Layouts --&gt;</code>下方适当位置添加下列代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% &#125; else if(page.layout === &apos;myWorks&apos;) &#123; %&gt;</span><br><span class="line">    &lt;!-- Single myWorks Page --&gt;</span><br><span class="line">    &lt;%- partial(&apos;_widget/page-myWorks&apos;) %&gt;</span><br></pre></td></tr></table></figure></li><li><p>在hexo目录中找到<code>themes</code>文件夹，进入<code>material</code>主题文件夹，进入<code>layout</code>文件夹，在<code>_widget</code>文件夹中新建<code>page-myWorks.ejs</code>文件<br>而<code>我的作品集</code>页面直接用了主题原有的<code>page-links.ejs</code>文件，只是复制了一下，改了名字，内容也做相应修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;md-links&quot;&gt;</span><br><span class="line">    &lt;% if (site.data.myWorks) &#123; %&gt;</span><br><span class="line">        &lt;% for (var i in site.data.myWorks) &#123; %&gt;</span><br><span class="line">            &lt;li class=&quot;md-links-item&quot;&gt;</span><br><span class="line">                &lt;a href=&quot;&lt;%= site.data.myWorks[i].link %&gt;&quot; title=&quot;&lt;%= i %&gt;&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">                    &lt;img src=&quot;&lt;%= site.data.myWorks[i].avatar %&gt;&quot; alt=&quot;&lt;%= i %&gt;&quot; height=&quot;72px&quot;/&gt;</span><br><span class="line">                    &lt;span class=&quot;md-links-title&quot;&gt;&lt;%= i %&gt;&lt;/span&gt;&lt;br /&gt;</span><br><span class="line">                    &lt;span&gt;&lt;%= site.data.myWorks[i].descr %&gt;&lt;/span&gt;</span><br><span class="line">                &lt;/a&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></li></ul><p>然后像友情链接页面一样，在<code>_data</code>（不可以改名）文件夹中新建了<code>myWorks.yml</code>文件，内容格式与<code>links.yml</code>一样即可。</p><p>当然，想自己另外写一个页面的朋友，自己编写<code>page-myWorks.ejs</code>文件的内容即可。</p><ol start="3"><li><h5 id="在文章底部增加版权信息"><a href="#在文章底部增加版权信息" class="headerlink" title="在文章底部增加版权信息"></a>在文章底部增加版权信息</h5></li></ol><p>material主题自带了license的，只要在主题配置文件中的<code>license</code>中填入自己想展示的信息即可。<br>也可以按下面的方法自定义。</p><ul><li><p>在主题的配置文件<code>_config.yml</code>最后添加下列代码作为文章是否添加版权信息的总开关</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">post_license:</span><br><span class="line">    enable: true # or false</span><br></pre></td></tr></table></figure></li><li><p>在文章的 Front-matter 中添加如下字段，作为每篇文章是否添加版权信息的独立开关</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_license: true #or false</span><br></pre></td></tr></table></figure></li><li><p>在<code>themes/material/layout/_partial/</code>目录下新建<code>post_license.ejs</code>文件(具体代码可结合个人喜好作修改)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"post-license"</span> <span class="attr">class</span>=<span class="string">"post-license"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-license-author"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">strong</span>&gt;</span>本文作者：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%= config.url %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">theme.author</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-license-link"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">strong</span>&gt;</span>本文链接：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%= page.permalink %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">page.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-license-statement"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">strong</span>&gt;</span>版权声明： <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">           本文由 <span class="tag">&lt;<span class="name">%=</span> <span class="attr">config.author</span> %&gt;</span> 原创，采用 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"</span> <span class="attr">rel</span>=<span class="string">"license"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>署名-非商业性使用-相同方式共享（CC BY-NC-SA）4.0 国际许可协议<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">br</span>&gt;</span>转载请保留以上声明信息！</span><br><span class="line">       <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>themes/material/layout/_partial/post-content.ejs</code>文件最后添加下列代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if(theme.post_license.enable &amp;&amp; page.post_license !== false)&#123;%&gt;</span><br><span class="line">   &lt;%- partial(&apos;_partial/post_license&apos;) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li><li><p>在<code>themes/material/source/css/style.min.css</code>中添加css样式(可结合个人喜好作修改)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#post-license</span> &#123;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">0.5em</span> <span class="number">4.5em</span> <span class="number">3em</span> <span class="number">4.5em</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">1em</span> <span class="number">1.5em</span>;</span><br><span class="line">   <span class="attribute">border-left</span>: <span class="number">3px</span> solid <span class="number">#F44336</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: <span class="number">#F5F5F5</span>;</span><br><span class="line">   <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>参考:</p><blockquote><p><a href="http://tianma.space/post/1810369046/#版权声明" target="_blank" rel="noopener">Hexo 折腾记</a></p></blockquote></blockquote><ol start="4"><li><h5 id="添加更新时间、修改时间显示样式"><a href="#添加更新时间、修改时间显示样式" class="headerlink" title="添加更新时间、修改时间显示样式"></a>添加更新时间、修改时间显示样式</h5><ul><li>找到<code>themes/material/layout/_partial/Paradox-post-info.ejs</code>文件的<code>&lt;!-- Author Name &amp; Date --&gt;</code>字段<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;strong&gt;&lt;%= config.author %&gt;&lt;/strong&gt;</span><br><span class="line">    &lt;!--&lt;span&gt;&lt;%= date(page.date, &apos;MMM DD, YYYY&apos;) %&gt;&lt;/span&gt;--&gt;</span><br><span class="line">    &lt;span&gt;发表：&lt;%= date(page.date, &apos;YYYY.MM.DD&apos;) %&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;更新：&lt;%= date(page.updated, &apos;YYYY.MM.DD&apos;) %&gt;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><h5 id="修改代码块自定义样式"><a href="#修改代码块自定义样式" class="headerlink" title="修改代码块自定义样式"></a>修改代码块自定义样式</h5><ul><li>一直觉得这种代码块的展示颜色太淡了，让我不容易察觉，所以心血来潮就把原本灰色的字体改成了红色。</li><li>先在浏览器里找到影响代码块的相应代码，再到<code>themes/material/source/css</code>目录里寻找那些代码所在的css文件，有原本的css文件还有min的css文件，我尝试了一下，只在原本的文件里修改，没有效果，要在min这个压缩的css文件里加，然后在生成（hexo g）一次文件，就可以看到效果。<br><code>color: #f75858;</code></li></ul></li></ol><h4 id="搭建时的部分注意事项"><a href="#搭建时的部分注意事项" class="headerlink" title="搭建时的部分注意事项"></a>搭建时的部分注意事项</h4><ul><li>换material主题时记得把主题配置文件<code>_config.template.yml</code>重命名为<code>_config.yml</code></li></ul><hr><h3 id="下面是Hello-world，留着以后有需要看文档的时候用"><a href="#下面是Hello-world，留着以后有需要看文档的时候用" class="headerlink" title="下面是Hello world，留着以后有需要看文档的时候用"></a>下面是Hello world，留着以后有需要看文档的时候用</h3><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h5 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h5><h5 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h5><pre><code>$ hexo new &quot;My New Post&quot;</code></pre><p>加四个空格或Tab可以变成一块区域显示耶</p><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h5 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h5 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h5 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      <categories>
          
          <category> essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
