<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>《JavaScript-DOM编程艺术（第2版）》读书笔记</title>
      <link href="/2019/06/30/%E3%80%8AJavaScript-DOM%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF%EF%BC%88%E7%AC%AC2%E7%89%88%EF%BC%89%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/06/30/%E3%80%8AJavaScript-DOM%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF%EF%BC%88%E7%AC%AC2%E7%89%88%EF%BC%89%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><strong>前言</strong><br>&emsp;&emsp;在深入学习前端以及了解这个行业的过程中，我渐渐意识到基础知识对个人发展、日后求职的重要性。由此，我在近期入手了网上推荐的一些前端书籍，希望借此巩固基础并加深学习。<br>&emsp;&emsp;这里记一些需要了解/强调的基本要点或细节。部分内容具体可以翻翻书。</p><h1 id="第1章-JavaScript简史"><a href="#第1章-JavaScript简史" class="headerlink" title="第1章 JavaScript简史"></a>第1章 JavaScript简史</h1><h2 id="JavaScript的起源"><a href="#JavaScript的起源" class="headerlink" title="JavaScript的起源"></a>JavaScript的起源</h2><ul><li>JavaScript是Netscape公司与Sun公司合作开发的。在JavaScript出现之前，Web浏览器不过是一种能够显示超文本文档的简单的软件。而在JavaScript出现之后，网页的内容不再局限于枯燥的文本，它们的可交互性得到了显著的改善。</li><li>JavaScript是使网页具备交互能力的程序设计语言。</li><li>人们现在谈论的JavaScript 实际上就是ECMAScript。</li><li>JavaScript是一种脚本语言，通常只能通过Web浏览器去完成一些操作而不能像普通意义上的程序那样独立运行。</li><li>JavaScript与java无关，蹭了当时java的热度。</li></ul><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><ul><li>简单地说，DOM是一套对文档的内容进行抽象和概念化的方法。</li></ul><h2 id="浏览器战争"><a href="#浏览器战争" class="headerlink" title="浏览器战争"></a>浏览器战争</h2><h3 id="DHTML"><a href="#DHTML" class="headerlink" title="DHTML"></a>DHTML</h3><ul><li>DHTML是“Dynamic HTML”（动态HTML）的简称。DHTML并不是一项新技术，而是描述HTML、CSS和JavaScript技术组合的术语。</li><li>DHTML背后的含义是：<ul><li>利用HTML把网页标记为各种元素；</li><li>利用CSS设置元素样式和它们的显示位置；</li><li>利用JavaScript实时地操控页面和改变样式。</li></ul></li></ul><h3 id="浏览器之间的冲突"><a href="#浏览器之间的冲突" class="headerlink" title="浏览器之间的冲突"></a>浏览器之间的冲突</h3><blockquote><ul><li>Netscape公司的DOM使用了专有元素，这些元素称为层（layer）。层有唯一的ID，JavaScript代码需要像下面这样引用它们：<code>document.layers[&#39;myelement&#39;]</code></li><li>而在微软公司的DOM中这个元素必须像下面这样引用：<code>document.a11[&#39;myelement&#39;]</code></li></ul></blockquote><blockquote><p>若想找出myelement元素的1eft位置并把它赋值给变量xpos：</p><ul><li>Netscape Navigator 4浏览器：<code>var xpos=document.layers[&#39;myelement&#39;].left;</code></li><li>IE4浏览器：<code>var xpos = document.al1[&#39;myelement&#39;].leftpos;</code></li></ul></blockquote><h2 id="制定标准"><a href="#制定标准" class="headerlink" title="制定标准"></a>制定标准</h2><p>&emsp;&emsp;就在浏览器制造商以DOM为武器展开营销大战的同时，W3C不事声张地结合大家的优点推出了一个标准化的DOM。令人欣慰的是，Netscape、微软和其他一些浏览器制造商们还能抛开彼此的敌意而与W3C携手制定新的标准，并于1998年10月完成了“第1级DOM”（DOM Level1）。</p><blockquote><p>我们已经用<code>&lt;div&gt;</code>标签定义了一个ID为myelement的页面元素，现在需要找出它的1eft位置并把这个值保存到变量Xpos中。下面是使用新的标准化DOM时需要用到的语法：<br><code>var xpos =document.getElementById(&quot;myelenent&quot;).style.left;</code></p></blockquote><p>&emsp;&emsp;浏览器制造商们感兴趣的只不过是通过JavaScript操控网页的具体办法，但W3C推出的标准化DOM却可以让任何一种程序设计语言对使用任何一种标记语言编写出来的任何一份文档进行操控。</p><h3 id="浏览器以外的考虑"><a href="#浏览器以外的考虑" class="headerlink" title="浏览器以外的考虑"></a>浏览器以外的考虑</h3><ul><li>DOM是一种API（应用程序接口）。</li><li>简单地说，API就是一组已经得到有关各方共同认可的基本约定。在现实世界中，相当于API的例子包括（但不限于）摩尔斯码、国际时区、化学元素周期表。以上这些都是不同学科领域中的标准，它们使得人们能够更方便地交流与合作。</li><li>W3C对DOM的定义是：<strong> <em>“一个与系统平台和编程语言无关的接口，程序和脚本可以通过这个接口动态地访问和修改文档的内容、结构和样式。”</em> </strong></li><li>W3C推出的标准化DOM，在独立性和适用范围等诸多方面，都远远超出了各自为战的浏览器制造商们推出的各种专有DOM。</li></ul><h3 id="浏览器战争的结局"><a href="#浏览器战争的结局" class="headerlink" title="浏览器战争的结局"></a>浏览器战争的结局</h3><p>&emsp;&emsp;受浏览器战争影响最重的人群是那些网站设计人员。跨浏览器开发曾经是他们的噩梦。除了刚才提到的那些在JavaScript实现方面的差异之外，Netscape Navigator和IE这两种浏览器在对CSS的支持方面也有许多非常不同的地方。而编写那些可以同时支持这两种浏览器的样式表和脚本的工作也成了一种黑色艺术。</p><h3 id="崭新的起点"><a href="#崭新的起点" class="headerlink" title="崭新的起点"></a>崭新的起点</h3><ul><li>今天，几乎所有的浏览器都内置了对DOM的支持。20世纪90年代后期的浏览器大战的硝烟已经散尽。现在的浏览器厂商无一不在争先恐后地实现最新规范。</li><li>HTML5极大地改进了标记的语义，让我们通过<code>&lt;audio&gt;</code>和<code>&lt;video&gt;</code>得以控制各种媒体，<code>&lt;canvas&gt;</code>元素具备了完善的绘图能力，浏览器本地存储超越了cookie限制，更有内置的拖放支持，等等。</li></ul><h1 id="第2章-JavaScript语法"><a href="#第2章-JavaScript语法" class="headerlink" title="第2章 JavaScript语法"></a>第2章 JavaScript语法</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li><p>引用js最好的做法是把<code>&lt;script&gt;</code>标签放到HTML文档的最后，<code>&lt;/body&gt;</code>标签之前，这样能使浏览器更加快地加载页面（第五章有详解）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Example&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">Mark-up goes here...</span><br><span class="line">&lt;script src=&quot;demo.js&quot;&gt;&lt;/script&gt; </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">//&lt;script&gt;标签里没有包含传统的`type=&quot;text/java script&quot;`属性。</span><br><span class="line">//因为脚本默认是JavaScript，所以没必要指定这个属性。</span><br></pre></td></tr></table></figure></li><li><p>JavaScript是解释型语言。</p></li><li>程序设计语言分为<strong> <em>解释型</em> </strong> 和 <strong> <em>编译型</em> </strong>两大类。<ol><li>Java或C++等语言需要一个编译器（compiler）。编译器是一种程序，能够把用Java等高级语言编写出来的源代码翻译为直接在计算机上执行的文件。<ul><li>用编译型语言编写的代码有错误，这些错误在代码编译阶段就能被发现。</li></ul></li><li>解释型程序设计语言不需要编译器——它们仅需要解释器。对于Javascript语言，在互联网环境下，Web浏览器负责完成有关的解释和执行工作。浏览器中的JavaScript解释器将直接读入源代码并执行。浏览器中如果没有解释器，JavaScript代码就无法执行。<ul><li>解释型语言代码中的错误只能等到解释器执行到有关代码时才能被发现。</li></ul></li></ol></li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li>语句<ul><li>建议在每条语句后加<code>;</code>，让代码更加易读。</li></ul></li><li><p>注释</p><ul><li><code>//单行注释</code></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/*  多行注释</span><br><span class="line">    多行注释  */</span><br></pre></td></tr></table></figure></li><li><p>HTML中的注释：<code>&lt;!-- 注释 --&gt;</code></p></li></ul></li><li><p>变量</p><ul><li>JavaScript 允许程序员直接对变量赋值而无需事先声明。这在许多程序设计语言中是不允许的。</li><li>在JavaScript脚本中，如果程序员在对某个变量赋值之前未声明，赋值操作将自动声明该变量。虽然JavaScrip没有强制要求程序员必须提前声明变量，但提前声明变量是一种良好的编程习惯。</li><li>JavaScript中，变量与其他语法元素的名字都<em>区分大小写</em>；</li><li>不允许变量名中包含空格或标点符号（美元符号“$”例外）；</li><li>允许变量名包含字母、数字、美元符号和下划线（但第一个字符不允许是数字）。</li><li>推荐使用驼峰式命名法：不使用下划线，第一个单词的字母小写，随后每个新单词首字母大写。<ul><li>例：myMood</li></ul></li></ul></li><li>数据类型<ul><li>JavaScript为<em>弱类型</em>语言。<ul><li>必须明确类型声明的语言称为强类型（strongly typed）语言。</li></ul></li></ul><ol><li>字符串<ul><li>你可以随意选用引号，但最好是根据字符串所包含的字符来选择。如果字符串包含双引号，就把整个字符串放在单引号里；如果字符串包含单引号，就把整个字符串放在双引号里。</li><li>想让单双引号变成一个普通字符，用转义：<code>var mood = &#39;don\&#39;t ask&#39;;</code></li><li>作为一个好的编程习惯，不管选择用双引号还是单引号，请在整个脚本中保持一致。</li></ul></li><li>数值</li><li>布尔值</li></ol></li><li><p>数组<br><code>array[index] = element;</code></p><ul><li><p>数组元素可以是变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var beatles = new Array();</span><br><span class="line">var name = &quot;John&quot;;</span><br><span class="line">beatles[0] = name;</span><br></pre></td></tr></table></figure></li><li><p>数组元素还可以包含其他的数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var lennon = [&apos;John&apos;,1940,false];</span><br><span class="line">var beatles = [];</span><br><span class="line">beatles[0] = lennon;</span><br></pre></td></tr></table></figure></li></ul><p><strong>关联数组</strong></p><ul><li>beatles数组是传统数组的典型例子：每个元素的下标是一个数字，每增加一个元素，这个数字就依次增加1。</li><li>如果在填充数组时只给出了元素的值，这个数组就将是一个传统数组，它的各个元素的下标将被自动创建和刷新。</li><li><p>可以通过在填充数组时为每个新元素明确地给出下标来改变这种默认的行为。在为新元素给出下标时，不必局限于使用整数数字。你可以用字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var lennon = Array();</span><br><span class="line">lennon[&quot;name&quot;] = &quot;John&quot;;</span><br><span class="line">lennon[&quot;year&quot;] = 1940;</span><br><span class="line">lennon[&quot;iiving&quot;] = faise;</span><br></pre></td></tr></table></figure></li><li><p>这是<em>关联数组</em>。由于可以使用字符串来代替数字值，因而代码更具有可读性。但是，<strong>不推荐</strong>大家使用。本质上，在创建关联数组时，你创建的是Array对象的属性。在JavaScript中，所有的变量实际上都是某种类型的对象。比如，一个布尔值就是一个Boolean类型的对象，一个数组就是一个Array类型的对象。在上面这个例子中，你实际上是给lenmon数组添加了name、year和living三个属性。理想情况下，你不应该修改Array对象的属性，而应该使用通用的对象（Object）。</p></li></ul></li><li>对象</li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="算术操作符"><a href="#算术操作符" class="headerlink" title="算术操作符"></a>算术操作符</h3><ul><li>加号（+）是一个比较特殊的操作符，它既可以用于数值，也可以用于字符串。把两个字符毒合二为一是一种很直观易懂的操作：<code>var message = &quot;I am feeling&quot; + &quot;happy&quot;;</code></li><li><ol><li>如果把字符串和数值拼接在一起，其结果将是一个更长的字符串（数值会被自动转换为字符串）;</li><li>用同样的操作符来“拼接”两个数值，其结果将是那两个数值的算术和。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(&quot;10&quot;+20);  //1020</span><br><span class="line">alert(10 + 20);  //30</span><br><span class="line">alert(10 +&quot;20&quot;); //1020</span><br></pre></td></tr></table></figure></li></ol></li><li><p>符号（+=），它可以一次完成“加法和赋值”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var year = 2019;</span><br><span class="line">var message = &quot;This year is&quot;;</span><br><span class="line">message += year;              //This year is 2019</span><br></pre></td></tr></table></figure></li></ul><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(condition)&#123;</span><br><span class="line">  statements;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h3><ul><li>==和===区别：全等操作符（===）不仅比较值，还会比较变量的类型。!=和!==一样的道理。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a = false;</span><br><span class="line">var b = &quot;&quot;;</span><br><span class="line">if(a===b)&#123;              //false</span><br><span class="line">  alert(&quot;a equals b&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h3><p>&amp;&amp;  ||  !</p><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><ul><li><p>while循环</p><ul><li><p>while</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while(condition)&#123;</span><br><span class="line">  statements;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>do…while</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">do&#123;</span><br><span class="line">  statements;</span><br><span class="line">&#125;while(condition);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>for循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(initial condition;test condition;alter condition)&#123;</span><br><span class="line">  statements;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for循环最常见的用途之一是对某个<strong>数组</strong>里的全体元素进行遍历处理。</p></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>作为一种良好的编程习惯，应该先对函数做出定义再调用它们。<h4 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h4></li><li>如果在某个函数中使用了var，那个变量就将被视为一个局部变量，它只存在于这个函数的上下文中；反之，如果没有使用var，那个变量就将被视为一个全局变量，如果脚本里已经存在一个与之同名的全局变量，这个函数就会改变那个全局变量的值。</li></ul><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>实例是对象的具体个体。</p><ul><li>内建对象<br>如：Array对象，Date对象等</li><li>宿主对象<br>由浏览器提供的预定义对象被称为宿主对象（host object）;</li></ul><h1 id="第3章-DOM"><a href="#第3章-DOM" class="headerlink" title="第3章 DOM"></a>第3章 DOM</h1><p>Document Object Model</p><ul><li>DOM代表着加载到浏览器窗口的当前网页。浏览器提供了网页的地图（或者说模型），而我们可以通过JavaScript去读取这张地图。</li><li>DOM把一份文档表示为一棵树。（文档：“节点树”）</li></ul><h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><ul><li>元素结点<ul><li>标签的名字就是元素的名字：如<code>&lt;p&gt;</code>、<code>&lt;ul&gt;</code>、<code>&lt;li&gt;</code></li></ul></li><li>文本节点<ul><li>在XHTML文档里，文本节点总是被包含在元素节点的内部。<br>如：<code>&lt;p&gt;Hello world&lt;/p&gt;</code>中的<code>Hello world</code></li></ul></li><li>属性节点<ul><li>属性节点总是被包含在元素节点中。<br>如：<code>&lt;p title=&quot;nihao&quot;&gt;Hello world&lt;/p&gt;</code>中的<code>title=&quot;nihao&quot;</code></li></ul></li></ul><h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><blockquote><p>typeof操作符可以告诉我们它的操作数是一个字符串、数值、函数、布尔值还是对象。<br>文档中的每一个元素都是一个对象。</p></blockquote><ul><li>document.getElementById(id)：返回一个与那个有着给定id属性值的元素节点对应的对象。</li><li>document.getElementsByTagName(tag)：返回一个对象数组<ul><li><code>alert(document.getElementsByTagName(&quot;*&quot;).1ength);</code></li><li>上述例子能获取到文档里的所有元素节点</li><li>通配符（星号字符“*”）必须放在引号里，这是为了让通配符与乘法操作符有所区别。</li></ul></li><li>document.getElementsByClassName(class)<ul><li>使用这个方法还可以查找那些带有多个类名的元素。要指定多个类名，只要在字符串参数中用空格分隔类名即可。</li><li>不仅类名的实际顺序不重要，就算元素还带有更多类名也没有关系。</li></ul></li></ul><h2 id="获取和设置属性"><a href="#获取和设置属性" class="headerlink" title="获取和设置属性"></a>获取和设置属性</h2><ul><li><code>object.getAttribute(attribute)</code><br>getAttribute方法不属于document对象，所以不能通过document对象调用。</li><li><code>object.setAttribute(attribute,value)</code><br>setAttribute做出的修改不会反映在文档本身的源代码里。</li></ul><h1 id="第4章-案例研究：JavaScript图片库"><a href="#第4章-案例研究：JavaScript图片库" class="headerlink" title="第4章 案例研究：JavaScript图片库"></a>第4章 案例研究：JavaScript图片库</h1><p><strong>事件处理函数</strong></p><ul><li>在onclick事件处理函数所触发的JavaScript代码里增加一条return false语句，就可以阻止默认行为。<br><code>&lt;a href=&quot;https://niccce.github.io/&quot; onclick=&quot;return false;&quot;&gt;Click me&lt;/a&gt;</code></li><li>也可以调用某函数后再阻止默认行为。</li></ul><p><strong>拓展</strong></p><ul><li>childNodes属性：可用来获取任何一个元素的所有子元素<ul><li>它是一个包含这个元素全部子元素的<strong>数组</strong></li><li>element.childNodes</li><li>由childNodes属性返回的数组包含所有类型的节点，而不仅仅是元素节点。事实上，文档里几乎每一样东西都是一个节点，甚至连空格和换行符都会被解释为节点，而它们也全都包含在childNodes属性所返回的数组当中。</li></ul></li><li>nodeType属性<ul><li>node.nodeType</li><li>每个节点都有nodeType属性，nodeType属性总共有12种可取值，但其中仅有3种具有实用价值：<ol><li>元素节点的nodeType属性值是1</li><li>属性节点的nodeType属性值是2</li><li>文本节点的nodeType属性值是3</li></ol></li></ul></li><li>nodeValue属性：用来获取一个节点的值</li><li>firstChild、lastChild属性<ul><li>无论何时何地，只要需要访问childNodes数组的第一个元素，都可以把它写成firstchild；lastChild则是最后一个元素</li><li><code>node.firstChild</code>相当于<code>node.childNodes[0]</code></li><li><code>node.lastChild</code> 相当于<code>node.childNodes[node.childNodes.length-1]</code></li></ul></li></ul><h1 id="第5章-最佳实践"><a href="#第5章-最佳实践" class="headerlink" title="第5章 最佳实践"></a>第5章 最佳实践</h1><h2 id="平稳退化"><a href="#平稳退化" class="headerlink" title="平稳退化"></a>平稳退化</h2><blockquote><ul><li>网站的访问者完全有可能使用的是不支持JavaScript的浏览器，还有一种可能是虽然测览器支持 JavaScript，但用户已经禁用它了（比如，因为讨厌看到弹出广告）。</li><li>如果正确地使用了JavaScript脚本，就可以让访问者在他们的浏览器不支持JavaScript的情况下仍能顺利地浏览你的网站。这就是所谓的平稳退化（graceful degradation），就是说，虽然某些功能无法使用，但最基本的操作仍能顺利完成。</li></ul></blockquote><ul><li>“JavaScript:”伪协议，不建议使用</li><li>内嵌的事件处理函数，不建议使用</li></ul><h2 id="向CSS学习"><a href="#向CSS学习" class="headerlink" title="向CSS学习"></a>向CSS学习</h2><ul><li>结构与样式分离<blockquote><p>CSS技术的最大优点是，它能够帮助你将Web文档的内容结构（标记）和版面设计（样式）分离开来。</p></blockquote></li><li><p>渐进增强</p><blockquote><p>所谓“渐进增强”就是用一些额外的信息层去包裹原始数据。按照“渐进增强”原则创建出来的网页几乎（如果不是“全部”的话）都符合“平稳退化”原则。</p></blockquote><p>更值得推荐的办法是，先把样式信息存入一个外部文件，再在文档的head部分用<code>&lt;link&gt;</code>标签来调用这个文件</p></li></ul><h2 id="分离JavaScript"><a href="#分离JavaScript" class="headerlink" title="分离JavaScript"></a>分离JavaScript</h2><ol><li>若Js语句直接放到js文件里，没有用任何函数封装，这条语句将在JavaScript文件被加载时立刻执行。</li><li>如果JavaScript文件是从HTML文档的<code>&lt;head&gt;</code>部分用<code>&lt;script&gt;</code>标签调用的，它将在HTML文档之前加载到浏览器里。</li><li>同样，如果<code>&lt;script&gt;</code>标签位于文档底部<code>&lt;/body&gt;</code>之前，就不能保证哪个文件最先结束加载（浏览器可能一次加载多个）。园为脚本加载时文档可能不完整，所以模型也不完整。没有完整的DOM，getElementsByTaglame等方法就不能正常工作。</li><li>必须让这些代码在HTML文档全部加载到浏览器之后马上开始执行，可用<code>window.onload</code></li><li><p>文档将被加载到一个浏览器窗口里，document对象又是window对象的一个属性。当window对象触发onload事件时，document对象已经存在。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = sayHi;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">"Hello World"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  sayHi();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">"Hello World"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="向后兼容"><a href="#向后兼容" class="headerlink" title="向后兼容"></a>向后兼容</h2><h3 id="对象检测"><a href="#对象检测" class="headerlink" title="对象检测"></a>对象检测</h3><blockquote><p>大多数现代的浏览器对DOM的支持都非常不错。但比较古老的浏览器却很可能无法理解DOM提供的方法和属性。因此，即使某位用户在访问你的网站时使用的是支持JavaScript的浏览器，某些脚本也不一定能正常工作。</p></blockquote><blockquote><p>针对这一问题的最简单的解决方案是，<strong>检测浏览器对JavaScript的支持程度</strong>。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">document</span>.getElementById)&#123;</span><br><span class="line">    statements using getElementById</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="built_in">document</span>.getElementById)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浏览器嗅探技术"><a href="#浏览器嗅探技术" class="headerlink" title="浏览器嗅探技术"></a>浏览器嗅探技术</h3><blockquote><p>在JavaScript脚本代码里，在使用某个特定的方法或属性之前，先测试它是否真实存在是确保向后兼容性最安全和最可信的办法，但它并不是唯一的办法。</p></blockquote><blockquote><p>在浏览器市场群雄逐鹿的那个年代，一种称为浏览器嗅探（browser sniffing）的技术曾经非常流行。</p></blockquote><blockquote><p>“浏览器嗅探”指通过提取浏览器供应商提供的信息来解决向后兼容问题。从理论上讲，可以通过JavaScript代码检索关于浏览器品牌和版本的信息，这些信息可以用来改善JavaScript脚本代码的向后兼容性，但这是一种风险非常大的技术。</p></blockquote><h2 id="性能考虑"><a href="#性能考虑" class="headerlink" title="性能考虑"></a>性能考虑</h2><ul><li>尽量少访问DOM和尽量减少标记</li><li>合并和放置脚本<ul><li>脚本在标记中的位置对页面的初次加载时间也有很大影响。传统上，我们都把脚本放在文档的<code>&lt;head&gt;</code>区域，这种放置方法有一个问题。位于<code>&lt;head&gt;</code>块中的脚本会导致浏览器无法并行加载其他文件（如图像或其他脚本）。一般来说，根据HTTP规范，浏览器每次从同一个域名中最多只能同时下载两个文件。而在下载脚本期间，浏览器不会下载其他任何文件，即使是来自不同域名的文件也不会下载，所有其他资源都要等脚本加载完毕后才能下载。</li><li>把所有<code>&lt;script&gt;</code>标签都放到文档的末尾，<code>&lt;/body&gt;</code>标记之前，就可以让页面变得更快。</li></ul></li><li>压缩脚本<br>所谓压缩脚本，指的是把脚本文件中不必要的字节，如空格和注释，统统删除，从而达到“压缩”文件的目的。</li></ul><h1 id="第6章-案例研究：图片库改进版"><a href="#第6章-案例研究：图片库改进版" class="headerlink" title="第6章 案例研究：图片库改进版"></a>第6章 案例研究：图片库改进版</h1><blockquote><p>如果想用JavaScript给某个网页添加一些行为，就不应该让JavaScript代码对这个网页的结构有任何依赖。</p></blockquote><h2 id="共享onload事件"><a href="#共享onload事件" class="headerlink" title="共享onload事件"></a>共享onload事件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onlaod = firstFunction;</span><br><span class="line"><span class="built_in">window</span>.onload = secondFunction;</span><br><span class="line"><span class="comment">//这样只有后面那个才会被实际执行</span></span><br></pre></td></tr></table></figure><p>可换成如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onlaod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  firstFunction();</span><br><span class="line">  secondFunction();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>可以使用一个函数，这个函数的名字是addloadEvent，它是由Simon Willison编写的。它只有一个参数：<strong>打算在页面加载完毕时执行的函数的名字</strong></li><li><p>下面是addLoadEvent函数将要完成的操作：</p><ol><li>把现有的window.onload事件处理函数的值存入变量oldonload。</li><li>如果在这个处理函数上还没有绑定任何函数，就像平时那样把新函数添加给它。</li><li>如果在这个处理函数上已经绑定了一些函数，就把新函数追加到现有指令的末尾。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addLoadEvent</span>(<span class="params">func</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> oldonload = <span class="built_in">window</span>.onload;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">window</span>.onload != <span class="string">'function'</span>)&#123;</span><br><span class="line">    <span class="built_in">window</span>.onload = func;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      o1donload();</span><br><span class="line">      func();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>学习用 参考链接：<br><a href="https://www.cnblogs.com/yangtoude/p/4753306.html" target="_blank" rel="noopener">https://www.cnblogs.com/yangtoude/p/4753306.html</a><br><a href="https://www.imooc.com/wenda/detail/336004" target="_blank" rel="noopener">https://www.imooc.com/wenda/detail/336004</a></p></blockquote><h2 id="小心onkeypress"><a href="#小心onkeypress" class="headerlink" title="小心onkeypress"></a>小心onkeypress</h2><blockquote><p>onclick事件处理函数比我们想象得更聪明。虽然它的名字“onclick”给人一种它只与鼠标点击动作相关联的印象，但事实却并非如此：在几乎所有的浏览器里，用Tab键移动到某个链接然后按下回车键的动作也会触发onclick事件。</p></blockquote><h2 id="DOM-Core和HTML-DOM"><a href="#DOM-Core和HTML-DOM" class="headerlink" title="DOM Core和HTML-DOM"></a>DOM Core和HTML-DOM</h2><ul><li>getElementById、getElementByTagName、getAttribute等这些方法都是<strong>DOM Core</strong>的组成部分。它们并不专属于JavaScript，支持DOM的任何一种程序设计语言都可以使用它们。它们的用途也并非仅限于处理网页，它们可以用来处理用任何一种标记语言（比如XML）编写出来的文档。</li><li>像onclick这样的属性，属于<strong>HTML-DOM</strong></li></ul><p>比如说，HTML-DOM为图片提供了一个src对象。这个对象可以把下面这样的语句：<code>element.getAttribute(&quot;src&quot;)</code>简化为：<code>element.src</code></p><h1 id="第7章-动态创建标记"><a href="#第7章-动态创建标记" class="headerlink" title="第7章 动态创建标记"></a>第7章 动态创建标记</h1><h1 id="第8章-充实文档的内容"><a href="#第8章-充实文档的内容" class="headerlink" title="第8章 充实文档的内容"></a>第8章 充实文档的内容</h1><h1 id="第9章-CSS-DOM"><a href="#第9章-CSS-DOM" class="headerlink" title="第9章 CSS-DOM"></a>第9章 CSS-DOM</h1><h1 id="第10章-用JavaScript实现动画效果"><a href="#第10章-用JavaScript实现动画效果" class="headerlink" title="第10章 用JavaScript实现动画效果"></a>第10章 用JavaScript实现动画效果</h1><h1 id="第11章-HTML5"><a href="#第11章-HTML5" class="headerlink" title="第11章 HTML5"></a>第11章 HTML5</h1><h1 id="第12章-综合示例"><a href="#第12章-综合示例" class="headerlink" title="第12章 综合示例"></a>第12章 综合示例</h1>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇总 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>头脑风暴小程序-开发总结</title>
      <link href="/2019/06/01/%E5%A4%B4%E8%84%91%E9%A3%8E%E6%9A%B4%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
      <url>/2019/06/01/%E5%A4%B4%E8%84%91%E9%A3%8E%E6%9A%B4%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="2019高校微信小程序应用开发赛"><a href="#2019高校微信小程序应用开发赛" class="headerlink" title="2019高校微信小程序应用开发赛"></a>2019高校微信小程序应用开发赛</h3><p>&emsp;&emsp;今年3月5号，2019高校微信小程序应用开发赛正式启动了，当时已步入大三下学期的我们，都开始感受到了不止一点的就业压力，感觉开发经验不足为大多数在校学生找实习路上的一个坎，于是身边的同学都纷纷加入到了各种专业学术竞赛的参赛大军，这不仅能增加个人实践经历，还能为自己的简历增添一笔，当然我也不例外。</p><h3 id="拖延"><a href="#拖延" class="headerlink" title="拖延"></a>拖延</h3><p>&emsp;&emsp;这个比赛明明三月已经开始，但是前期因为没能找齐一个完整的制作团队，队伍里只有我和一位和我一样走前端的舍友，而自己觉得不错的走后端的同学又已经和别人组了队……由于缺乏负责后台的队员，我们两个也没有想好题，专业的课程又比较多，就一直没开始，这个状况一直持续到了3月下旬。<br>&emsp;&emsp;3月23号，一位工业设计专业的15级师兄得知了这个比赛，找到了我舍友，问她还缺不缺成员，师兄说他不懂开发，但是他可以在产品定位等方面给我们一些相关建议，舍友询问了我的意见。遇见这么热心的师兄，在大四这个赶毕设的节点还这么有热情去参与这些，我当然是十分欢迎的啦！<br>&emsp;&emsp;后来，我们有时间就去学校的咖啡吧一起讨论定题的事情，后面会大概提到。但是很不幸的，4月中我因为个人原因住院了，学校那边请了两个星期的假……住院期间我也有和舍友在讨论这个比赛的选题的事情，这段时间她有和师兄讨论过几个题，也询问了我的建议。舍友当时对小程序的了解程度也未及我，开发缺了主力，小程序的开发便一直被拖延了，一直等到了5月多才正式步入开发阶段。</p><h3 id="写这篇博客原因"><a href="#写这篇博客原因" class="headerlink" title="写这篇博客原因"></a>写这篇博客原因</h3><p>&emsp;&emsp;五月用了大概三个星期的时间，开发了一个头脑风暴微信小程序，小程序的整体基本框架的搭建和大部分工作，基本都由我一个人撑起来的，也不是说辛苦，但是就是有点感到可惜。因为在五月下旬，好多课程的课设与作业都扎堆的要汇报或者提交，赶作业都来不及，舍友去撑我们的组队作业，而我撑着我们这个用来投比赛的小程序，因为前期拖延与后面开发只有我一个，十分缓慢，这个作品最终提交上去的，并不是一个很完善的版本，昨天算是一个节点吧，5.31晚上九点小程序截止提交了，也算是为这个小程序画了一个小分号。<br>&emsp;&emsp;这次开发在有些方面感受比较深刻，便希望记下来，作为一个总结，也敦促自己不断学习！</p><hr><h2 id="定题"><a href="#定题" class="headerlink" title="定题"></a>定题</h2><p>&emsp;&emsp;三月份时，我和舍友都没有想好比较好的选题，后来我们想到了我们上学期交互设计课程的大作业。于是我们打算将之前做过的一个“及时帮助人平台”的交互设计作品中的一个小部分“街边商店作为失物招领点”的相关设计用小程序实现。<br>&emsp;&emsp;后来师兄加入了之后，我们告诉了他我们的想法，但是他觉得这个不太好。这位师兄校招去了金山的产品经理岗位实习，他对产品的各种都比我们熟悉，这方面的经验也比我们丰富，那我们当然就还是会比较重视他的意见和建议。我们一起讨论过好几个题，最后终于在4.23定下了这个在线协作的头脑风暴。</p><hr><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>&emsp;&emsp;五月真的是黑色五月，作业都扎堆得把人压得怪累的。等到师兄出了初步的设计稿后，五月初正式进入了开发阶段。<br>&emsp;&emsp;这次小程序开发，因为缺少后端成员，我们也对数据库不太了解，因此我们选用了微信提供的云开发服务。</p><blockquote><p>&emsp;&emsp;开发者可以使用云开发开发微信小程序、小游戏，无需搭建服务器，即可使用云端能力。<br>&emsp;&emsp;云开发为开发者提供完整的原生云端支持和微信服务支持，弱化后端和运维概念，无需搭建服务器，使用平台提供的 API 进行核心业务开发，即可实现快速上线和迭代，同时这一能力，同开发者已经使用的云服务相互兼容，并不互斥。</p></blockquote><h3 id="界面设计"><a href="#界面设计" class="headerlink" title="界面设计"></a>界面设计</h3><p><img src="/img/posts/20190601_01.png" alt="首页的第一版设计效果"><br>我们觉得颜色太亮眼了，后来就改了<br><img src="/img/posts/20190601_02.png" alt="首页的第二版设计效果"><br><img src="/img/posts/20190601_03.png" alt="UI设计"></p><hr><h3 id="技术方案"><a href="#技术方案" class="headerlink" title="技术方案"></a>技术方案</h3><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><p>&emsp;&emsp;使用微信小程序开发，应用小程序提供的原生组件，以及自定义组件。</p><h4 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h4><p>&emsp;&emsp;使用云开发为我们提供的原生云端支持和微信服务支持。<br>&emsp;&emsp;云开发服务弱化后端和运维概念，无需搭建服务器，为我们快速开发迭代上线提供了可能。同时，我们使用平台提供的小程序端及服务端 API 进行小程序与数据库的数据交互，以实现核心功能。 </p><hr><h3 id="功能方案"><a href="#功能方案" class="headerlink" title="功能方案"></a>功能方案</h3><p>&emsp;&emsp;在云开发提供的JSON数据库中，我们建立多个集合来管理相应数据。</p><h4 id="新建主题"><a href="#新建主题" class="headerlink" title="新建主题"></a>新建主题</h4><p>&emsp;&emsp;在相应的主题表中新建记录，同时将该记录的“_id”添加到用户与主题的关系表（themeAndPerson）中，首页通过查询用户与主题的关系表（themeAndPerson）与主题表，在首页渲染出该用户参与的所有讨论主题。</p><h4 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h4><p>&emsp;&emsp;于主题详情页点击邀请好友的按钮，调用onShareAppMessage方法将本主题讨论页分享给好友，好友点击邀请链接后，将该讨论主题的“_id”添加进用户与主题的关系表（themeAndPerson）中相应位置，记录该用户被邀请进了本主题。</p><h4 id="添加灵感"><a href="#添加灵感" class="headerlink" title="添加灵感"></a>添加灵感</h4><p>&emsp;&emsp;在主题的详情页中进行头脑风暴，用户点击添加灵感，灵感将更新至主题表中的该条主题记录的ideas字段中。</p><h4 id="高效筛选"><a href="#高效筛选" class="headerlink" title="高效筛选"></a>高效筛选</h4><p>&emsp;&emsp;每条灵感都记录有相应的支持数，小程序端从数据库获取到所有灵感的支持数后进行灵感排序，支持数高的灵感将排在上方，最后视图层使用列表渲染将灵感显示到页面。</p><h4 id="生成思维导图"><a href="#生成思维导图" class="headerlink" title="生成思维导图"></a>生成思维导图</h4><p>&emsp;&emsp;从数据库获取主题与灵感的层级关系的相关数据，用canvas绘制思维导图。<br>&emsp;&emsp;此功能因时间关系尚未完成，后序将会持续完善。</p><hr><h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><p>&emsp;&emsp;开发中也遇到了很多问题，不过主要都是因为这是第一次开发小程序，对小程序的一些API和组件不太熟悉，但这类问题都基本能通过查询资料得到解决。</p><p>&emsp;&emsp;更多的问题，都是出现在数据储存那方面的，这是我第一次前后端都自己做，当然了，云开发功能已经为我们减轻了很多的工作，但是因为没有后台开发的经验，这个学期也才刚接触数据库，我和我舍友对后台用于储存的表的设计都不太了解，因此也产生了很多问题。</p><ul><li>这里记录一些开发时的一些卡得比较久的需求吧：<ul><li>显示主题详情</li></ul><ul><li>显示灵感详情<br>将每条灵感储存在该主题或次级主题那条记录的字段内。</li><li>显示主题内二级主题的层级关系<br>在新建主题、二级主题、三级主题时就查询好相关参数，一级一级地保存在主题字段内，页面渲染时直接读取相关记录的相应字段进行显示。</li><li>邀请好友加入主题<br>调用onShareAppMessage方法将本主题讨论页分享给好友，传递主题的id号给好友，好友点击链接后把好友的openid存进本主题的参与人员的字段内。</li><li>对灵感点赞进行筛选（这个还有bug没解决）<br>这个在灵感列表页可以正常筛选，但是到了灵感详情页就出问题了，因为所用方法可能不太合理，不过其实只要做到“用户表态了一次之后把按钮键禁用”，这个问题就能解决了。<br>但是因为还不知道在数据库那边该如何记录每个用户跟每条灵感之间的关系，所以这个也没找到合适的解决方法。</li><li>表的设计<br>这是一个很大的问题，关乎到功能的实现，开发到最后一个星期，舍友放下了作业加入到开发中，一些我还没解决的问题，都牵涉到了数据的储存，部分需求如何实现，没有相关的实践经验，我们都是去问走后端的同学，然后讨论了好几次表的创建，还有记录和字段的设计，讨论出了我听着觉得可行的方案，就继续开发了。</li></ul></li></ul><p>&emsp;&emsp;整个开发过程真的十分不容易，数据存储是问题的主要部分。</p><hr><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>&emsp;&emsp;不知不觉，就到了5.31，即使功能还没开发完，为了不浪费大半个月的汗水，在提交截止的最后一天，整理好了文档，剪辑好了演示视频，最后也便交上去了。<br>&emsp;&emsp;5.31晚上支部开了欢送师兄师姐的组织生活会，提交的事情都交给舍友了。<br>&emsp;&emsp;作品提交后不久，得知有一组同学因为成员都不知道5.31晚上九点截止提交，最后超时了一分钟，没能提交成功。他们的作品主题是“梦”，我看过觉得也十分不错，没能交上去可惜了。<br>&emsp;&emsp;后来也看到了我们班的一组，作品跟我们的想法极为相似，他们的界面超级好看的！但是我们没有UI设计师，也就只能这样了。他们的演示视频还拍摄了一个小剧场，将产品的应用场景拍进去了，顿时感觉我们这个要凉了。。。。。</p><h2 id="完善"><a href="#完善" class="headerlink" title="完善"></a>完善</h2><p>&emsp;&emsp;完善过后继续补充</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;那位做产品的师兄看到我们提交版的作品后，觉得很开心，因为我们一起将一个小程序一步一步地做了出来。但是我自己对这次这个作品的开发其实有很多不满意的地方。<br>&emsp;&emsp;首先需求没有全部实现就已经很让我难受了。其次没能找到合适的后台队员也是十分可惜的一件事，至今我都还没有与后端一起开发的经验呢，让人难受。<br>&emsp;&emsp;还是要说说这次这个项目总体情况的一个总结。</p><ul><li>数据库设计方面<ul><li>在开发过程中，数据存储的表的设计真的是一个严重影响到我们需求实现的一个点。数据存储和读取在这个小程序中起到了至关重要的作用，而我们都对那个不太熟，我还没有仔细地去了解那方面的内容就着急着手开发了，这也对后面开发到一半后的进度产生了影响。如果因为我前期数据库的设计不合理，分分钟要重构代码。。。幸好后面和舍友讨论某些需求的解决方案后，我本来设计好的表不怎么需要改，只是要增添表，还有增添一些帮助查询的联系表。</li><li>感觉以后在开发前，一点要先讨论好需求的解决方案，将所有需求的解决方案都有大致的了解和把握之后再着手开发，这样应该会更好，而不要像这次，着急开发，开发到一半，发现自己这样存数据的话就不知道怎么实现接下来要做的功能了。</li></ul></li><li>开发进度方面<ul><li>这次小程序制作过程中，我们专业的作业也多，但我们开发时也没有一个主要把握进度的人，这也是一个造成我们开发缓慢的一个原因。可能因为我们几人都比较佛？？</li></ul></li><li><p>个人原因</p><ul><li>因为4月多那次住院，我最近几月都要频繁去不同科室复诊，那次住院也改变了我很多，让我真正意识到熬夜对身体造成的影响，现在于我来说，没有什么比身体更重要了，遇到什么不顺心的事情，情绪波动也没有以前大了，乐观面对，都会变好的啦。舍友也很体谅我了，因为台式电脑的问题，回家了的我就没法继续开发小程序了，这让时间变得更少，但是这没办法，身体重要。</li></ul><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>&emsp;&emsp;加油呀，希望下一次的项目开发能做得更好！</p></li></ul>]]></content>
      
      <categories>
          
          <category> 汇总整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇总 </tag>
            
            <tag> 学习 </tag>
            
            <tag> 学习体会 </tag>
            
            <tag> 自我思考 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记录一些以后可能会查看的链接</title>
      <link href="/2018/09/05/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9B%E4%BB%A5%E5%90%8E%E5%8F%AF%E8%83%BD%E4%BC%9A%E6%9F%A5%E7%9C%8B%E7%9A%84%E9%93%BE%E6%8E%A5/"/>
      <url>/2018/09/05/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9B%E4%BB%A5%E5%90%8E%E5%8F%AF%E8%83%BD%E4%BC%9A%E6%9F%A5%E7%9C%8B%E7%9A%84%E9%93%BE%E6%8E%A5/</url>
      <content type="html"><![CDATA[<h2 id="前端学习资源"><a href="#前端学习资源" class="headerlink" title="前端学习资源"></a>前端学习资源</h2><ul><li><a href="https://github.com/helloqingfeng/Awsome-Front-End-learning-resource" target="_blank" rel="noopener">Awsome Front End learning resource</a></li><li><a href="https://wangdoc.com/javascript/" target="_blank" rel="noopener">《javascript标准参考教程》 - 阮一峰</a></li><li><a href="https://github.com/FrankFang/best-chinese-front-end-blogs" target="_blank" rel="noopener">优质的中文前端博客</a></li></ul><h2 id="科普"><a href="#科普" class="headerlink" title="科普"></a>科普</h2><ul><li><a href="https://blog.csdn.net/qq_37696120/article/details/80507178" target="_blank" rel="noopener">npm 是干什么的</a><br>看过这个觉得比较通俗易懂</li></ul><h2 id="语法-命令查询"><a href="#语法-命令查询" class="headerlink" title="语法/命令查询"></a>语法/命令查询</h2><ul><li><a href="../../../08/31/Hello-my-blog/index.html#关于Markdown">Markdown</a></li><li><a href="http://www.cnblogs.com/chenwolong/p/GIT.html" target="_blank" rel="noopener">GIT 常用命令</a></li></ul><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h4 id="排序筛选…"><a href="#排序筛选…" class="headerlink" title="排序筛选…"></a>排序筛选…</h4><ul><li><a href="https://github.com/patrickkunka/mixitup" target="_blank" rel="noopener">mixitup</a></li><li><a href="https://github.com/metafizzy/isotope" target="_blank" rel="noopener">isotope</a></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="Hexo主题"><a href="#Hexo主题" class="headerlink" title="Hexo主题"></a>Hexo主题</h3><ul><li><a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="noopener">material</a></li><li><a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="noopener">indigo</a></li><li><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a></li></ul><h3 id="两个学习CSS小游戏"><a href="#两个学习CSS小游戏" class="headerlink" title="两个学习CSS小游戏"></a>两个学习CSS小游戏</h3><ul><li><a href="https://github.com/thomaspark/flexboxfroggy" target="_blank" rel="noopener">flexboxfroggy</a></li><li><a href="https://github.com/thomaspark/gridgarden" target="_blank" rel="noopener">gridgarden</a></li></ul><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul><li><a href="https://blog.csdn.net/chueia/article/details/70159592" target="_blank" rel="noopener">利用nodeJs anywhere搭建本地服务器环境</a></li></ul>]]></content>
      
      <categories>
          
          <category> 汇总整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇总 </tag>
            
            <tag> mark </tag>
            
            <tag> links </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello my blog</title>
      <link href="/2018/08/31/Hello-my-blog/"/>
      <url>/2018/08/31/Hello-my-blog/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;知道Hexo很久了，半个月前更换<a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="noopener">Material</a>主题生成静态文件时总是遇到问题没有成功，就一直拖到了今天，换了个旧版本总算是成功了，自己并不是经常写博客的人，希望搭个博客之后能经常更新吧哈哈哈哈哈哈。<br><br><br>&emsp;&emsp;我深知自己很多技术都只是入门级别，希望自己能在学习路上永不停歇，搭个blog就偶尔写写学习总结，希望自己在技术的路上不断提升，写写生活体会，感受不同时间段里自己的变化，然后顺便安利安利林先生吧2333333333<br><br><br>&emsp;&emsp;加油！生命不息，学习不止！</p><hr><h3 id="关于Markdown"><a href="#关于Markdown" class="headerlink" title="关于Markdown"></a>关于Markdown</h3><ul><li><a href="https://github.com/guodongxiaren/README" target="_blank" rel="noopener">README文件语法解读</a></li><li><a href="https://www.cnblogs.com/liugang-vip/p/6337580.html" target="_blank" rel="noopener">markdown文件的基本常用编写语法（图文并茂）</a></li><li><a href="http://note.youdao.com/iyoudao/?p=2411" target="_blank" rel="noopener">【简明版】有道云笔记Markdown指南</a></li><li><a href="http://note.youdao.com/iyoudao/?p=2445" target="_blank" rel="noopener">【进阶版】有道云笔记Markdown指南</a></li><li><a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown 语法说明 (简体中文版) </a></li></ul><hr><h3 id="一些遇到的问题"><a href="#一些遇到的问题" class="headerlink" title="一些遇到的问题"></a>一些遇到的问题</h3><h4 id="localhost-4000无法访问"><a href="#localhost-4000无法访问" class="headerlink" title="localhost:4000无法访问"></a>localhost:4000无法访问</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>执行后提示成功，但是打开<code>http://localhost:4000/</code>却发现无法访问，后来通过上网搜索，刚好碰到一个与我的情况一样的朋友，遇到这个情况是因为电脑上正在运行着“福昕阅读器”。</p><ul><li>解决方法：在任务管理器中找到 FoxitProtect.exe ，将进程关闭。</li></ul><p>如果不是上面这个原因，但出现端口被占用的情况，可以尝试以下方法（我还没试过）：</p><ul><li>在_config.yml内加上如下代码更改hexo-server运行时的端口号</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 4001</span><br><span class="line">  compress: true</span><br><span class="line">  header: true</span><br></pre></td></tr></table></figure><hr><h3 id="关于博客搭建"><a href="#关于博客搭建" class="headerlink" title="关于博客搭建"></a>关于博客搭建</h3><h4 id="可优化项"><a href="#可优化项" class="headerlink" title="可优化项"></a>可优化项</h4><ul><li style="list-style: none"><input type="checkbox" checked> 开启本地搜索功能</li><li style="list-style: none"><input type="checkbox" checked> 添加标签云、关于我、友情链接等页面<ul><li style="list-style: none"><input type="checkbox" checked> 在侧边栏添加自定义页面</li></ul></li><li style="list-style: none"><input type="checkbox" checked> 给每篇博文生成二维码<ul><li style="list-style: none"><input type="checkbox" checked> 二维码未能正常识别，原因待查</li></ul></li><li style="list-style: none"><input type="checkbox"> 添加评论系统</li><li style="list-style: none"><input type="checkbox" checked> 隐藏网页底部powered By Hexo<ul><li style="list-style: none"><input type="checkbox" checked> 开发不易，改成功后又改回来了</li></ul></li><li style="list-style: none"><input type="checkbox"> 添加微信支付宝打赏功能</li><li style="list-style: none"><input type="checkbox" checked> 在文章底部增加版权信息</li><li style="list-style: none"><input type="checkbox" checked> 添加更新时间、修改时间显示样式</li><li style="list-style: none"><input type="checkbox"> 添加动态背景</li><li style="list-style: none"><input type="checkbox"> 实现点击出现桃心效果</li><li style="list-style: none"><input type="checkbox"> 点击爆炸效果</li><li style="list-style: none"><input type="checkbox"> 博文压缩</li><li style="list-style: none"><input type="checkbox"> 在右上角或者左上角实现fork me on github</li><li style="list-style: none"><input type="checkbox" checked> 修改<code>代码块自定义样式</code></li><li style="list-style: none"><input type="checkbox"> 侧边栏社交小图标设置</li><li style="list-style: none"><input type="checkbox"> 给网站加访客量/给文章加上访问量</li><li style="list-style: none"><input type="checkbox"> 添加热度</li><li style="list-style: none"><input type="checkbox"> 网站底部字数统计</li><li style="list-style: none"><input type="checkbox"> 设置网站的图标Favicon</li><li style="list-style: none"><input type="checkbox"> 实现统计功能</li><li style="list-style: none"><input type="checkbox"> 自定义鼠标样式</li><li style="list-style: none"><input type="checkbox"> 为博客加上萌萌的宠物</li><li style="list-style: none"><input type="checkbox"> DaoVoice 在线联系</li></ul><h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5><ul><li><del><a href="https://crowncj.com/20170616.html" target="_blank" rel="noopener">Hexo Material 主题博客搭建以及优化心得</a></del><br>最近发现<a href="https://github.com/crown3" target="_blank" rel="noopener">作者</a>的博客迁移了，此处为<a href="https://blog.crown.im/posts/hexo-material-blog/" target="_blank" rel="noopener">新链接</a>(更新于2019.03.09)<br>搭建的时候很多地方都参考了这位大神的这篇博文</li><li><a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">GitHub+Hexo 搭建个人网站详细教程</a><br>这篇主要讲的是next主题，但是有些部分的介绍也可以参考</li><li><a href="https://cn.snatix.com/2017/01/14/008-customize-hexo/" target="_blank" rel="noopener">重启Hexo(2)-Material深度探索</a></li><li><a href="https://cn.snatix.com/2017/02/13/011-hexo-blog-donate-plugin/" target="_blank" rel="noopener">重启Hexo(3)-添加打赏功能</a></li></ul><hr><h4 id="下面列一些添加个性化配置时的操作"><a href="#下面列一些添加个性化配置时的操作" class="headerlink" title="下面列一些添加个性化配置时的操作"></a>下面列一些添加个性化配置时的操作</h4><p>因为第一次接触Hexo，很多东西都不懂，也是第一次接触ejs，所以刚开始加个性化配置经常遇到问题，就想记录一下成功的操作。</p><ol><li><h5 id="添加标签云、关于我、友情链接等页面"><a href="#添加标签云、关于我、友情链接等页面" class="headerlink" title="添加标签云、关于我、友情链接等页面"></a>添加标签云、关于我、友情链接等页面</h5></li></ol><p>一开始，我先按照别人的分享一步一步去新增标签云、关于我、友情链接等页面，到后面，我想自己再加一个作品集的页面，就试着研究了一下，最后也成功了，后面会说到。</p><ul><li><p>在主题的配置文件<code>_config.yml</code>中找到<code>Pages</code>，加入或修改相关内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">标签:</span><br><span class="line">    link: &quot;/tags&quot;</span><br><span class="line">    icon: local_offer</span><br><span class="line">    divider: false</span><br><span class="line">Timeline:</span><br><span class="line">    link: &quot;/timeline&quot;</span><br><span class="line">    icon: send</span><br><span class="line">    divider: false</span><br><span class="line">友情链接:</span><br><span class="line">    link: &quot;/links&quot;</span><br><span class="line">    icon: person_add</span><br><span class="line">    divider: false</span><br><span class="line">About Me:</span><br><span class="line">    link: &quot;/aboutMe&quot;</span><br><span class="line">    icon: account_box</span><br><span class="line">    divider: false</span><br></pre></td></tr></table></figure></li><li><p>创建标签云/Timeline/友情链接/关于我 页面</p><ul><li>在hexo目录（目录内有_posts、_data等文件夹）下的<code>source</code>文件夹内创建名为<code>tags</code>、<code>timeline</code>、<code>links</code>、<code>aboutMe</code>的文件夹</li><li>在<code>tags</code>、<code>timeline</code>、<code>links</code>、<code>aboutMe</code>的文件夹内均建一个名为<code>index.md</code>的Markdown文件</li><li>分别修改每个Markdown文件的内容为</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 本站标签</span><br><span class="line">date:</span><br><span class="line">layout: tags</span><br><span class="line">---</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: timeline</span><br><span class="line">date:</span><br><span class="line">layout: timeline</span><br><span class="line">---</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 友情链接</span><br><span class="line">date:</span><br><span class="line">layout: links</span><br><span class="line">---</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: About me</span><br><span class="line">date: 2018-09-01</span><br><span class="line">layout: about</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>这里要注意的是<code>title</code>(对应的链接名称) 可修改，标签云/Timeline/友情链接的markdown文件中的<code>layout</code>不可修改，因为material主题已经在主题文件夹内的<code>layout</code>中的<code>post.ejs</code>中定义好了，对应的layout调用对应的页面ejs文件去生成相关页面。<br>layout为about没有相关定义的页面，所以会生成一篇普通文章，但是如果想作修改，就可以按照后方第2点说到的来做啦。</p><ul><li>创建<code>友情链接</code>页面还需要继续进行下面操作<br>在hexo目录下的<code>source</code>文件夹内创建一个名为<code>_data</code>（不可以改名）的文件夹<br>然后在文件内创建一个名为<code>links.yml</code>的文件,在其中添加相关数据即可，格式如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#Name: #将 Name 改为友情链接的名字，例如 Viosey。</span><br><span class="line">#    link: http://example.com #友情链接的地址</span><br><span class="line">#    avatar: http://example.com/avatar.png #为友情链接的头像</span><br><span class="line">#    descr: &quot;这里填写对友情链接的描述&quot;</span><br><span class="line"># 例如</span><br><span class="line">Viosey:</span><br><span class="line">    link: http://example.com</span><br><span class="line">    avatar: ../img/picture.jpg #路径是主题文件夹里的source的img</span><br><span class="line">    descr: &quot;这是描述文字&quot;</span><br></pre></td></tr></table></figure></li></ul><p>添加多个友情链接，我们只需要根据上面的格式重复填写即可。</p><ol start="2"><li><h5 id="在侧边栏添加自定义页面"><a href="#在侧边栏添加自定义页面" class="headerlink" title="在侧边栏添加自定义页面"></a>在侧边栏添加自定义页面</h5>这里以<code>我的作品集</code>为例</li></ol><ul><li><p>在主题的配置文件<code>_config.yml</code>中找到<code>Pages</code>，加入或修改相关内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">我的作品集:</span><br><span class="line">    # 如果不需要在站内自定义页面，可以直接贴地址跳转，直接贴地址的话，后面的步骤都不需要做了</span><br><span class="line">    # link: &quot;https://niccce.github.io/MyWorks/&quot;</span><br><span class="line">    #图标选择网站是https://material.io/icons/,只需要像下面一样把icon对应的配置项换掉就可以切换图标</span><br><span class="line">    link: &quot;/myWorks&quot;</span><br><span class="line">    icon: book</span><br><span class="line">    divider: false</span><br></pre></td></tr></table></figure></li><li><p>创建我的作品集页面</p><ul><li>在hexo目录（目录内有_posts、_data等文件夹）下的<code>source</code>文件夹内创建名为<code>myWorks</code>的文件夹</li><li>在<code>myWorks</code>的文件夹内建一个名为<code>index.md</code>的Markdown文件</li><li>修改Markdown文件的内容为<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 我的作品集</span><br><span class="line">date:</span><br><span class="line">layout: myWorks</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在hexo目录中找到<code>themes</code>文件夹，进入<code>material</code>主题文件夹，打开<code>layout</code>文件夹中的<code>post.ejs</code>文件，在<code>&lt;!-- Layouts --&gt;</code>下方适当位置添加下列代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% &#125; else if(page.layout === &apos;myWorks&apos;) &#123; %&gt;</span><br><span class="line">    &lt;!-- Single myWorks Page --&gt;</span><br><span class="line">    &lt;%- partial(&apos;_widget/page-myWorks&apos;) %&gt;</span><br></pre></td></tr></table></figure></li><li><p>在hexo目录中找到<code>themes</code>文件夹，进入<code>material</code>主题文件夹，进入<code>layout</code>文件夹，在<code>_widget</code>文件夹中新建<code>page-myWorks.ejs</code>文件<br>而<code>我的作品集</code>页面直接用了主题原有的<code>page-links.ejs</code>文件，只是复制了一下，改了名字，内容也做相应修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;md-links&quot;&gt;</span><br><span class="line">    &lt;% if (site.data.myWorks) &#123; %&gt;</span><br><span class="line">        &lt;% for (var i in site.data.myWorks) &#123; %&gt;</span><br><span class="line">            &lt;li class=&quot;md-links-item&quot;&gt;</span><br><span class="line">                &lt;a href=&quot;&lt;%= site.data.myWorks[i].link %&gt;&quot; title=&quot;&lt;%= i %&gt;&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">                    &lt;img src=&quot;&lt;%= site.data.myWorks[i].avatar %&gt;&quot; alt=&quot;&lt;%= i %&gt;&quot; height=&quot;72px&quot;/&gt;</span><br><span class="line">                    &lt;span class=&quot;md-links-title&quot;&gt;&lt;%= i %&gt;&lt;/span&gt;&lt;br /&gt;</span><br><span class="line">                    &lt;span&gt;&lt;%= site.data.myWorks[i].descr %&gt;&lt;/span&gt;</span><br><span class="line">                &lt;/a&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></li></ul><p>然后像友情链接页面一样，在<code>_data</code>（不可以改名）文件夹中新建了<code>myWorks.yml</code>文件，内容格式与<code>links.yml</code>一样即可。</p><p>当然，想自己另外写一个页面的朋友，自己编写<code>page-myWorks.ejs</code>文件的内容即可。</p><ol start="3"><li><h5 id="在文章底部增加版权信息"><a href="#在文章底部增加版权信息" class="headerlink" title="在文章底部增加版权信息"></a>在文章底部增加版权信息</h5></li></ol><p>material主题自带了license的，只要在主题配置文件中的<code>license</code>中填入自己想展示的信息即可。<br>也可以按下面的方法自定义。</p><ul><li><p>在主题的配置文件<code>_config.yml</code>最后添加下列代码作为文章是否添加版权信息的总开关</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">post_license:</span><br><span class="line">    enable: true # or false</span><br></pre></td></tr></table></figure></li><li><p>在文章的 Front-matter 中添加如下字段，作为每篇文章是否添加版权信息的独立开关</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_license: true #or false</span><br></pre></td></tr></table></figure></li><li><p>在<code>themes/material/layout/_partial/</code>目录下新建<code>post_license.ejs</code>文件(具体代码可结合个人喜好作修改)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"post-license"</span> <span class="attr">class</span>=<span class="string">"post-license"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-license-author"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">strong</span>&gt;</span>本文作者：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%= config.url %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">theme.author</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-license-link"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">strong</span>&gt;</span>本文链接：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%= page.permalink %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">page.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-license-statement"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">strong</span>&gt;</span>版权声明： <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">           本文由 <span class="tag">&lt;<span class="name">%=</span> <span class="attr">config.author</span> %&gt;</span> 原创，采用 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"</span> <span class="attr">rel</span>=<span class="string">"license"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>署名-非商业性使用-相同方式共享（CC BY-NC-SA）4.0 国际许可协议<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">br</span>&gt;</span>转载请保留以上声明信息！</span><br><span class="line">       <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>themes/material/layout/_partial/post-content.ejs</code>文件最后添加下列代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if(theme.post_license.enable &amp;&amp; page.post_license !== false)&#123;%&gt;</span><br><span class="line">   &lt;%- partial(&apos;_partial/post_license&apos;) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li><li><p>在<code>themes/material/source/css/style.min.css</code>中添加css样式(可结合个人喜好作修改)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#post-license</span> &#123;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">0.5em</span> <span class="number">4.5em</span> <span class="number">3em</span> <span class="number">4.5em</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">1em</span> <span class="number">1.5em</span>;</span><br><span class="line">   <span class="attribute">border-left</span>: <span class="number">3px</span> solid <span class="number">#F44336</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: <span class="number">#F5F5F5</span>;</span><br><span class="line">   <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>参考:</p><blockquote><p><a href="http://tianma.space/post/1810369046/#版权声明" target="_blank" rel="noopener">Hexo 折腾记</a></p></blockquote></blockquote><ol start="4"><li><h5 id="添加更新时间、修改时间显示样式"><a href="#添加更新时间、修改时间显示样式" class="headerlink" title="添加更新时间、修改时间显示样式"></a>添加更新时间、修改时间显示样式</h5><ul><li>找到<code>themes/material/layout/_partial/Paradox-post-info.ejs</code>文件的<code>&lt;!-- Author Name &amp; Date --&gt;</code>字段<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;strong&gt;&lt;%= config.author %&gt;&lt;/strong&gt;</span><br><span class="line">    &lt;!--&lt;span&gt;&lt;%= date(page.date, &apos;MMM DD, YYYY&apos;) %&gt;&lt;/span&gt;--&gt;</span><br><span class="line">    &lt;span&gt;发表：&lt;%= date(page.date, &apos;YYYY.MM.DD&apos;) %&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;更新：&lt;%= date(page.updated, &apos;YYYY.MM.DD&apos;) %&gt;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><h5 id="修改代码块自定义样式"><a href="#修改代码块自定义样式" class="headerlink" title="修改代码块自定义样式"></a>修改代码块自定义样式</h5><ul><li>一直觉得这种代码块的展示颜色太淡了，让我不容易察觉，所以心血来潮就把原本灰色的字体改成了红色。</li><li>先在浏览器里找到影响代码块的相应代码，再到<code>themes/material/source/css</code>目录里寻找那些代码所在的css文件，有原本的css文件还有min的css文件，我尝试了一下，只在原本的文件里修改，没有效果，要在min这个压缩的css文件里加，然后在生成（hexo g）一次文件，就可以看到效果。<br><code>color: #f75858;</code></li></ul></li></ol><h4 id="搭建时的部分注意事项"><a href="#搭建时的部分注意事项" class="headerlink" title="搭建时的部分注意事项"></a>搭建时的部分注意事项</h4><ul><li>换material主题时记得把主题配置文件<code>_config.template.yml</code>重命名为<code>_config.yml</code></li></ul><hr><h3 id="下面是Hello-world，留着以后有需要看文档的时候用"><a href="#下面是Hello-world，留着以后有需要看文档的时候用" class="headerlink" title="下面是Hello world，留着以后有需要看文档的时候用"></a>下面是Hello world，留着以后有需要看文档的时候用</h3><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h5 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h5><h5 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h5><pre><code>$ hexo new &quot;My New Post&quot;</code></pre><p>加四个空格或Tab可以变成一块区域显示耶</p><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h5 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h5 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h5 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      <categories>
          
          <category> essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
